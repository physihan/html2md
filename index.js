var toMarkdown = require('./src/to-markdown');
toMarkdown('<h1>Hello world!</h1>');
(function(factory) {
    "use strict";
    if (typeof define === "function" && (define.cmd || define.cmd)) {
        // using AMD; register as anon module
        define("component/dialog/jquery.dialog", [ "jquery" ], factory);
    } else {
        // no AMD; invoke directly
        factory(typeof jQuery != "undefined" ? jQuery : window.Zepto);
    }
})(function() {
    var win = window;
    var winTop = $(win.top || win), docTop = $(win.top.document);
    /**
     * 弹出框组件
     * @class dialog
     * @param content {Element|String} 用来填充弹出框的内容，可以为字符串或者dom元素
     * @param options {Object} 弹出框配置项
     * @grammar new dialog( el, options )
     * @return dialog
     */
    function dialog(content, options) {
        var _self = this;
        $.isPlainObject(content) && (options = content) && (content = null);
        //合并配置项
        var _options = $.extend({}, dialog._options, options);
        var _cache = dialog.cache.get(_options.cache);
        //检查是否缓存
        if (_cache) {
            _self = _cache;
            _self._options = _options;
        } else {
            //检测是否实例化构造函数
            if (!(this instanceof dialog)) {
                return new dialog(content, options);
            }
            _self._options = _options;
            //组建弹出层结构元素
            _self.frameElement = $(dialog._tpl.frame).addClass(_self._options.style);
            _self.mainElement = $(dialog._tpl.main).appendTo(_self.frameElement);
            _self.mixedElement = $(dialog._tpl.mixed).appendTo(_self.frameElement);
            _self.utilElement = $(dialog._tpl.util).appendTo(_self.mixedElement);
            _self.borderElement = _self.mainElement.children(".dialog-border");
            _self.contElement = $(dialog._tpl.cont).appendTo(_self.borderElement.find(".dialog-border-inner"));
            _self.headElement = $(dialog._tpl.head).appendTo(_self.contElement);
            _self.bodyElement = $(dialog._tpl.body).appendTo(_self.contElement);
            //设置操作按钮
            _self.setButton(_self._options.button);
            //记录弹出层的父元素
            _self._appendToElement = docTop.find("body");
            //将弹出层假隐藏并添加到DOM中
            _self.frameElement.appendTo(_self._appendToElement);
            //弹出层绑定指定显示事件
            _self.frameElement.mousedown(function() {
                _self._isToper && _self.toper(true);
            });
        }
        //设置假隐藏
        _self.frameElement.css({
            display: "block",
            left: -9999,
            top: -9999
        });
        //设置弹出层内容
        _self.content(_self._options.content || content);
        //设置弹出层标题
        _self.title(_self._options.title);
        //设置关闭按钮
        if (_self._options.close) {
            _self._closeElement && _self._closeElement.remove();
            _self._closeElement = $(dialog._tpl.close).appendTo(_self.headElement);
            _self._closeElement.html(_self._options.close);
            _self._closeElement.click(function() {
                _self.close();
            }).mousedown(function(event) {
                event.stopPropagation();
            });
        } else {
            _self._closeElement && _self._closeElement.remove();
        }
        //设置是否置顶显示弹出层
        _self.toper(_self._options.toper);
        //设置弹出层定位方式
        _self.position(_self._options.position);
        //设置弹出层宽度
        _self.width(_self._options.width);
        //设置弹出层高度
        _self.height(_self._options.height);
        //设置弹出层是否拖拽
        _self.drag(_self._options.drag);
        //设置遮罩层
        _self.mask(_self._options.mask);
        //设置层叠级数
        _self.zIndex(_self._options.zIndex);
        //设置弹出层偏移距离
        _self.offset(_self._options.offset[0], _self._options.offset[1]);
        //将弹出层显示并根据参数是否打开弹出层
        _self.frameElement.hide() && _self._options.show && _self.open();
        if (!_cache) {
            //缓存弹出层
            _self._options.cache && dialog.cache.set(_self._options.cache, _self);
            //弹出层实例化后触发回调函数
            $.isFunction(_self._options.onCreate) && _self._options.onCreate.call(_self);
            $.isFunction($.dialog.onCreate) && $.dialog.onCreate.call(_self);
        }
        return _self;
    }
    /**
     * 设置弹出层操作按钮
     * @method dialog.setButton(content)
     * @param button {Array}
     * @return dialog._content
     */
    dialog.prototype.setButton = function(button) {
        if (button.length) {
            if (!this.footElement) {
                this.footElement = $('<div class="dialog-foot"></div>');
                this.bodyElement.after(this.footElement);
            }
            for (var i = 0; i < button.length; i++) {
                if ($.isFunction(button[i])) {
                    var _btn = button[i].call(this);
                    this.footElement.append(_btn);
                } else if ($.isPlainObject(button[i])) {
                    var _btn = $('<button type="button">' + button[i].text + "</button>").addClass(button[i].cls);
                    this.footElement.append(_btn);
                    $.isFunction(button[i].callback) && button[i].callback.call(this, _btn);
                }
            }
        }
    };
    /**
     * 设置或返回弹出层内容
     * @method dialog.setContent(content)
     * @param content {String|Element}
     * @return dialog._content
     */
    dialog.prototype.content = function(content) {
        if (arguments.length) {
            if (content || content === 0 || content === "") {
                content = $.isFunction(content) ? content.call(this) : content;
                this._content = this.contentEle = $('<div class="dialog-content"></div>').append(content);
                this.contentEle.data("dialog", this);
                this.bodyElement.empty().append(this.contentEle);
            }
        } else {
            return this.bodyElement;
        }
        return this;
    };
    /**
     * 设置或返回弹出层标题
     * @method dialog.setTitle(title)
     * @param title {String|Element}
     * @return dialog._title
     */
    dialog.prototype.title = function(title) {
        if (arguments.length) {
            if (title || title === 0 || title === "") {
                if (!this.titleElement) {
                    this.titleElement = $(dialog._tpl.title).appendTo(this.headElement);
                }
                this._title = title;
                this.titleElement.empty().append(this._title);
            }
        } else {
            return this._title;
        }
        return this;
    };
    /**
     * 设置或返回弹出层的偏移距离
     * @method dialog.setOffset(x,y)
     * @param x {String|number} x标识水平偏移,为百分比时则始终相对于当前可视区域
     * @param y {String|number} y标识垂直偏移,为百分比时则始终相对于当前可视区域
     * @return dialog._offset
     */
    dialog.prototype.offset = function(x, y) {
        if (arguments.length) {
            var _x = dialog.translated($.isFunction(x) ? x.call(this.frameElement) : x), _y = dialog.translated($.isFunction(y) ? y.call(this.frameElement) : y);
            if (typeof _x == "string") {
                if (_x.indexOf("!") == 0) {
                    if (_x.indexOf("%") >= 0) {
                        _x = (docTop.width() - this.frameElement.outerWidth()) * (Math.max(parseInt(_x.substr(1)), 0) / 100);
                    } else {
                        _x = Math.max(parseInt(_x), 0);
                    }
                } else {
                    if (_x.indexOf("%") >= 0) {
                        _x = (winTop.width() - this.frameElement.outerWidth()) * (Math.max(parseInt(_x), 0) / 100);
                    }
                    this._positoin == "absolute" && (_x = Math.max(parseInt(_x), 0) + docTop.scrollLeft());
                }
            }
            if (typeof _y == "string") {
                if (_y.indexOf("!") == 0) {
                    if (_y.indexOf("%") >= 0) {
                        _y = (docTop.height() - this.frameElement.outerHeight()) * (Math.max(parseInt(_y.substr(1)), 0) / 100);
                    } else {
                        _y = Math.max(parseInt(_y), 0);
                    }
                } else {
                    if (_y.indexOf("%") >= 0) {
                        _y = (winTop.height() - this.frameElement.outerHeight()) * (Math.max(parseInt(_y), 0) / 100);
                    }
                    this._positoin == "absolute" && (_y = Math.max(parseInt(_y), 0) + docTop.scrollTop());
                }
            }
            (isNaN(parseInt(_x)) || _x < 0) && (_x = this._offset ? this._offset.left : 0);
            (isNaN(parseInt(_y)) || _y < 0) && (_y = this._offset ? this._offset.top : 0);
            this._offset = {
                left: _x,
                top: _y
            };
            this.frameElement.css({
                left: this._offset.left,
                top: this._offset.top
            });
        } else {
            return this._offset;
        }
        return this;
    };
    /**
     * 设置或返回弹出层定位方式
     * @method dialog.setPosition(position)
     * @param position {String} 可以设置absolute和fixed两种定位方式
     * @return dialog._positoin
     */
    dialog.prototype.position = function() {
        var _positoinType = [ "absolute", "fixed" ];
        return function(position) {
            if (arguments.length) {
                $.inArray(position, _positoinType) <= 0 && (position = _positoinType[0]);
                this._positoin = position;
                this.frameElement.css("position", this._positoin);
            } else {
                return this._positoin;
            }
            return this;
        };
    }();
    /**
     * 设置或返回弹出层是否拖拽
     * @method dialog.drag(status)
     * @param status {Boolean}
     * @return dialog._isDrag
     */
    dialog.prototype.drag = function(status) {
        if (arguments.length) {
            this._isDrag = status ? true : false;
            if (this._isDrag) {
                dialog.drag(this);
                this.frameElement.addClass("think-dialog-drag");
            } else {
                this.frameElement.removeClass("think-dialog-drag");
            }
        } else {
            return this._isDrag;
        }
        return this;
    };
    /**
     * 设置或返回弹出层宽度
     * @method dialog.drag(status)
     * @param number {String|Number}
     * @return dialog._width
     */
    dialog.prototype.width = function(number) {
        if (arguments.length) {
            var _number = parseInt(number);
            if (!isNaN(_number)) {
                typeof number == "string" && number.indexOf("%") >= 0 && (_number = _number + "%");
                this.frameElement.css("width", number);
                this.borderElement.css("width", "100%");
            } else {
                this.frameElement.width("auto");
                this.borderElement.css("width", "auto");
            }
        } else {
            return this.frameElement.width();
        }
        return this;
    };
    /**
     * 设置或返回弹出层高度
     * @method dialog.drag(status)
     * @param number {String|Number}
     * @return dialog._height
     */
    dialog.prototype.height = function(number) {
        if (arguments.length) {
            var _number = parseInt(number);
            if (!isNaN(_number)) {
                typeof number == "string" && number.indexOf("%") >= 0 && (_number = _number + "%");
                this.frameElement.css("height", number);
                var _contParent = this.contElement.parent();
                var _contHeight = _contParent.height();
                this.contElement.add(_contParent).height(_contHeight);
                this.bodyElement.height(function(i, n) {
                    var _h = n;
                    $(this).siblings().each(function() {
                        _h = _contHeight - $(this).outerHeight();
                    });
                    return _h;
                });
            } else {
                this.frameElement.height("auto");
                this.contElement.height("auto");
                this.bodyElement.height("auto");
            }
        } else {
            return this.frameElement.height();
        }
        return this;
    };
    /**
     * 设置或返回弹出层层叠级数
     * @method dialog.zIndex(status)
     * @param number {Number}
     * @return dialog._zIndex
     */
    dialog.prototype.zIndex = function(number) {
        if (arguments.length) {
            var _zIndex = parseInt(number);
            if (!isNaN(_zIndex)) {
                this._zIndex = _zIndex;
                dialog.zIndex = Math.max(this._zIndex, dialog.zIndex);
            }
            this.frameElement.css("zIndex", this._zIndex);
            this._markElement && this._markElement.css("zIndex", this._zIndex - 1);
        } else {
            return this._zIndex;
        }
        return this;
    };
    /**
     * 是否需要将弹出层始终指定显示
     * @method dialog.toper()
     * @param number {Number}
     * @return dialog
     */
    dialog.prototype.toper = function(status) {
        if (arguments.length) {
            this._isToper = status ? true : false;
            this._isToper && this.zIndex(dialog.zIndex += 2);
        } else {
            return this._isToper;
        }
        return this;
    };
    /**
     * 设置或返回弹出层是否遮罩
     * @method dialog.zIndex(status)
     * @param number {Number}
     * @return
     */
    dialog.prototype.mask = function(status) {
        var _self = this;
        if (arguments.length) {
            if (status && !this._markElement) {
                this._markElement = $(dialog._tpl.mask).appendTo(this._appendToElement);
                this._markElement.opacity = this._markElement.css("opacity");
                this._markElement.click(function() {
                    _self._options.maskClose && _self.close();
                });
            }
            this._isMask = status ? true : false;
        } else {
            return this._isMask;
        }
        return this;
    };
    /**
     * 打开弹出层
     * @method dialog.open()//可以指定一个删除的动作，作为打开弹出层回调函数的参数
     * @return dialog
     */
    dialog.prototype.open = function(action) {
        var _self = this;
        if (!this.isOpen) {
            this.isOpen = true;
            $.isFunction(_self._options.onBeforeOpen) && _self._options.onBeforeOpen.call(_self, action);
            dialog.effect[this._options.effect]["open"].call(this, function() {
                $.isFunction(_self._options.onOpen) && _self._options.onOpen.call(_self, action);
            });
            this._isMask && this._markElement && this._markElement.fadeTo(300, this._markElement.opacity);
        }
        return this;
    };
    /**
     * 关闭弹出层
     * @method dialog.close()
     * @param action {String} //可以指定一个删除的动作，作为关闭弹出层回调函数的参数
     * @return
     */
    dialog.prototype.close = function(action) {
        var _self = this, _arguments = arguments;
        if (this.isOpen) {
            this.isOpen = false;
            dialog.effect[this._options.effect]["close"].call(this, function() {
                $.isFunction(_self._options.onClose) && _self._options.onClose.apply(_self, _arguments);
                _self._options.cache || _self.destroy();
                $.isFunction(action) && action.call(_self);
            });
            this._isMask && this._markElement && this._markElement.fadeTo(300, 0, function() {
                $(this).hide();
            });
        }
        return this;
    };
    /**
     * 销毁弹出层
     * @method dialog.destroy()
     * @return
     */
    dialog.prototype.destroy = function() {
        dialog.cache.del(this._options.cache);
        if (this.content().children("iframe.dialog-iframe").length) {
            this._options.content[0].contentWindow.document.write("");
            this._options.content[0].contentWindow.close();
            this._options.content.remove();
        }
        this.frameElement.remove();
        this._markElement && this._markElement.remove();
        for (var i in this) {
            delete this[i];
        }
    };
    /**
     * 弹出层缓存操作类
     */
    dialog.cache = function() {
        var _cacheList = win.top.__THINKCACHE__ = $.isPlainObject(win.top.__THINKCACHE__) ? win.top.__THINKCACHE__ : {};
        return {
            /**
             * 设置缓存
             * @method dialog._cache.set(name,object)
             * @param name {String} 缓存名称
             * @param object {Object} 缓存对象实例
             * @return Void
             */
            set: function(name, object) {
                if (typeof name == "string") {
                    _cacheList[name] = object;
                } else if (dialog.isElement(name)) {
                    $(name).data("thinkDialog", object);
                }
            },
            /**
             * 删除缓存
             * @method dialog._cache.del(name,object)
             * @param name {String} 缓存名称
             * @return Void
             */
            del: function(name) {
                if (typeof name == "string") {
                    delete _cacheList[name];
                } else if (dialog.isElement(name)) {
                    $(name).removeData("thinkDialog");
                }
            },
            /**
             * 获取缓存
             * @method dialog._cache.get(name)
             * @param name {String} 缓存名称
             * @return Object
             */
            get: function(name) {
                if (typeof name == "string") {
                    return _cacheList[name];
                } else if (dialog.isElement(name)) {
                    return $(name).data("thinkDialog");
                }
            }
        };
    }();
    //禁用或启用文本选中
    dialog.unselectable = function(element, status) {
        element.each(function() {
            if (status) {
                this.onselectstart = function() {
                    return false;
                };
                this.unselectable = "on";
                this.style.MozUserSelect = "none";
                this.style.WebkitUserSelect = "none";
            } else {
                this.onselectstart = function() {
                    return true;
                };
                this.unselectable = "off";
                this.style.MozUserSelect = "auto";
                this.style.WebkitUserSelect = "auto";
            }
        });
    };
    /**
     * 对元素执行拖拽
     * @method dialog.drag(element)
     * @param element 待检测的参数
     * @return Boolean
     */
    dialog.drag = function() {
        var _dragWrap = [];
        return function(self) {
            var _self = self, _status = false, _maxLeft, _maxTop, _x, _y, _mouseX, _mouseY;
            if ($.inArray(_self, _dragWrap) < 0) {
                _self.headElement.bind("mousedown.thinkdialog", function(event) {
                    if (_self._isDrag) {
                        _status = true;
                        _offset = _self.frameElement.offset();
                        if (_self._positoin == "fixed") {
                            _offset.left -= docTop.scrollLeft();
                            _offset.top -= docTop.scrollTop();
                            _maxLeft = Math.max(winTop.width() - _self.frameElement.outerWidth(), 0);
                            _maxTop = Math.max(winTop.height() - _self.frameElement.outerHeight(), 0);
                        } else {
                            _maxLeft = Math.max(docTop[0].documentElement.scrollWidth - _self.frameElement.outerWidth(), 0);
                            _maxTop = Math.max(docTop[0].documentElement.scrollHeight - _self.frameElement.outerHeight(), 0);
                        }
                        _mouseX = event.pageX - _offset.left;
                        _mouseY = event.pageY - _offset.top;
                        dialog.unselectable(_self._appendToElement.add(_self.frameElement), true);
                        $.isFunction(_self._options.onDragStart) && _self._options.onDragStart.call(_self, _mouseX, _mouseY, event);
                    }
                });
                docTop.bind("mousemove.thinkdialog", function(event) {
                    if (_self._isDrag && _status) {
                        _x = event.pageX - _mouseX;
                        _y = event.pageY - _mouseY;
                        if (_x < 0) {
                            _x = 0;
                        } else if (_x > _maxLeft) {
                            _x = _maxLeft;
                        }
                        if (_y < 0) {
                            _y = 0;
                        } else if (_y > _maxTop) {
                            _y = _maxTop;
                        }
                        _self.frameElement.css({
                            left: _x,
                            top: _y
                        });
                        $.isFunction(_self._options.onDraging) && _self._options.onDraging.call(_self, _x, _y, event);
                    }
                }).bind("mouseup.thinkdialog", function(event) {
                    if (_status) {
                        _status = false;
                        dialog.unselectable(_self._appendToElement.add(_self.frameElement), false);
                        $.isFunction(_self._options.onDragEnd) && _self._options.onDragEnd.call(_self, event);
                    }
                });
                _dragWrap.push(dialog);
            }
        };
    }();
    /**
     * 判断是否为合法dom元素
     * @method dialog.isElement(element)
     * @param element 待检测的参数
     * @return Boolean
     */
    dialog.isElement = function(element) {
        if (element && typeof element[0] == "object" && element[0].nodeName) {
            return true;
        } else {
            return false;
        }
    };
    /**
     * 将英文位置字符转换标准数值
     * @method dialog.isElement(element)
     * @param param 待转换的参数
     * @return Number
     */
    dialog.translated = function(param) {
        var _table = {
            left: "0%",
            center: "50%",
            right: "100%",
            top: "0%",
            bottom: "100%"
        };
        if (typeof param == "string" && param in _table) {
            return _table[param];
        } else {
            return param;
        }
    };
    // 弹出层层叠起始基数
    dialog.zIndex = 5555;
    //扩展jquery动画算法
    $.extend($.easing, {
        easeOutExpo: function(x, t, b, c, d) {
            return t == d ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;
        }
    });
    /**
     * 弹出层打开关闭效果支持类型
     */
    dialog.effect = {
        visibility: {
            open: function(callback) {
                return this.frameElement.show(0, callback);
            },
            close: function(callback) {
                return this.frameElement.hide(0, callback);
            }
        },
        opacity: {
            open: function(callback) {
                return this.frameElement.stop(false, true).fadeIn(400, callback);
            },
            close: function(callback) {
                return this.frameElement.stop(false, true).fadeOut(400, callback);
            }
        },
        scroll: {
            open: function(callback) {
                var _offset = this._offset;
                this.frameElement.css({
                    opacity: 1,
                    left: _offset.left,
                    top: _offset.top
                }).show();
                if (this.position() == "absolute") {
                    var _e = this.frameElement.offset().top;
                    var _s = $(document).scrollTop() - this.frameElement.outerHeight();
                } else {
                    var _e = this.frameElement.offset().top - $(document).scrollTop();
                    var _s = -this.frameElement.outerHeight();
                }
                this.frameElement.stop(false, false).css({
                    top: _s
                }).animate({
                    top: _e
                }, 250, "easeOutExpo", callback);
            },
            close: function(callback) {
                var _self = this;
                if (this.position() == "absolute") {
                    var _s = this.frameElement.offset().top;
                    var _e = $(document).scrollTop() - this.frameElement.outerHeight();
                } else {
                    var _s = this.frameElement.offset().top - $(document).scrollTop();
                    var _e = -this.frameElement.outerHeight();
                }
                this.frameElement.stop(false, false).css("top", _s).animate({
                    top: _e,
                    opacity: 0
                }, 500, "easeOutExpo", function() {
                    _self.isOpen || $(this).hide();
                    $.isFunction(callback) && callback();
                });
            }
        }
    };
    /**
     * 弹出框默认配置项
     */
    dialog._options = {
        style: "think-dialog",
        //弹出框样式名称
        title: null,
        //弹出层标题
        content: null,
        //弹出层内容
        close: "×",
        //弹出层关闭按钮
        drag: true,
        //弹出层允许拖拽
        width: "auto",
        //宽度自动
        height: "auto",
        //高度度自动
        position: "absolute",
        //设置弹出层定位方式
        offset: [ "50%", "20%" ],
        //设置弹出层的偏移距离,偏移距最小为0
        mask: true,
        //是否需要遮罩层
        maskClose: true,
        //点击遮罩层关闭弹出层
        show: true,
        //初始是否显示
        toper: true,
        //是否需要置顶显示弹出层
        zIndex: null,
        //设置弹出层的层叠级数
        button: [],
        //设置操作按钮
        cache: null,
        //指定一个缓存标识符，如果为null则不缓存，标识符可以为字符串获取dom元素
        effect: "scroll",
        //弹出层的打开关闭方式
        onCreate: null,
        //弹出层创建完成后相应回调函数
        onOpen: null,
        //弹出层打开时相应回调函数
        onDragStart: null,
        //弹出层拖拽开始响应回调函数
        onDraging: null,
        //弹出层拖拽响应回调函数
        onDragEnd: null,
        //弹出层拖拽结束响应回调函数
        onClose: null
    };
    /**
     * 弹出框框架模版
     */
    dialog._tpl = {
        frame: '<div style="left:0;top:0;"></div>',
        main: '<div class="dialog-main" style="height: 100%;"><table class="dialog-border" style="border-collapse: collapse; border-spacing:0;height: 100%;"><tr><td class="dialog-border-inner" style="vertical-align: top;"></td></tr></table></div>',
        mixed: '<div class="dialog-mixed"></div>',
        util: '<div class="dialog-util"></div>',
        head: '<div class="dialog-head"></div>',
        body: '<div class="dialog-body"></div>',
        cont: '<div class="dialog-wrap"></div>',
        title: '<strong class="dialog-title"></strong>',
        close: '<span class="dialog-close"></span>',
        mask: '<div class="think-dialog-mask" style="display: none;"></div>',
        loading: "<span><b>&nbsp;</b></span>"
    };
    /**
     * 扩展弹出层
     */
    if (!winTop[0].$.dialog) {
        winTop[0].$.dialog = function(content, options) {
            return new dialog(content, options);
        };
        $.extend(winTop[0].$.dialog, {
            /**
             * 从服务器取得内容填充弹出层
             * @method dialog.load(url,options)
             * @param url {String|Object} 服务器地址或标准的ajax参数字面量
             * @param options {Object} 弹出层配置项，同dialog.options对应
             * @return dialog
             */
            load: function(url, options) {
                var _options = $.extend({
                    style: "think-dialog-load"
                }, options);
                var _dialog = $.dialog.get(_options.cache);
                if (!_dialog) {
                    var _content = $(dialog._tpl.loading).addClass("dialog-loading");
                    var _ajax = {};
                    var _onOpen = _options.onOpen;
                    var _isLoaded = false, _isOpened = false;
                    _options.onOpen = function() {
                        if (_isLoaded) {
                            $.isFunction(_options.onComplete) && _options.onComplete.call(this);
                        }
                        _isOpened = true;
                        $.isFunction(_onOpen) && _onOpen.call(this);
                    };
                    _dialog = $.dialog(_content, _options);
                    if ($.type(url) == "string") {
                        _ajax.url = url;
                    } else if ($.isPlainObject(url)) {
                        $.extend(_ajax, url);
                    }
                    var _success = _ajax.success;
                    _ajax.success = function(data) {
                        var _data = data;
                        if ($.isFunction(_options.praseData)) {
                            _data = _options.praseData.call(_dialog, _data);
                        }
                        if ($.isFunction($.dialog.praseData)) {
                            _data = $.dialog.praseData.call(_dialog, _data);
                        }
                        if (_data !== false) {
                            var _offset = _dialog.offset();
                            _dialog.content(_data);
                            _dialog.offset(_dialog._options.offset[0], _dialog._options.offset[1]);
                        }
                        $.isFunction(_options.onLoad) && _options.onLoad.call(_dialog, data);
                        if (_isOpened) {
                            $.isFunction(_options.onComplete) && _options.onComplete.call(_dialog);
                        }
                        _isLoaded = true;
                    };
                    _ajax.beforeSend = function() {
                        $.isFunction(_options.beforeSend) && _options.beforeSend.call(_dialog);
                    };
                    $.ajax(_ajax);
                } else {
                    _dialog.open();
                }
                return _dialog;
            },
            /**
             * 创建iframe用来展示指定服务器段页面
             * @method dialog.iframe(src,options)
             * @param src {String} 服务器段页面地址
             * @param options {Object} 弹出层配置项，同dialog.options对应
             * @return dialog
             */
            iframe: function(src, options) {
                if ($.type(src) == "string") {
                    var _dialog = null;
                    var _name = new Date().getTime().toString();
                    var _options = $.extend({
                        style: "think-dialog-iframe"
                    }, options);
                    var _onCreate = _options.onCreate;
                    var _onDragStart = _options.onDragStart;
                    var _onDragEnd = _options.onDragEnd;
                    var _onCreate = _options.onCreate;
                    if (!$.dialog.get(_options.cache)) {
                        _options.content = $('<iframe class="dialog-iframe" name="' + _name + '" src="' + src + '" width="100%" height="100%" frameborder="0" scrolling="no" style="vertical-align: top;"></iframe>');
                        _options.onCreate = function() {
                            var _self = this;
                            _self.dragMask = $('<div class="dialog-mask" style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; display: none; zIndex: 10; background-color: #fff">&nbsp;</div>').css("opacity", 0).appendTo(_self.mixedElement);
                            _self.loading = $(dialog._tpl.loading).addClass("dialog-loading").appendTo(_self.mixedElement);
                            _self._content.load(function() {
                                _self.loading.hide();
                                $.isFunction(_self._options.onLoad) && _self._options.onLoad.call(this, _self);
                            });
                        };
                        _options.onDragStart = function() {
                            this.dragMask.css("top", this.headElement.outerHeight()).show();
                            $.isFunction(_onDragStart) && _onDragStart.apply(this, arguments);
                        };
                        _options.onDragEnd = function() {
                            this.dragMask.hide();
                            $.isFunction(_onDragEnd) && _onDragEnd.apply(this, arguments);
                        };
                    }
                    _dialog = $.dialog(_options);
                    dialog.cache.set(_name, _dialog);
                    return _dialog;
                }
            },
            /**
             * 将dialog包装成成功样式框
             * @method dialog.success(content,callback)
             * @param content {String} 弹出层内容
             * @param callback {Function} 关闭弹出层时的回调函数
             * @return dialog
             */
            success: function(content, callback) {
                var _options = {
                    style: "think-dialog-success",
                    content: content,
                    title: null,
                    close: null,
                    time: 1500,
                    //自动关闭等待秒数，整数值
                    drag: false,
                    mask: false,
                    maskClose: false,
                    offset: [ "50%", "0" ],
                    cache: "success",
                    position: "fixed",
                    onClose: callback,
                    onOpen: function() {
                        var _self = this;
                        setTimeout(function() {
                            _self.close();
                        }, _self._options.time);
                    }
                };
                if ($.isFunction(callback)) {
                    _options.onClose = callback;
                } else {
                    $.extend(_options, callback);
                }
                return $.dialog(_options);
            },
            /**
             * 将dialog包装成失败样式框
             * @method dialog.error(content,callback)
             * @param content {String} 弹出层内容
             * @param callback {Function} 关闭弹出层时的回调函数
             * @return dialog
             */
            error: function(content, callback) {
                var _options = {
                    style: "think-dialog-error",
                    content: content,
                    close: null,
                    title: null,
                    time: 3e3,
                    //自动关闭等待秒数，整数值
                    drag: false,
                    mask: false,
                    maskClose: false,
                    offset: [ "50%", "0" ],
                    cache: "error",
                    position: "fixed",
                    onClose: callback,
                    onOpen: function() {
                        var _self = this;
                        setTimeout(function() {
                            _self.close();
                        }, _self._options.time);
                    }
                };
                if ($.isFunction(callback)) {
                    _options.onClose = callback;
                } else {
                    $.extend(_options, callback);
                }
                return $.dialog(_options);
            },
            /**
             * 将dialog包装成失败样式框
             * @method dialog.error(content,callback)
             * @param content {String} 弹出层内容
             * @param callback {Function} 关闭弹出层时的回调函数
             * @return dialog
             */
            loading: function(content, callback) {
                return $.dialog({
                    style: "think-dialog-loading",
                    title: null,
                    content: content,
                    close: null,
                    drag: false,
                    maskClose: false,
                    mask: false,
                    cache: "loading",
                    position: "fixed",
                    offset: [ "50%", "0" ],
                    onClose: callback
                });
            },
            /**
             * 模拟window对象alert弹出框
             * @method dialog.alert(content,callback)
             * @param content {String} 弹出层内容
             * @param callback {Function} 关闭弹出层时的回调函数
             * @return dialog
             */
            alert: function() {
                var _callback;
                return function(content, callback) {
                    var _callback = callback;
                    return $.dialog({
                        style: "think-dialog-alert",
                        title: "提示",
                        content: content,
                        drag: false,
                        maskClose: false,
                        cache: "alert",
                        position: "fixed",
                        onOpen: function() {
                            this.defineElement && this.defineElement.focus();
                        },
                        onCreate: function() {
                            var _self = this;
                            this.footElement = $('<div class="dialog-foot"></div>');
                            this.bodyElement.after(this.footElement);
                            this.defineElement = $('<button class="dialog-btn dialog-define" type="button">确定</button>').appendTo(this.footElement);
                            this.defineElement.unbind("click.thinkdialog").bind("click.thinkdialog", function() {
                                _self.close("1");
                                $.isFunction(_callback) && _callback(1);
                            });
                        }
                    });
                };
            }(),
            /**
             * 模拟警告弹出框
             * @method dialog.wran(content,callback)
             * @param content {String} 弹出层内容
             * @param callback {Function} 关闭弹出层时的回调函数
             * @return dialog
             */
            wran: function() {
                var _callback;
                return function(content, callback) {
                    _callback = callback;
                    return $.dialog({
                        style: "think-dialog-wran",
                        title: "警告",
                        content: content,
                        drag: false,
                        maskClose: false,
                        cache: "wran",
                        position: "fixed",
                        onOpen: function() {
                            this.defineElement && this.defineElement.focus();
                        },
                        onCreate: function() {
                            var _self = this;
                            this.footElement = $('<div class="dialog-foot"></div>');
                            this.bodyElement.after(this.footElement);
                            this.defineElement = $('<button class="dialog-btn dialog-define" type="button">确定</button>').appendTo(this.footElement);
                            this.defineElement.bind("click.thinkdialog", function() {
                                _self.close("1");
                                $.isFunction(_callback) && _callback(1);
                            });
                        }
                    });
                };
            }(),
            /**
             * 模拟window对象confirm弹出框
             * @method dialog.confirm(content,defineCallback,cancelCallback)
             * @param content {String} 弹出层内容
             * @param defineCallback {Function} 确定时的回调函数
             * @param cancelCallback {Function} 成功时的回调函数
             * @return dialog
             */
            confirm: function() {
                var _callback;
                return function(content, callback) {
                    _callback = callback;
                    return $.dialog(content, {
                        style: "think-dialog-confirm",
                        title: "确定",
                        drag: false,
                        maskClose: false,
                        cache: "confirm",
                        position: "fixed",
                        onOpen: function() {
                            this.defineElement && this.defineElement.focus();
                        },
                        onCreate: function() {
                            var _self = this;
                            this.footElement = $('<div class="dialog-foot"></div>');
                            this.bodyElement.after(this.footElement);
                            this.defineElement = $('<button class="dialog-btn dialog-define" type="button">确定</button>').appendTo(this.footElement);
                            this.cancelElement = $('<button class="dialog-btn dialog-cancel" type="button">取消</button>').appendTo(this.footElement);
                            this.defineElement.unbind("click.thinkdialog").bind("click.thinkdialog", function() {
                                _self.close("1");
                                $.isFunction(_callback) && _callback(1);
                            });
                            this.cancelElement.unbind("click.thinkdialog").bind("click.thinkdialog", function() {
                                _self.close("2");
                                $.isFunction(_callback) && _callback(2);
                            });
                        }
                    });
                };
            }(),
            /**
             * 获取弹出层对象
             * @method dialog.get(param)
             * @param param {String|Element} 弹出层缓存的标识
             * @return dialog
             */
            get: function(param) {
                if (dialog.isElement(param)) {
                    return param.data("dialog");
                } else {
                    if ($.isWindow(param)) {
                        param = param.name;
                    }
                    return dialog.cache.get(param);
                }
            }
        });
    }
    $.dialog = winTop[0].$.dialog;
    /**
     * 将jquery对象填充到弹出层中
     * @method dialog
     * @param options {Object} 弹出层配置项
     * @return {self}
     */
    $.fn.dialog = function(options) {
        if (this.length) {
            return this.each(function() {
                new dialog($(this), options);
            });
        } else {
            return new dialog(this.selector, options);
        }
    };
});
(function(factory) {
    "use strict";
    if (typeof define === "function" && (define.cmd || define.cmd)) {
        // using AMD; register as anon module
        define("component/jquery-plugs/jquery.validator", [ "jquery" ], factory);
    } else {
        // no AMD; invoke directly
        factory(typeof jQuery != "undefined" ? jQuery : window.Zepto);
    }
})(function() {
    /**
     * 验证数据构造函数
     * @param options {Object} 配置项，参照validator._config
     * @return validator
     */
    function validator(options) {
        //合并配置项
        this._options = $.extend(true, {}, validator._config, options);
        //记录验证规则
        this._validatorRule = $.extend({}, validator._rules);
        //扩展验证规则
        validator._bridge(this, "extendRule", this._options.rules);
        //记录验证数据
        this._validatorData = {};
        //记录验证地图
        this._validatorMap = {};
        //记录关联依赖列表
        this._referQueue = {};
        //设置验证地图
        validator._bridge(this, "createItem", this._options.map);
        //设置初始验证禁用项
        validator._bridge(this, "disabled", this._options.disabled);
        //扩展对象原型链
        if (!validator._instantiation) {
            for (var i in validator) {
                if (i.indexOf("_") < 0) {
                    validator.prototype[i] = validator[i];
                }
            }
            validator._instantiation = true;
        }
        //触发初始化完毕回调函数
        $.isFunction(this._options.onCreate) && this._options.onCreate.call(this);
        //触发全局钩子事件函数
        $.isFunction(validator._hook.onCreate) && validator._hook.onCreate.call(this);
    }
    /**
     * 设置对象成员方法属性
     * @return void
     */
    validator._bridge = function(obj, name, param) {
        if (typeof "name" == "string") {
            if (name in validator && $.isFunction(validator[name])) {
                return validator[name].apply(obj, Array.prototype.slice.call(arguments, 2));
            }
        }
    };
    /**
     * 设置关联依赖
     * @return void
     */
    validator.setRefer = function(item, name) {
        $.isArray(item) || (item = [ item ]);
        $.isArray(name) || (name = [ name ]);
        name = $.grep(name, function(v, i) {
            return v && typeof v == "string";
        });
        for (var i = 0; i < item.length; i++) {
            if (validator._bridge(this, "isItem", item[i])) {
                var _join = item[i].use("get", "join");
                $.isArray(_join) ? $.unique(_join, name) : _join = name;
                item[i].use("set", "join", name);
            }
        }
    };
    /**
     * 删除关联依赖
     * @return void
     */
    validator.delRefer = function(item, name) {
        $.isArray(item) || (item = [ item ]);
        $.isArray(name) || (name = [ name ]);
        for (var i = 0; i < item.length; i++) {
            if (validator._bridge(this, "isItem", item[i])) {
                var _join = item[i].use("get", "join");
                if ($.isArray(_join)) {
                    var _arr = $.grep(_join, function(n, i) {
                        return $.inArray(n, name);
                    });
                    item[i].use("set", "join", _arr);
                }
            }
        }
    };
    /**
     * 获取关联依赖
     * @return void
     */
    validator.getRefer = function(item) {
        $.isArray(item) && (item = item[0]);
        if (validator._bridge(this, "isItem", item)) {
            return item.use("get", "join");
        }
        return [];
    };
    /**
     * 获取关联依赖验证项
     * @return void
     */
    validator.getReferItem = function(item) {
        $.isArray(item) && (item = item[0]);
        var _items = [];
        if (validator._bridge(this, "isItem", item)) {
            var _joins = validator._bridge(this, "getRefer", item), _jl = _joins.length;
            for (var j = 0; j < _jl; j++) {
                _items = _items.concat(validator._bridge(this, "getItem", "." + _joins[j]));
            }
        }
        return _items;
    };
    /**
     * 扩展验证规则
     * @return void
     */
    validator.extendRule = function(name, rule) {
        var _obj = name;
        if (typeof _obj == "string") {
            _obj = {};
            _obj[name] = rule;
        }
        if ($.isPlainObject(_obj)) {
            $.extend(this._validatorRule, _obj);
        }
    };
    /**
     * 添加验证信息项
     * @param item {Object} 验证信息的数据结构，如{id:'test', name: 'test', rule: 'require', type: 'regex', must: true}
     * @return item
     */
    validator.createItem = function(item) {
        if (arguments.length) {
            var _list = validator._bridge(this, "_revise", item);
            var _items = [];
            if ($.isArray(_list)) {
                var _length = _list.length;
                if (_length) {
                    this._validatorMap.alone || (this._validatorMap.alone = {});
                    this._validatorMap.many || (this._validatorMap.many = {});
                    for (var i = 0; i < _length; i++) {
                        _list[i] = validator._bridge(this, "_fixture", _list[i]);
                        _list[i].__parent = this;
                        _list[i]["__alone"] = {
                            _source: this._validatorMap.alone,
                            _id: _list[i]["id"]
                        };
                        this._validatorMap.alone[_list[i]["id"]] = _list[i];
                        if (typeof _list[i]["name"] == "string") {
                            if (!$.isArray(this._validatorMap.many[_list[i]["name"]])) {
                                this._validatorMap.many[_list[i]["name"]] = [];
                            }
                            this._validatorMap.many[_list[i]["name"]].push(_list[i]);
                            _list[i]["__many"] = {
                                _source: this._validatorMap.many[_list[i]["name"]],
                                _index: this._validatorMap.many[_list[i]["name"]].length - 1
                            };
                        }
                        validator._bridge(this, "setRefer", _list[i], _list[i]["join"]);
                        _items.push(_list[i]);
                    }
                }
            }
            if (_items.length <= 1) {
                return _items[0];
            }
            return _items;
        }
    };
    /**
     * 移除验证信息项
     * @param mask {String} id或name的标识字符串，如'#id'或'.name'
     * @return number
     */
    validator.removeItem = function(mask) {
        if (typeof mask == "string") {
            var _source = validator._bridge(this, "getItem", mask);
            if ($.isArray(_source)) {
                var _length = _source.length;
                for (var i = _source.length - 1; i >= 0; i--) {
                    var _alone = _source[i]["__alone"]["_source"];
                    var _id = _source[i]["__alone"]["_id"];
                    var _many = _source[i]["__many"]["_source"];
                    var _index = _source[i]["__many"]["_index"];
                    delete _alone[_id];
                    _many.splice(_index, 1);
                }
                return _length;
            }
        }
    };
    /**
     * 获取验证信息
     * @param mask {String} id或name的标识字符串，如'#id'或'.name'
     * @return items
     */
    validator.getItem = function(mask) {
        if (typeof mask == "string") {
            var _source = [];
            validator._bridge(this, "_getMaskCallback", mask, function(id) {
                for (var i in this._validatorMap.alone) {
                    if (this._validatorMap.alone[i]["id"] == id || this._validatorMap.alone[i]["__id"] == id) {
                        _source.push(this._validatorMap.alone[i]);
                        break;
                    }
                }
            }, function(name) {
                for (var i in this._validatorMap.many) {
                    if (i == name) {
                        _source = _source.concat(this._validatorMap.many[name]);
                        break;
                    }
                }
            });
            return _source;
        }
    };
    /**
     * 判断是否为有效验证单项
     * @return boolean
     */
    validator.isItem = function(item) {
        var _result = true;
        if ($.isArray(item)) {
            for (var i = 0; i < item.length; i++) {
                if (!(item[i] instanceof validator._fixture)) {
                    _result = false;
                    break;
                }
            }
        } else {
            _result = item instanceof validator._fixture;
        }
        return _result;
    };
    /**
     * 验证数据
     * @param data {String|Object|Number} 待验证的数据，可以为字符串数字类型也可以是一组配置项如：[{name:'test',value:'test'}]
     * @param rule {Item} 验证信息项，未指定取初始化配置验证项
     * @return boolean
     */
    validator.check = function(data, rule) {
        var _data = validator._bridge(this, "_formatData", data, rule), _rule = rule, _status = true, _result = true, _isItem = validator._bridge(this, "isItem", _rule), _refers = [], _items = [], _length = 0, _total = 0;
        this._validatorData = $.extend(this._validatorData, _data);
        if (_isItem) {
            _rule = validator._bridge(this, "_formatRule", rule);
        } else {
            _rule = this._validatorMap.many;
        }
        for (var i in _rule) {
            _length = _rule[i].length;
            _result = true;
            for (var j = 0; j < _length; j++) {
                _refers = validator._bridge(this, "getReferItem", _rule[i][j]);
                _items = _refers.concat(_rule[i][j]);
                _total = _items.length;
                for (var k = 0; k < _total; k++) {
                    if (!_items[k].use("check", _data[_items[k]["name"]] || "")) {
                        _result = false;
                        _status = false;
                        break;
                    }
                }
                if (!_result) {
                    break;
                }
            }
        }
        return _status;
    };
    /**
     *  格式化验证数据
     * @return Object
     */
    validator._formatData = function(data, rule) {
        var _data = data, _proxy = {}, _value = "";
        if (!$.isArray(_data)) {
            _value = _data;
            _data = [];
        }
        for (var i = 0; i < _data.length; i++) {
            if ($.isPlainObject(_data[i]) && "name" in _data[i]) {
                if (!_proxy[_data[i]["name"]]) {
                    _proxy[_data[i]["name"]] = _data[i]["value"];
                } else {
                    if (!$.isArray(_proxy[_data[i]["name"]])) {
                        _proxy[_data[i]["name"]] = [ _proxy[_data[i]["name"]] ];
                    }
                    _proxy[_data[i]["name"]].push(_data[i]["value"]);
                }
            }
        }
        if (!$.isArray(rule)) {
            for (var i in this._validatorMap.many) {
                i in _proxy || (_proxy[i] = _value);
            }
        } else {
            for (var i = 0; i < rule.length; i++) {
                if (validator._bridge(this, "isItem", rule[i])) {
                    if (!(rule[i]["name"] in _proxy)) {
                        _proxy[rule[i]["name"]] = "";
                    }
                }
            }
        }
        return _proxy;
    };
    /**
     *  格式化验证规则
     * @return Object
     */
    validator._formatRule = function(rule) {
        var _proxy = {}, _rule = $.isArray(rule) ? rule : [ rule ];
        for (var i = 0; i < _rule.length; i++) {
            if (validator._bridge(this, "isItem", rule[i])) {
                if (!(rule[i]["name"] in _proxy)) {
                    _proxy[rule[i]["name"]] = [];
                }
                _proxy[rule[i]["name"]].push(rule[i]);
            }
        }
        return _proxy;
    };
    /**
     * 禁用验证
     * @return number
     */
    validator._disabled = function(mask, status) {
        status = typeof status == "undefined" ? true : status ? true : false;
        if (!$.isArray(mask)) {
            mask = [ mask ];
        }
        var _number = 0;
        for (var i = 0; i < mask.length; i++) {
            if (typeof mask[i] == "string") {
                var _source = validator._bridge(this, "getItem", mask[i]);
                if ($.isArray(_source)) {
                    var _length = _source.length;
                    for (var i = 0; i < _source.length; i++) {
                        _source[i].use("disabled", status);
                        ++_number;
                    }
                }
            }
        }
        return _number;
    };
    /**
     * 禁用验证
     * @return number
     */
    validator.disabled = function(mask) {
        return validator._bridge(this, "_disabled", mask, true);
    };
    /**
     * 启用验证
     * @return number
     */
    validator.enable = function(mask) {
        return validator._bridge(this, "_disabled", mask, false);
    };
    /**
     * 根据标识处理回调
     * @return void
     */
    validator._getMaskCallback = function(mask, callback1, callback2) {
        if (typeof mask == "string") {
            var _isId = false, _mask = mask;
            if (mask.indexOf("#") == 0) {
                _isId = true;
                _mask = _mask.substr(1);
            } else if (mask.indexOf(".") == 0) {
                _mask = _mask.substr(1);
            }
            if (_isId) {
                $.isFunction(callback1) && callback1.call(this, _mask);
            } else {
                $.isFunction(callback2) && callback2.call(this, _mask);
            }
        }
    };
    //记录名称累加值
    validator._cumulation = new Date().getTime();
    //校正验证信息
    validator._revise = function(rule, must, type) {
        var i = 0, l = 0, info = rule;
        if ($.isPlainObject(info)) {
            info = [ info ];
        } else if (!$.isArray(info)) {
            info = [ {
                rule: info,
                must: typeof must == "undefined" ? true : must ? true : false
            } ];
        }
        l = info.length;
        for (;i < l; i++) {
            var _id = "__" + validator._cumulation++ + "__";
            if (typeof info[i].rule == "undefined") {
                info[i].rule = null;
            }
            if (typeof info[i].must == "undefined") {
                info[i].must = true;
            }
            if (typeof info[i].id == "undefined") {
                info[i].id = _id;
            }
            if (typeof info[i]._disabled == "undefined") {
                info[i]._disabled = false;
            } else {
                info[i]._disabled = info[i]._disabled ? true : false;
            }
            info[i].__id = _id;
        }
        return info;
    };
    //扩展验证信息对象
    validator._fixture = function(item) {
        if (!(this instanceof validator._fixture)) {
            return new validator._fixture(item);
        }
        $.extend(this, item, {
            _switch: true
        });
        if ("use" in this) {
            this._use = this.use;
            delete this.use;
        }
        this.use = function(name, param) {
            var method = name;
            Array.prototype.splice.call(arguments, 0, 1);
            Array.prototype.unshift.call(arguments, this, "_fixture_" + method);
            return validator._bridge.apply(null, arguments);
        };
    };
    //验证数据
    validator._fixture_check = function(data) {
        //检测是否禁用
        if (this.use("get", "disabled")) {
            return;
        }
        if (!this.must && (!data || !data.length)) {
            return true;
        }
        //验证前触发回调事件
        var _result = validator._bridge(this, "__fixture_callback", this.onBefore, data) && validator._bridge(this, "__fixture_callback", this.__parent._options.onBefore, data) && validator._bridge(this, "__fixture_callback", validator._hook.onBefore, data);
        if (_result !== false) {
            var _rule = this.rule, _params = [], _neg = false;
            _result = false;
            if (typeof _rule == "string") {
                var _pattern = _rule.match(/^(\!)?(\w+)?(?:\((.*)?\)$)?/);
                if ($.isArray(_pattern)) {
                    _neg = _pattern[1] ? true : false;
                    _rule = _pattern[2];
                    _params = _pattern[3] ? _pattern[3].split(",") : [];
                    if (_rule in this.__parent._validatorRule) {
                        _rule = this.__parent._validatorRule[_rule];
                    } else {
                        $.error("获取验证方法失败！");
                    }
                } else {
                    $.error("解析验证规则失败！");
                }
            }
            _params.unshift(data);
            if ($.isFunction(_rule)) {
                _result = _rule.apply(this, _params);
                _neg && (_result = !_result);
            }
        } else {
            _result = false;
        }
        //验证后触发回调事件
        validator._bridge(this, "__fixture_callback", this.onAfter, _result, data) && validator._bridge(this, "__fixture_callback", this.__parent._options.onAfter, _result, data) && validator._bridge(this, "__fixture_callback", validator._hook.onAfter, _result, data);
        return _result;
    };
    //禁用
    validator._fixture_disabled = function() {
        this._disabled = true;
        return this;
    };
    //启用
    validator._fixture_enable = function() {
        this._disabled = false;
        return this;
    };
    //获取值
    validator._fixture_get = function(name) {
        if (typeof name == "string" && name.indexOf("_") < 0) {
            name = "_" + name;
            if (name in this) {
                return this[name];
            }
        }
    };
    //设置值
    validator._fixture_set = function(name, value) {
        if (typeof name == "string" && name.indexOf("_") < 0) {
            this["_" + name] = value;
        }
        return this;
    };
    //执行回调函数
    validator.__fixture_callback = function(callback, params) {
        if ($.isFunction(callback)) {
            if (callback.apply(this, Array.prototype.slice.call(arguments, 1)) === false) {
                return false;
            }
        }
        return true;
    };
    //记录是否实例化过
    validator._instantiation = false;
    //默认配置
    validator._config = {
        //验证地图
        map: null,
        //禁用的验证信息
        disabled: null,
        //验证前
        onBefore: null,
        //验证后
        onAfter: null,
        //验证规则
        rules: null
    };
    //钩子事件
    validator._hook = {
        //验证前
        onBefore: null,
        //验证后
        onAfter: null,
        //实例化后
        onCreate: null
    };
    //常用验证方法
    validator._rules = {
        //是否数字
        numeric: function(data) {
            return $.isNumeric(data);
        },
        //验证不为空
        require: function(data) {
            return /[^\s]+/.test(data);
        },
        //验证为空
        empty: function(data) {
            return /^[\s]+$/.test(data);
        },
        //验证手机号
        mobile: function(data) {
            return /^(((13[0-9]{1})|(15[0-9]{1}))+d{8})$/.test(data);
        },
        //验证电话号码
        tel: function(data) {
            return /^\d{3,4}-?\d{7,9}$/.test(data);
        },
        //邮政编码
        zipCode: function(data) {
            return /^[0-9]{6}$/.test(data);
        },
        //验证中文
        cn: function(data) {
            return /^[\u4e00-\u9fa5]+$/.test(data);
        },
        //验证邮箱
        email: function(data) {
            return /[\w!#$%&'*+\/=?^_`{|}~-]+(?:\.[\w!#$%&'*+\/=?^_`{|}~-]+)*@(?:[\w](?:[\w-]*[\w])?\.)+[\w](?:[\w-]*[\w])?/.test(data);
        },
        //网址url
        url: function(data) {
            return /[a-zA-z]+:\/\/[^\s]*/.test(data);
        },
        //QQ号
        qq: function(data) {
            return /[1-9][0-9]{4,}/.test(data);
        },
        //身份证
        identity: function(data) {
            return /^(\d{6})(\d{4})(\d{2})(\d{2})(\d{3})([0-9]|X)$/.test(data);
        },
        //ip地址
        ip: function(data) {
            return /\d+\.\d+\.\d+\.\d+/.test(data);
        },
        //年-月-日
        date: function(data) {
            return /([0-9]{3}[1-9]|[0-9]{2}[1-9][0-9]{1}|[0-9]{1}[1-9][0-9]{2}|[1-9][0-9]{3})-(((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))|((0[469]|11)-(0[1-9]|[12][0-9]|30))|(02-(0[1-9]|[1][0-9]|2[0-8])))/.test(data);
        },
        //正整数
        positive: function(data) {
            return /^[1-9]\d*$/.test(data);
        },
        //负整数
        negative: function(data) {
            return /^-[1-9]\d*$/.test(data);
        },
        //正浮点数
        pfloat: function(data) {
            return /^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$/.test(data);
        },
        //负浮点数
        nfloat: function(data) {
            return /^-[1-9]\d*\.\d*|-0\.\d*[1-9]\d*$/.test(data);
        },
        //验证字符串或数组长度
        length: function(data, start, end) {
            var _length = data.length;
            if (start == "null") {
                start = 0;
            }
            if (end == "null") {
                end = _length;
            }
            if (end) {
                return start <= _length && _length <= end;
            } else {
                return _length == start;
            }
        },
        //判断数值是否相等
        equal: function(data, value) {
            return data == value;
        },
        //验证是否在某个范围内
        "in": function(data, range) {
            data = $.isArray(data) ? data : [ data ];
            range = Array.prototype.slice.call(arguments, 1);
            for (var i = 0; i < range.length; i++) {
                for (var j = 0; j < data.length; j++) {
                    if (range[i] == data[j]) {
                        return true;
                    }
                }
            }
            return false;
        },
        //验证最大值
        max: function(data, max) {
            return Number(data) <= Number(max);
        },
        //验证最小值
        min: function(data, min) {
            return Number(data) >= Number(min);
        },
        //匹配两个字段值是否相等
        field: function(data, field) {
            return data == (this.__parent._validatorData[field] || "");
        }
    };
    //在jquery对象上绑定一个快速验证实例
    $.validator = function(options) {
        return new validator(options);
    };
    //暴露构造函数
    $.validator.constructor = validator;
    //设置配置项
    $.validator.setConfig = function(options) {
        $.extend(validator._config, options);
    };
    //获取配置项
    $.validator.getConfig = function(name) {
        if (typeof name == "string") {
            return validator._config[name];
        }
    };
    //设置钩子
    $.validator.setHook = function(options) {
        $.extend(validator._config, options);
    };
    //获取钩子
    $.validator.getHook = function(name) {
        if (typeof name == "string") {
            return validator._config[name];
        }
    };
});
(function(factory) {
    "use strict";
    if (typeof define === "function" && (define.cmd || define.cmd)) {
        // using AMD; register as anon module
        define("component/jquery.drop", [ "jquery" ], factory);
    } else {
        // no AMD; invoke directly
        factory(typeof jQuery != "undefined" ? jQuery : window.Zepto);
    }
})(function() {
    drop.list = [];
    function drop(options) {
        var self = this;
        var entertimer = null;
        var leavetimer = null;
        this.options = $.extend({}, drop.options, options);
        this.element = this.options.element;
        this.handler = this.element.find(".drop-show");
        this.content = this.element.find(".drop-hide");
        if (this.options.eventType == "toggle") {
            this.handler.click(function() {
                self._isOpen ? self.close() : self.open();
            });
            this.element.click(function(event) {
                event.stopPropagation();
            });
            $("body").bind("click", function() {
                self.close();
            }).delegate(":text,textarea", "focus", function() {
                self.close();
            });
        } else {
            this.handler.add(this.content).mouseenter(function() {
                clearTimeout(leavetimer);
                entertimer = setTimeout(function() {
                    self.open();
                }, 300);
            });
            this.handler.add(this.content).mouseleave(function() {
                clearTimeout(entertimer);
                leavetimer = setTimeout(function() {
                    self.close();
                }, 300);
            });
        }
        drop.list.push(this);
    }
    drop.prototype.open = function() {
        if (!this._isOpen) {
            this.element.addClass("drop-active");
            this._isOpen = true;
            for (var i = 0; i < drop.list.length; i++) {
                drop.list[i] !== this && drop.list[i].close();
            }
            $.isFunction(this.options.onOpen) && this.options.onOpen.call(this);
        }
    };
    drop.prototype.close = function() {
        if (this._isOpen) {
            this.element.removeClass("drop-active");
            this._isOpen = false;
            $.isFunction(this.options.onClose) && this.options.onClose.call(this);
        }
    };
    drop.prototype.setConfig = function(options) {
        $.extend(this.options, options);
        return this;
    };
    drop.options = {
        element: null,
        eventType: "toggle",
        onOpen: null,
        onClose: null
    };
    $.fn.drop = function(options) {
        return this.each(function() {
            var _drop = $(this).data("THINKDROP");
            if (!_drop) {
                $(this).data("THINKDROP", new drop({
                    element: $(this),
                    eventType: $(this).hasClass("drop-hover") ? "hover" : "toggle"
                }));
            } else {
                _drop.setConfig(options);
            }
        });
    };
    $(function() {
        $(".w-drop").drop();
    });
});
/*!
 * jQuery Form Plugin
 * version: 3.51.0-2014.06.20
 * Requires jQuery v1.5 or later
 * Copyright (c) 2014 M. Alsup
 * Examples and documentation at: http://malsup.com/jquery/form/
 * Project repository: https://github.com/malsup/form
 * Dual licensed under the MIT and GPL licenses.
 * https://github.com/malsup/form#copyright-and-license
 */
/*global ActiveXObject */
// AMD support
(function(factory) {
    "use strict";
    if (typeof define === "function" && (define.cmd || define.cmd)) {
        // using AMD; register as anon module
        define("component/jquery.form", [ "jquery" ], factory);
    } else {
        // no AMD; invoke directly
        factory(typeof jQuery != "undefined" ? jQuery : window.Zepto);
    }
})(function() {
    /*
    Usage Note:
    -----------
    Do not use both ajaxSubmit and ajaxForm on the same form.  These
    functions are mutually exclusive.  Use ajaxSubmit if you want
    to bind your own submit handler to the form.  For example,

    $(document).ready(function() {
        $('#myForm').on('submit', function(e) {
            e.preventDefault(); // <-- important
            $(this).ajaxSubmit({
                target: '#output'
            });
        });
    });

    Use ajaxForm when you want the plugin to manage all the event binding
    for you.  For example,

    $(document).ready(function() {
        $('#myForm').ajaxForm({
            target: '#output'
        });
    });

    You can also use ajaxForm with delegation (requires jQuery v1.7+), so the
    form does not have to exist when you invoke ajaxForm:

    $('#myForm').ajaxForm({
        delegation: true,
        target: '#output'
    });

    When using ajaxForm, the ajaxSubmit function will be invoked for you
    at the appropriate time.
*/
    /**
 * Feature detection
 */
    var feature = {};
    feature.fileapi = $("<input type='file'/>").get(0).files !== undefined;
    feature.formdata = window.FormData !== undefined;
    var hasProp = !!$.fn.prop;
    // attr2 uses prop when it can but checks the return type for
    // an expected string.  this accounts for the case where a form
    // contains inputs with names like "action" or "method"; in those
    // cases "prop" returns the element
    $.fn.attr2 = function() {
        if (!hasProp) {
            return this.attr.apply(this, arguments);
        }
        var val = this.prop.apply(this, arguments);
        if (val && val.jquery || typeof val === "string") {
            return val;
        }
        return this.attr.apply(this, arguments);
    };
    /**
 * ajaxSubmit() provides a mechanism for immediately submitting
 * an HTML form using AJAX.
 */
    $.fn.ajaxSubmit = function(options) {
        /*jshint scripturl:true */
        // fast fail if nothing selected (http://dev.jquery.com/ticket/2752)
        if (!this.length) {
            log("ajaxSubmit: skipping submit process - no element selected");
            return this;
        }
        var method, action, url, $form = this;
        if (typeof options == "function") {
            options = {
                success: options
            };
        } else if (options === undefined) {
            options = {};
        }
        method = options.type || this.attr2("method");
        action = options.url || this.attr2("action");
        url = typeof action === "string" ? $.trim(action) : "";
        url = url || window.location.href || "";
        if (url) {
            // clean url (don't include hash vaue)
            url = (url.match(/^([^#]+)/) || [])[1];
        }
        options = $.extend(true, {
            url: url,
            success: $.ajaxSettings.success,
            type: method || $.ajaxSettings.type,
            iframeSrc: /^https/i.test(window.location.href || "") ? "javascript:false" : "about:blank"
        }, options);
        // hook for manipulating the form data before it is extracted;
        // convenient for use with rich editors like tinyMCE or FCKEditor
        var veto = {};
        this.trigger("form-pre-serialize", [ this, options, veto ]);
        if (veto.veto) {
            log("ajaxSubmit: submit vetoed via form-pre-serialize trigger");
            return this;
        }
        // provide opportunity to alter form data before it is serialized
        if (options.beforeSerialize && options.beforeSerialize(this, options) === false) {
            log("ajaxSubmit: submit aborted via beforeSerialize callback");
            return this;
        }
        var traditional = options.traditional;
        if (traditional === undefined) {
            traditional = $.ajaxSettings.traditional;
        }
        var elements = [];
        var qx, a = this.formToArray(options.semantic, elements);
        if (options.data) {
            options.extraData = options.data;
            qx = $.param(options.data, traditional);
        }
        // give pre-submit callback an opportunity to abort the submit
        if (options.beforeSubmit && options.beforeSubmit(a, this, options) === false) {
            log("ajaxSubmit: submit aborted via beforeSubmit callback");
            return this;
        }
        // fire vetoable 'validate' event
        this.trigger("form-submit-validate", [ a, this, options, veto ]);
        if (veto.veto) {
            log("ajaxSubmit: submit vetoed via form-submit-validate trigger");
            return this;
        }
        var q = $.param(a, traditional);
        if (qx) {
            q = q ? q + "&" + qx : qx;
        }
        if (options.type.toUpperCase() == "GET") {
            options.url += (options.url.indexOf("?") >= 0 ? "&" : "?") + q;
            options.data = null;
        } else {
            options.data = q;
        }
        var callbacks = [];
        if (options.resetForm) {
            callbacks.push(function() {
                $form.resetForm();
            });
        }
        if (options.clearForm) {
            callbacks.push(function() {
                $form.clearForm(options.includeHidden);
            });
        }
        // perform a load on the target only if dataType is not provided
        if (!options.dataType && options.target) {
            var oldSuccess = options.success || function() {};
            callbacks.push(function(data) {
                var fn = options.replaceTarget ? "replaceWith" : "html";
                $(options.target)[fn](data).each(oldSuccess, arguments);
            });
        } else if (options.success) {
            callbacks.push(options.success);
        }
        options.success = function(data, status, xhr) {
            // jQuery 1.4+ passes xhr as 3rd arg
            var context = options.context || this;
            // jQuery 1.4+ supports scope context
            for (var i = 0, max = callbacks.length; i < max; i++) {
                callbacks[i].apply(context, [ data, status, xhr || $form, $form ]);
            }
        };
        if (options.error) {
            var oldError = options.error;
            options.error = function(xhr, status, error) {
                var context = options.context || this;
                oldError.apply(context, [ xhr, status, error, $form ]);
            };
        }
        if (options.complete) {
            var oldComplete = options.complete;
            options.complete = function(xhr, status) {
                var context = options.context || this;
                oldComplete.apply(context, [ xhr, status, $form ]);
            };
        }
        // are there files to upload?
        // [value] (issue #113), also see comment:
        // https://github.com/malsup/form/commit/588306aedba1de01388032d5f42a60159eea9228#commitcomment-2180219
        var fileInputs = $("input[type=file]:enabled", this).filter(function() {
            return $(this).val() !== "";
        });
        var hasFileInputs = fileInputs.length > 0;
        var mp = "multipart/form-data";
        var multipart = $form.attr("enctype") == mp || $form.attr("encoding") == mp;
        var fileAPI = feature.fileapi && feature.formdata;
        log("fileAPI :" + fileAPI);
        var shouldUseFrame = (hasFileInputs || multipart) && !fileAPI;
        var jqxhr;
        // options.iframe allows user to force iframe mode
        // 06-NOV-09: now defaulting to iframe mode if file input is detected
        if (options.iframe !== false && (options.iframe || shouldUseFrame)) {
            // hack to fix Safari hang (thanks to Tim Molendijk for this)
            // see:  http://groups.google.com/group/jquery-dev/browse_thread/thread/36395b7ab510dd5d
            if (options.closeKeepAlive) {
                $.get(options.closeKeepAlive, function() {
                    jqxhr = fileUploadIframe(a);
                });
            } else {
                jqxhr = fileUploadIframe(a);
            }
        } else if ((hasFileInputs || multipart) && fileAPI) {
            jqxhr = fileUploadXhr(a);
        } else {
            jqxhr = $.ajax(options);
        }
        $form.removeData("jqxhr").data("jqxhr", jqxhr);
        // clear element array
        for (var k = 0; k < elements.length; k++) {
            elements[k] = null;
        }
        // fire 'notify' event
        this.trigger("form-submit-notify", [ this, options ]);
        return this;
        // utility fn for deep serialization
        function deepSerialize(extraData) {
            var serialized = $.param(extraData, options.traditional).split("&");
            var len = serialized.length;
            var result = [];
            var i, part;
            for (i = 0; i < len; i++) {
                // #252; undo param space replacement
                serialized[i] = serialized[i].replace(/\+/g, " ");
                part = serialized[i].split("=");
                // #278; use array instead of object storage, favoring array serializations
                result.push([ decodeURIComponent(part[0]), decodeURIComponent(part[1]) ]);
            }
            return result;
        }
        // XMLHttpRequest Level 2 file uploads (big hat tip to francois2metz)
        function fileUploadXhr(a) {
            var formdata = new FormData();
            for (var i = 0; i < a.length; i++) {
                formdata.append(a[i].name, a[i].value);
            }
            if (options.extraData) {
                var serializedData = deepSerialize(options.extraData);
                for (i = 0; i < serializedData.length; i++) {
                    if (serializedData[i]) {
                        formdata.append(serializedData[i][0], serializedData[i][1]);
                    }
                }
            }
            options.data = null;
            var s = $.extend(true, {}, $.ajaxSettings, options, {
                contentType: false,
                processData: false,
                cache: false,
                type: method || "POST"
            });
            if (options.uploadProgress) {
                // workaround because jqXHR does not expose upload property
                s.xhr = function() {
                    var xhr = $.ajaxSettings.xhr();
                    if (xhr.upload) {
                        xhr.upload.addEventListener("progress", function(event) {
                            var percent = 0;
                            var position = event.loaded || event.position;
                            /*event.position is deprecated*/
                            var total = event.total;
                            if (event.lengthComputable) {
                                percent = Math.ceil(position / total * 100);
                            }
                            options.uploadProgress(event, position, total, percent);
                        }, false);
                    }
                    return xhr;
                };
            }
            s.data = null;
            var beforeSend = s.beforeSend;
            s.beforeSend = function(xhr, o) {
                //Send FormData() provided by user
                if (options.formData) {
                    o.data = options.formData;
                } else {
                    o.data = formdata;
                }
                if (beforeSend) {
                    beforeSend.call(this, xhr, o);
                }
            };
            return $.ajax(s);
        }
        // private function for handling file uploads (hat tip to YAHOO!)
        function fileUploadIframe(a) {
            var form = $form[0], el, i, s, g, id, $io, io, xhr, sub, n, timedOut, timeoutHandle;
            var deferred = $.Deferred();
            // #341
            deferred.abort = function(status) {
                xhr.abort(status);
            };
            if (a) {
                // ensure that every serialized input is still enabled
                for (i = 0; i < elements.length; i++) {
                    el = $(elements[i]);
                    if (hasProp) {
                        el.prop("disabled", false);
                    } else {
                        el.removeAttr("disabled");
                    }
                }
            }
            s = $.extend(true, {}, $.ajaxSettings, options);
            s.context = s.context || s;
            id = "jqFormIO" + new Date().getTime();
            if (s.iframeTarget) {
                $io = $(s.iframeTarget);
                n = $io.attr2("name");
                if (!n) {
                    $io.attr2("name", id);
                } else {
                    id = n;
                }
            } else {
                $io = $('<iframe name="' + id + '" src="' + s.iframeSrc + '" />');
                $io.css({
                    position: "absolute",
                    top: "-1000px",
                    left: "-1000px"
                });
            }
            io = $io[0];
            xhr = {
                // mock object
                aborted: 0,
                responseText: null,
                responseXML: null,
                status: 0,
                statusText: "n/a",
                getAllResponseHeaders: function() {},
                getResponseHeader: function() {},
                setRequestHeader: function() {},
                abort: function(status) {
                    var e = status === "timeout" ? "timeout" : "aborted";
                    log("aborting upload... " + e);
                    this.aborted = 1;
                    try {
                        // #214, #257
                        if (io.contentWindow.document.execCommand) {
                            io.contentWindow.document.execCommand("Stop");
                        }
                    } catch (ignore) {}
                    $io.attr("src", s.iframeSrc);
                    // abort op in progress
                    xhr.error = e;
                    if (s.error) {
                        s.error.call(s.context, xhr, e, status);
                    }
                    if (g) {
                        $.event.trigger("ajaxError", [ xhr, s, e ]);
                    }
                    if (s.complete) {
                        s.complete.call(s.context, xhr, e);
                    }
                }
            };
            g = s.global;
            // trigger ajax global events so that activity/block indicators work like normal
            if (g && 0 === $.active++) {
                $.event.trigger("ajaxStart");
            }
            if (g) {
                $.event.trigger("ajaxSend", [ xhr, s ]);
            }
            if (s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false) {
                if (s.global) {
                    $.active--;
                }
                deferred.reject();
                return deferred;
            }
            if (xhr.aborted) {
                deferred.reject();
                return deferred;
            }
            // add submitting element to data if we know it
            sub = form.clk;
            if (sub) {
                n = sub.name;
                if (n && !sub.disabled) {
                    s.extraData = s.extraData || {};
                    s.extraData[n] = sub.value;
                    if (sub.type == "image") {
                        s.extraData[n + ".x"] = form.clk_x;
                        s.extraData[n + ".y"] = form.clk_y;
                    }
                }
            }
            var CLIENT_TIMEOUT_ABORT = 1;
            var SERVER_ABORT = 2;
            function getDoc(frame) {
                /* it looks like contentWindow or contentDocument do not
             * carry the protocol property in ie8, when running under ssl
             * frame.document is the only valid response document, since
             * the protocol is know but not on the other two objects. strange?
             * "Same origin policy" http://en.wikipedia.org/wiki/Same_origin_policy
             */
                var doc = null;
                // IE8 cascading access check
                try {
                    if (frame.contentWindow) {
                        doc = frame.contentWindow.document;
                    }
                } catch (err) {
                    // IE8 access denied under ssl & missing protocol
                    log("cannot get iframe.contentWindow document: " + err);
                }
                if (doc) {
                    // successful getting content
                    return doc;
                }
                try {
                    // simply checking may throw in ie8 under ssl or mismatched protocol
                    doc = frame.contentDocument ? frame.contentDocument : frame.document;
                } catch (err) {
                    // last attempt
                    log("cannot get iframe.contentDocument: " + err);
                    doc = frame.document;
                }
                return doc;
            }
            // Rails CSRF hack (thanks to Yvan Barthelemy)
            var csrf_token = $("meta[name=csrf-token]").attr("content");
            var csrf_param = $("meta[name=csrf-param]").attr("content");
            if (csrf_param && csrf_token) {
                s.extraData = s.extraData || {};
                s.extraData[csrf_param] = csrf_token;
            }
            // take a breath so that pending repaints get some cpu time before the upload starts
            function doSubmit() {
                // make sure form attrs are set
                var t = $form.attr2("target"), a = $form.attr2("action"), mp = "multipart/form-data", et = $form.attr("enctype") || $form.attr("encoding") || mp;
                // update form attrs in IE friendly way
                form.setAttribute("target", id);
                if (!method || /post/i.test(method)) {
                    form.setAttribute("method", "POST");
                }
                if (a != s.url) {
                    form.setAttribute("action", s.url);
                }
                // ie borks in some cases when setting encoding
                if (!s.skipEncodingOverride && (!method || /post/i.test(method))) {
                    $form.attr({
                        encoding: "multipart/form-data",
                        enctype: "multipart/form-data"
                    });
                }
                // support timout
                if (s.timeout) {
                    timeoutHandle = setTimeout(function() {
                        timedOut = true;
                        cb(CLIENT_TIMEOUT_ABORT);
                    }, s.timeout);
                }
                // look for server aborts
                function checkState() {
                    try {
                        var state = getDoc(io).readyState;
                        log("state = " + state);
                        if (state && state.toLowerCase() == "uninitialized") {
                            setTimeout(checkState, 50);
                        }
                    } catch (e) {
                        log("Server abort: ", e, " (", e.name, ")");
                        cb(SERVER_ABORT);
                        if (timeoutHandle) {
                            clearTimeout(timeoutHandle);
                        }
                        timeoutHandle = undefined;
                    }
                }
                // add "extra" data to form if provided in options
                var extraInputs = [];
                try {
                    if (s.extraData) {
                        for (var n in s.extraData) {
                            if (s.extraData.hasOwnProperty(n)) {
                                // if using the $.param format that allows for multiple values with the same name
                                if ($.isPlainObject(s.extraData[n]) && s.extraData[n].hasOwnProperty("name") && s.extraData[n].hasOwnProperty("value")) {
                                    extraInputs.push($('<input type="hidden" name="' + s.extraData[n].name + '">').val(s.extraData[n].value).appendTo(form)[0]);
                                } else {
                                    extraInputs.push($('<input type="hidden" name="' + n + '">').val(s.extraData[n]).appendTo(form)[0]);
                                }
                            }
                        }
                    }
                    if (!s.iframeTarget) {
                        // add iframe to doc and submit the form
                        $io.appendTo("body");
                    }
                    if (io.attachEvent) {
                        io.attachEvent("onload", cb);
                    } else {
                        io.addEventListener("load", cb, false);
                    }
                    setTimeout(checkState, 15);
                    try {
                        form.submit();
                    } catch (err) {
                        // just in case form has element with name/id of 'submit'
                        var submitFn = document.createElement("form").submit;
                        submitFn.apply(form);
                    }
                } finally {
                    // reset attrs and remove "extra" input elements
                    form.setAttribute("action", a);
                    form.setAttribute("enctype", et);
                    // #380
                    if (t) {
                        form.setAttribute("target", t);
                    } else {
                        $form.removeAttr("target");
                    }
                    $(extraInputs).remove();
                }
            }
            if (s.forceSync) {
                doSubmit();
            } else {
                setTimeout(doSubmit, 10);
            }
            var data, doc, domCheckCount = 50, callbackProcessed;
            function cb(e) {
                if (xhr.aborted || callbackProcessed) {
                    return;
                }
                doc = getDoc(io);
                if (!doc) {
                    log("cannot access response document");
                    e = SERVER_ABORT;
                }
                if (e === CLIENT_TIMEOUT_ABORT && xhr) {
                    xhr.abort("timeout");
                    deferred.reject(xhr, "timeout");
                    return;
                } else if (e == SERVER_ABORT && xhr) {
                    xhr.abort("server abort");
                    deferred.reject(xhr, "error", "server abort");
                    return;
                }
                if (!doc || doc.location.href == s.iframeSrc) {
                    // response not received yet
                    if (!timedOut) {
                        return;
                    }
                }
                if (io.detachEvent) {
                    io.detachEvent("onload", cb);
                } else {
                    io.removeEventListener("load", cb, false);
                }
                var status = "success", errMsg;
                try {
                    if (timedOut) {
                        throw "timeout";
                    }
                    var isXml = s.dataType == "xml" || doc.XMLDocument || $.isXMLDoc(doc);
                    log("isXml=" + isXml);
                    if (!isXml && window.opera && (doc.body === null || !doc.body.innerHTML)) {
                        if (--domCheckCount) {
                            // in some browsers (Opera) the iframe DOM is not always traversable when
                            // the onload callback fires, so we loop a bit to accommodate
                            log("requeing onLoad callback, DOM not available");
                            setTimeout(cb, 250);
                            return;
                        }
                    }
                    //log('response detected');
                    var docRoot = doc.body ? doc.body : doc.documentElement;
                    xhr.responseText = docRoot ? docRoot.innerHTML : null;
                    xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc;
                    if (isXml) {
                        s.dataType = "xml";
                    }
                    xhr.getResponseHeader = function(header) {
                        var headers = {
                            "content-type": s.dataType
                        };
                        return headers[header.toLowerCase()];
                    };
                    // support for XHR 'status' & 'statusText' emulation :
                    if (docRoot) {
                        xhr.status = Number(docRoot.getAttribute("status")) || xhr.status;
                        xhr.statusText = docRoot.getAttribute("statusText") || xhr.statusText;
                    }
                    var dt = (s.dataType || "").toLowerCase();
                    var scr = /(json|script|text)/.test(dt);
                    if (scr || s.textarea) {
                        // see if user embedded response in textarea
                        var ta = doc.getElementsByTagName("textarea")[0];
                        if (ta) {
                            xhr.responseText = ta.value;
                            // support for XHR 'status' & 'statusText' emulation :
                            xhr.status = Number(ta.getAttribute("status")) || xhr.status;
                            xhr.statusText = ta.getAttribute("statusText") || xhr.statusText;
                        } else if (scr) {
                            // account for browsers injecting pre around json response
                            var pre = doc.getElementsByTagName("pre")[0];
                            var b = doc.getElementsByTagName("body")[0];
                            if (pre) {
                                xhr.responseText = pre.textContent ? pre.textContent : pre.innerText;
                            } else if (b) {
                                xhr.responseText = b.textContent ? b.textContent : b.innerText;
                            }
                        }
                    } else if (dt == "xml" && !xhr.responseXML && xhr.responseText) {
                        xhr.responseXML = toXml(xhr.responseText);
                    }
                    try {
                        data = httpData(xhr, dt, s);
                    } catch (err) {
                        status = "parsererror";
                        xhr.error = errMsg = err || status;
                    }
                } catch (err) {
                    log("error caught: ", err);
                    status = "error";
                    xhr.error = errMsg = err || status;
                }
                if (xhr.aborted) {
                    log("upload aborted");
                    status = null;
                }
                if (xhr.status) {
                    // we've set xhr.status
                    status = xhr.status >= 200 && xhr.status < 300 || xhr.status === 304 ? "success" : "error";
                }
                // ordering of these callbacks/triggers is odd, but that's how $.ajax does it
                if (status === "success") {
                    if (s.success) {
                        s.success.call(s.context, data, "success", xhr);
                    }
                    deferred.resolve(xhr.responseText, "success", xhr);
                    if (g) {
                        $.event.trigger("ajaxSuccess", [ xhr, s ]);
                    }
                } else if (status) {
                    if (errMsg === undefined) {
                        errMsg = xhr.statusText;
                    }
                    if (s.error) {
                        s.error.call(s.context, xhr, status, errMsg);
                    }
                    deferred.reject(xhr, "error", errMsg);
                    if (g) {
                        $.event.trigger("ajaxError", [ xhr, s, errMsg ]);
                    }
                }
                if (g) {
                    $.event.trigger("ajaxComplete", [ xhr, s ]);
                }
                if (g && !--$.active) {
                    $.event.trigger("ajaxStop");
                }
                if (s.complete) {
                    s.complete.call(s.context, xhr, status);
                }
                callbackProcessed = true;
                if (s.timeout) {
                    clearTimeout(timeoutHandle);
                }
                // clean up
                setTimeout(function() {
                    if (!s.iframeTarget) {
                        $io.remove();
                    } else {
                        //adding else to clean up existing iframe response.
                        $io.attr("src", s.iframeSrc);
                    }
                    xhr.responseXML = null;
                }, 100);
            }
            var toXml = $.parseXML || function(s, doc) {
                // use parseXML if available (jQuery 1.5+)
                if (window.ActiveXObject) {
                    doc = new ActiveXObject("Microsoft.XMLDOM");
                    doc.async = "false";
                    doc.loadXML(s);
                } else {
                    doc = new DOMParser().parseFromString(s, "text/xml");
                }
                return doc && doc.documentElement && doc.documentElement.nodeName != "parsererror" ? doc : null;
            };
            var parseJSON = $.parseJSON || function(s) {
                /*jslint evil:true */
                return window["eval"]("(" + s + ")");
            };
            var httpData = function(xhr, type, s) {
                // mostly lifted from jq1.4.4
                var ct = xhr.getResponseHeader("content-type") || "", xml = type === "xml" || !type && ct.indexOf("xml") >= 0, data = xml ? xhr.responseXML : xhr.responseText;
                if (xml && data.documentElement.nodeName === "parsererror") {
                    if ($.error) {
                        $.error("parsererror");
                    }
                }
                if (s && s.dataFilter) {
                    data = s.dataFilter(data, type);
                }
                if (typeof data === "string") {
                    if (type === "json" || !type && ct.indexOf("json") >= 0) {
                        data = parseJSON(data);
                    } else if (type === "script" || !type && ct.indexOf("javascript") >= 0) {
                        $.globalEval(data);
                    }
                }
                return data;
            };
            return deferred;
        }
    };
    /**
 * ajaxForm() provides a mechanism for fully automating form submission.
 *
 * The advantages of using this method instead of ajaxSubmit() are:
 *
 * 1: This method will include coordinates for <input type="image" /> elements (if the element
 *    is used to submit the form).
 * 2. This method will include the submit element's name/value data (for the element that was
 *    used to submit the form).
 * 3. This method binds the submit() method to the form for you.
 *
 * The options argument for ajaxForm works exactly as it does for ajaxSubmit.  ajaxForm merely
 * passes the options argument along after properly binding events for submit elements and
 * the form itself.
 */
    $.fn.ajaxForm = function(options) {
        options = options || {};
        options.delegation = options.delegation && $.isFunction($.fn.on);
        // in jQuery 1.3+ we can fix mistakes with the ready state
        if (!options.delegation && this.length === 0) {
            var o = {
                s: this.selector,
                c: this.context
            };
            if (!$.isReady && o.s) {
                log("DOM not ready, queuing ajaxForm");
                $(function() {
                    $(o.s, o.c).ajaxForm(options);
                });
                return this;
            }
            // is your DOM ready?  http://docs.jquery.com/Tutorials:Introducing_$(document).ready()
            log("terminating; zero elements found by selector" + ($.isReady ? "" : " (DOM not ready)"));
            return this;
        }
        if (options.delegation) {
            $(document).off("submit.form-plugin", this.selector, doAjaxSubmit).off("click.form-plugin", this.selector, captureSubmittingElement).on("submit.form-plugin", this.selector, options, doAjaxSubmit).on("click.form-plugin", this.selector, options, captureSubmittingElement);
            return this;
        }
        return this.ajaxFormUnbind().bind("submit.form-plugin", options, doAjaxSubmit).bind("click.form-plugin", options, captureSubmittingElement);
    };
    // private event handlers
    function doAjaxSubmit(e) {
        /*jshint validthis:true */
        var options = e.data;
        if (!e.isDefaultPrevented()) {
            // if event has been canceled, don't proceed
            e.preventDefault();
            $(e.target).ajaxSubmit(options);
        }
    }
    function captureSubmittingElement(e) {
        /*jshint validthis:true */
        var target = e.target;
        var $el = $(target);
        if (!$el.is("[type=submit],[type=image]")) {
            // is this a child element of the submit el?  (ex: a span within a button)
            var t = $el.closest("[type=submit]");
            if (t.length === 0) {
                return;
            }
            target = t[0];
        }
        var form = this;
        form.clk = target;
        if (target.type == "image") {
            if (e.offsetX !== undefined) {
                form.clk_x = e.offsetX;
                form.clk_y = e.offsetY;
            } else if (typeof $.fn.offset == "function") {
                var offset = $el.offset();
                form.clk_x = e.pageX - offset.left;
                form.clk_y = e.pageY - offset.top;
            } else {
                form.clk_x = e.pageX - target.offsetLeft;
                form.clk_y = e.pageY - target.offsetTop;
            }
        }
        // clear form vars
        setTimeout(function() {
            form.clk = form.clk_x = form.clk_y = null;
        }, 100);
    }
    // ajaxFormUnbind unbinds the event handlers that were bound by ajaxForm
    $.fn.ajaxFormUnbind = function() {
        return this.unbind("submit.form-plugin click.form-plugin");
    };
    /**
 * formToArray() gathers form element data into an array of objects that can
 * be passed to any of the following ajax functions: $.get, $.post, or load.
 * Each object in the array has both a 'name' and 'value' property.  An example of
 * an array for a simple login form might be:
 *
 * [ { name: 'username', value: 'jresig' }, { name: 'password', value: 'secret' } ]
 *
 * It is this array that is passed to pre-submit callback functions provided to the
 * ajaxSubmit() and ajaxForm() methods.
 */
    $.fn.formToArray = function(semantic, elements) {
        var a = [];
        if (this.length === 0) {
            return a;
        }
        var form = this[0];
        var formId = this.attr("id");
        var els = semantic ? form.getElementsByTagName("*") : form.elements;
        var els2;
        if (els && !/MSIE [678]/.test(navigator.userAgent)) {
            // #390
            els = $(els).get();
        }
        // #386; account for inputs outside the form which use the 'form' attribute
        if (formId) {
            els2 = $(':input[form="' + formId + '"]').get();
            // hat tip @thet
            if (els2.length) {
                els = (els || []).concat(els2);
            }
        }
        if (!els || !els.length) {
            return a;
        }
        var i, j, n, v, el, max, jmax;
        for (i = 0, max = els.length; i < max; i++) {
            el = els[i];
            n = el.name;
            if (!n || el.disabled) {
                continue;
            }
            if (semantic && form.clk && el.type == "image") {
                // handle image inputs on the fly when semantic == true
                if (form.clk == el) {
                    a.push({
                        name: n,
                        value: $(el).val(),
                        type: el.type
                    });
                    a.push({
                        name: n + ".x",
                        value: form.clk_x
                    }, {
                        name: n + ".y",
                        value: form.clk_y
                    });
                }
                continue;
            }
            v = $.fieldValue(el, true);
            if (v && v.constructor == Array) {
                if (elements) {
                    elements.push(el);
                }
                for (j = 0, jmax = v.length; j < jmax; j++) {
                    a.push({
                        name: n,
                        value: v[j]
                    });
                }
            } else if (feature.fileapi && el.type == "file") {
                if (elements) {
                    elements.push(el);
                }
                var files = el.files;
                if (files.length) {
                    for (j = 0; j < files.length; j++) {
                        a.push({
                            name: n,
                            value: files[j],
                            type: el.type
                        });
                    }
                } else {
                    // #180
                    a.push({
                        name: n,
                        value: "",
                        type: el.type
                    });
                }
            } else if (v !== null && typeof v != "undefined") {
                if (elements) {
                    elements.push(el);
                }
                a.push({
                    name: n,
                    value: v,
                    type: el.type,
                    required: el.required
                });
            }
        }
        if (!semantic && form.clk) {
            // input type=='image' are not found in elements array! handle it here
            var $input = $(form.clk), input = $input[0];
            n = input.name;
            if (n && !input.disabled && input.type == "image") {
                a.push({
                    name: n,
                    value: $input.val()
                });
                a.push({
                    name: n + ".x",
                    value: form.clk_x
                }, {
                    name: n + ".y",
                    value: form.clk_y
                });
            }
        }
        return a;
    };
    /**
 * Serializes form data into a 'submittable' string. This method will return a string
 * in the format: name1=value1&amp;name2=value2
 */
    $.fn.formSerialize = function(semantic) {
        //hand off to jQuery.param for proper encoding
        return $.param(this.formToArray(semantic));
    };
    /**
 * Serializes all field elements in the jQuery object into a query string.
 * This method will return a string in the format: name1=value1&amp;name2=value2
 */
    $.fn.fieldSerialize = function(successful) {
        var a = [];
        this.each(function() {
            var n = this.name;
            if (!n) {
                return;
            }
            var v = $.fieldValue(this, successful);
            if (v && v.constructor == Array) {
                for (var i = 0, max = v.length; i < max; i++) {
                    a.push({
                        name: n,
                        value: v[i]
                    });
                }
            } else if (v !== null && typeof v != "undefined") {
                a.push({
                    name: this.name,
                    value: v
                });
            }
        });
        //hand off to jQuery.param for proper encoding
        return $.param(a);
    };
    /**
 * Returns the value(s) of the element in the matched set.  For example, consider the following form:
 *
 *  <form><fieldset>
 *      <input name="A" type="text" />
 *      <input name="A" type="text" />
 *      <input name="B" type="checkbox" value="B1" />
 *      <input name="B" type="checkbox" value="B2"/>
 *      <input name="C" type="radio" value="C1" />
 *      <input name="C" type="radio" value="C2" />
 *  </fieldset></form>
 *
 *  var v = $('input[type=text]').fieldValue();
 *  // if no values are entered into the text inputs
 *  v == ['','']
 *  // if values entered into the text inputs are 'foo' and 'bar'
 *  v == ['foo','bar']
 *
 *  var v = $('input[type=checkbox]').fieldValue();
 *  // if neither checkbox is checked
 *  v === undefined
 *  // if both checkboxes are checked
 *  v == ['B1', 'B2']
 *
 *  var v = $('input[type=radio]').fieldValue();
 *  // if neither radio is checked
 *  v === undefined
 *  // if first radio is checked
 *  v == ['C1']
 *
 * The successful argument controls whether or not the field element must be 'successful'
 * (per http://www.w3.org/TR/html4/interact/forms.html#successful-controls).
 * The default value of the successful argument is true.  If this value is false the value(s)
 * for each element is returned.
 *
 * Note: This method *always* returns an array.  If no valid value can be determined the
 *    array will be empty, otherwise it will contain one or more values.
 */
    $.fn.fieldValue = function(successful) {
        for (var val = [], i = 0, max = this.length; i < max; i++) {
            var el = this[i];
            var v = $.fieldValue(el, successful);
            if (v === null || typeof v == "undefined" || v.constructor == Array && !v.length) {
                continue;
            }
            if (v.constructor == Array) {
                $.merge(val, v);
            } else {
                val.push(v);
            }
        }
        return val;
    };
    /**
 * Returns the value of the field element.
 */
    $.fieldValue = function(el, successful) {
        var n = el.name, t = el.type, tag = el.tagName.toLowerCase();
        if (successful === undefined) {
            successful = true;
        }
        if (successful && (!n || el.disabled || t == "reset" || t == "button" || (t == "checkbox" || t == "radio") && !el.checked || (t == "submit" || t == "image") && el.form && el.form.clk != el || tag == "select" && el.selectedIndex == -1)) {
            return null;
        }
        if (tag == "select") {
            var index = el.selectedIndex;
            if (index < 0) {
                return null;
            }
            var a = [], ops = el.options;
            var one = t == "select-one";
            var max = one ? index + 1 : ops.length;
            for (var i = one ? index : 0; i < max; i++) {
                var op = ops[i];
                if (op.selected) {
                    var v = op.value;
                    if (!v) {
                        // extra pain for IE...
                        v = op.attributes && op.attributes.value && !op.attributes.value.specified ? op.text : op.value;
                    }
                    if (one) {
                        return v;
                    }
                    a.push(v);
                }
            }
            return a;
        }
        return $(el).val();
    };
    /**
 * Clears the form data.  Takes the following actions on the form's input fields:
 *  - input text fields will have their 'value' property set to the empty string
 *  - select elements will have their 'selectedIndex' property set to -1
 *  - checkbox and radio inputs will have their 'checked' property set to false
 *  - inputs of type submit, button, reset, and hidden will *not* be effected
 *  - button elements will *not* be effected
 */
    $.fn.clearForm = function(includeHidden) {
        return this.each(function() {
            $("input,select,textarea", this).clearFields(includeHidden);
        });
    };
    /**
 * Clears the selected form elements.
 */
    $.fn.clearFields = $.fn.clearInputs = function(includeHidden) {
        var re = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i;
        // 'hidden' is not in this list
        return this.each(function() {
            var t = this.type, tag = this.tagName.toLowerCase();
            if (re.test(t) || tag == "textarea") {
                this.value = "";
            } else if (t == "checkbox" || t == "radio") {
                this.checked = false;
            } else if (tag == "select") {
                this.selectedIndex = -1;
            } else if (t == "file") {
                if (/MSIE/.test(navigator.userAgent)) {
                    $(this).replaceWith($(this).clone(true));
                } else {
                    $(this).val("");
                }
            } else if (includeHidden) {
                // includeHidden can be the value true, or it can be a selector string
                // indicating a special test; for example:
                //  $('#myForm').clearForm('.special:hidden')
                // the above would clean hidden inputs that have the class of 'special'
                if (includeHidden === true && /hidden/.test(t) || typeof includeHidden == "string" && $(this).is(includeHidden)) {
                    this.value = "";
                }
            }
        });
    };
    /**
 * Resets the form data.  Causes all form elements to be reset to their original value.
 */
    $.fn.resetForm = function() {
        return this.each(function() {
            // guard against an input with the name of 'reset'
            // note that IE reports the reset function as an 'object'
            if (typeof this.reset == "function" || typeof this.reset == "object" && !this.reset.nodeType) {
                this.reset();
            }
        });
    };
    /**
 * Enables or disables any matching elements.
 */
    $.fn.enable = function(b) {
        if (b === undefined) {
            b = true;
        }
        return this.each(function() {
            this.disabled = !b;
        });
    };
    /**
 * Checks/unchecks any matching checkboxes or radio buttons and
 * selects/deselects and matching option elements.
 */
    $.fn.selected = function(select) {
        if (select === undefined) {
            select = true;
        }
        return this.each(function() {
            var t = this.type;
            if (t == "checkbox" || t == "radio") {
                this.checked = select;
            } else if (this.tagName.toLowerCase() == "option") {
                var $sel = $(this).parent("select");
                if (select && $sel[0] && $sel[0].type == "select-one") {
                    // deselect all other options
                    $sel.find("option").selected(false);
                }
                this.selected = select;
            }
        });
    };
    // expose debug var
    $.fn.ajaxSubmit.debug = false;
    // helper fn for console logging
    function log() {
        if (!$.fn.ajaxSubmit.debug) {
            return;
        }
        var msg = "[jquery.form] " + Array.prototype.join.call(arguments, "");
        if (window.console && window.console.log) {
            window.console.log(msg);
        } else if (window.opera && window.opera.postError) {
            window.opera.postError(msg);
        }
    }
});
/*!
 * jQuery JavaScript Library v1.10.2
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-07-03T13:48Z
 */
(function(window, undefined) {
    // Can't do this because several apps including ASP.NET trace
    // the stack via arguments.caller.callee and Firefox dies if
    // you try to trace through "use strict" call chains. (#13335)
    // Support: Firefox 18+
    //"use strict";
    var // The deferred used on DOM ready
    readyList, // A central reference to the root jQuery(document)
    rootjQuery, // Support: IE<10
    // For `typeof xmlNode.method` instead of `xmlNode.method !== undefined`
    core_strundefined = typeof undefined, // Use the correct document accordingly with window argument (sandbox)
    location = window.location, document = window.document, docElem = document.documentElement, // Map over jQuery in case of overwrite
    _jQuery = window.jQuery, // Map over the $ in case of overwrite
    _$ = window.$, // [[Class]] -> type pairs
    class2type = {}, // List of deleted data cache ids, so we can reuse them
    core_deletedIds = [], core_version = "1.10.2", // Save a reference to some core methods
    core_concat = core_deletedIds.concat, core_push = core_deletedIds.push, core_slice = core_deletedIds.slice, core_indexOf = core_deletedIds.indexOf, core_toString = class2type.toString, core_hasOwn = class2type.hasOwnProperty, core_trim = core_version.trim, // Define a local copy of jQuery
    jQuery = function(selector, context) {
        // The jQuery object is actually just the init constructor 'enhanced'
        return new jQuery.fn.init(selector, context, rootjQuery);
    }, // Used for matching numbers
    core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source, // Used for splitting on whitespace
    core_rnotwhite = /\S+/g, // Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)
    rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, // A simple way to check for HTML strings
    // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
    // Strict HTML recognition (#11290: must start with <)
    rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/, // Match a standalone tag
    rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/, // JSON RegExp
    rvalidchars = /^[\],:{}\s]*$/, rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g, rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g, rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g, // Matches dashed string for camelizing
    rmsPrefix = /^-ms-/, rdashAlpha = /-([\da-z])/gi, // Used by jQuery.camelCase as callback to replace()
    fcamelCase = function(all, letter) {
        return letter.toUpperCase();
    }, // The ready event handler
    completed = function(event) {
        // readyState === "complete" is good enough for us to call the dom ready in oldIE
        if (document.addEventListener || event.type === "load" || document.readyState === "complete") {
            detach();
            jQuery.ready();
        }
    }, // Clean-up method for dom ready events
    detach = function() {
        if (document.addEventListener) {
            document.removeEventListener("DOMContentLoaded", completed, false);
            window.removeEventListener("load", completed, false);
        } else {
            document.detachEvent("onreadystatechange", completed);
            window.detachEvent("onload", completed);
        }
    };
    jQuery.fn = jQuery.prototype = {
        // The current version of jQuery being used
        jquery: core_version,
        constructor: jQuery,
        init: function(selector, context, rootjQuery) {
            var match, elem;
            // HANDLE: $(""), $(null), $(undefined), $(false)
            if (!selector) {
                return this;
            }
            // Handle HTML strings
            if (typeof selector === "string") {
                if (selector.charAt(0) === "<" && selector.charAt(selector.length - 1) === ">" && selector.length >= 3) {
                    // Assume that strings that start and end with <> are HTML and skip the regex check
                    match = [ null, selector, null ];
                } else {
                    match = rquickExpr.exec(selector);
                }
                // Match html or make sure no context is specified for #id
                if (match && (match[1] || !context)) {
                    // HANDLE: $(html) -> $(array)
                    if (match[1]) {
                        context = context instanceof jQuery ? context[0] : context;
                        // scripts is true for back-compat
                        jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));
                        // HANDLE: $(html, props)
                        if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                            for (match in context) {
                                // Properties of context are called as methods if possible
                                if (jQuery.isFunction(this[match])) {
                                    this[match](context[match]);
                                } else {
                                    this.attr(match, context[match]);
                                }
                            }
                        }
                        return this;
                    } else {
                        elem = document.getElementById(match[2]);
                        // Check parentNode to catch when Blackberry 4.6 returns
                        // nodes that are no longer in the document #6963
                        if (elem && elem.parentNode) {
                            // Handle the case where IE and Opera return items
                            // by name instead of ID
                            if (elem.id !== match[2]) {
                                return rootjQuery.find(selector);
                            }
                            // Otherwise, we inject the element directly into the jQuery object
                            this.length = 1;
                            this[0] = elem;
                        }
                        this.context = document;
                        this.selector = selector;
                        return this;
                    }
                } else if (!context || context.jquery) {
                    return (context || rootjQuery).find(selector);
                } else {
                    return this.constructor(context).find(selector);
                }
            } else if (selector.nodeType) {
                this.context = this[0] = selector;
                this.length = 1;
                return this;
            } else if (jQuery.isFunction(selector)) {
                return rootjQuery.ready(selector);
            }
            if (selector.selector !== undefined) {
                this.selector = selector.selector;
                this.context = selector.context;
            }
            return jQuery.makeArray(selector, this);
        },
        // Start with an empty selector
        selector: "",
        // The default length of a jQuery object is 0
        length: 0,
        toArray: function() {
            return core_slice.call(this);
        },
        // Get the Nth element in the matched element set OR
        // Get the whole matched element set as a clean array
        get: function(num) {
            return num == null ? // Return a 'clean' array
            this.toArray() : // Return just the object
            num < 0 ? this[this.length + num] : this[num];
        },
        // Take an array of elements and push it onto the stack
        // (returning the new matched element set)
        pushStack: function(elems) {
            // Build a new jQuery matched element set
            var ret = jQuery.merge(this.constructor(), elems);
            // Add the old object onto the stack (as a reference)
            ret.prevObject = this;
            ret.context = this.context;
            // Return the newly-formed element set
            return ret;
        },
        // Execute a callback for every element in the matched set.
        // (You can seed the arguments with an array of args, but this is
        // only used internally.)
        each: function(callback, args) {
            return jQuery.each(this, callback, args);
        },
        ready: function(fn) {
            // Add the callback
            jQuery.ready.promise().done(fn);
            return this;
        },
        slice: function() {
            return this.pushStack(core_slice.apply(this, arguments));
        },
        first: function() {
            return this.eq(0);
        },
        last: function() {
            return this.eq(-1);
        },
        eq: function(i) {
            var len = this.length, j = +i + (i < 0 ? len : 0);
            return this.pushStack(j >= 0 && j < len ? [ this[j] ] : []);
        },
        map: function(callback) {
            return this.pushStack(jQuery.map(this, function(elem, i) {
                return callback.call(elem, i, elem);
            }));
        },
        end: function() {
            return this.prevObject || this.constructor(null);
        },
        // For internal use only.
        // Behaves like an Array's method, not like a jQuery method.
        push: core_push,
        sort: [].sort,
        splice: [].splice
    };
    // Give the init function the jQuery prototype for later instantiation
    jQuery.fn.init.prototype = jQuery.fn;
    jQuery.extend = jQuery.fn.extend = function() {
        var src, copyIsArray, copy, name, options, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
        // Handle a deep copy situation
        if (typeof target === "boolean") {
            deep = target;
            target = arguments[1] || {};
            // skip the boolean and the target
            i = 2;
        }
        // Handle case when target is a string or something (possible in deep copy)
        if (typeof target !== "object" && !jQuery.isFunction(target)) {
            target = {};
        }
        // extend jQuery itself if only one argument is passed
        if (length === i) {
            target = this;
            --i;
        }
        for (;i < length; i++) {
            // Only deal with non-null/undefined values
            if ((options = arguments[i]) != null) {
                // Extend the base object
                for (name in options) {
                    src = target[name];
                    copy = options[name];
                    // Prevent never-ending loop
                    if (target === copy) {
                        continue;
                    }
                    // Recurse if we're merging plain objects or arrays
                    if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                        if (copyIsArray) {
                            copyIsArray = false;
                            clone = src && jQuery.isArray(src) ? src : [];
                        } else {
                            clone = src && jQuery.isPlainObject(src) ? src : {};
                        }
                        // Never move original objects, clone them
                        target[name] = jQuery.extend(deep, clone, copy);
                    } else if (copy !== undefined) {
                        target[name] = copy;
                    }
                }
            }
        }
        // Return the modified object
        return target;
    };
    jQuery.extend({
        // Unique for each copy of jQuery on the page
        // Non-digits removed to match rinlinejQuery
        expando: "jQuery" + (core_version + Math.random()).replace(/\D/g, ""),
        noConflict: function(deep) {
            if (window.$ === jQuery) {
                window.$ = _$;
            }
            if (deep && window.jQuery === jQuery) {
                window.jQuery = _jQuery;
            }
            return jQuery;
        },
        // Is the DOM ready to be used? Set to true once it occurs.
        isReady: false,
        // A counter to track how many items to wait for before
        // the ready event fires. See #6781
        readyWait: 1,
        // Hold (or release) the ready event
        holdReady: function(hold) {
            if (hold) {
                jQuery.readyWait++;
            } else {
                jQuery.ready(true);
            }
        },
        // Handle when the DOM is ready
        ready: function(wait) {
            // Abort if there are pending holds or we're already ready
            if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
                return;
            }
            // Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
            if (!document.body) {
                return setTimeout(jQuery.ready);
            }
            // Remember that the DOM is ready
            jQuery.isReady = true;
            // If a normal DOM Ready event fired, decrement, and wait if need be
            if (wait !== true && --jQuery.readyWait > 0) {
                return;
            }
            // If there are functions bound, to execute
            readyList.resolveWith(document, [ jQuery ]);
            // Trigger any bound ready events
            if (jQuery.fn.trigger) {
                jQuery(document).trigger("ready").off("ready");
            }
        },
        // See test/unit/core.js for details concerning isFunction.
        // Since version 1.3, DOM methods and functions like alert
        // aren't supported. They return false on IE (#2968).
        isFunction: function(obj) {
            return jQuery.type(obj) === "function";
        },
        isArray: Array.isArray || function(obj) {
            return jQuery.type(obj) === "array";
        },
        isWindow: function(obj) {
            /* jshint eqeqeq: false */
            return obj != null && obj == obj.window;
        },
        isNumeric: function(obj) {
            return !isNaN(parseFloat(obj)) && isFinite(obj);
        },
        type: function(obj) {
            if (obj == null) {
                return String(obj);
            }
            return typeof obj === "object" || typeof obj === "function" ? class2type[core_toString.call(obj)] || "object" : typeof obj;
        },
        isPlainObject: function(obj) {
            var key;
            // Must be an Object.
            // Because of IE, we also have to check the presence of the constructor property.
            // Make sure that DOM nodes and window objects don't pass through, as well
            if (!obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
                return false;
            }
            try {
                // Not own constructor property must be Object
                if (obj.constructor && !core_hasOwn.call(obj, "constructor") && !core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
                    return false;
                }
            } catch (e) {
                // IE8,9 Will throw exceptions on certain host objects #9897
                return false;
            }
            // Support: IE<9
            // Handle iteration over inherited properties before own properties.
            if (jQuery.support.ownLast) {
                for (key in obj) {
                    return core_hasOwn.call(obj, key);
                }
            }
            // Own properties are enumerated firstly, so to speed up,
            // if last one is own, then all properties are own.
            for (key in obj) {}
            return key === undefined || core_hasOwn.call(obj, key);
        },
        isEmptyObject: function(obj) {
            var name;
            for (name in obj) {
                return false;
            }
            return true;
        },
        error: function(msg) {
            throw new Error(msg);
        },
        // data: string of html
        // context (optional): If specified, the fragment will be created in this context, defaults to document
        // keepScripts (optional): If true, will include scripts passed in the html string
        parseHTML: function(data, context, keepScripts) {
            if (!data || typeof data !== "string") {
                return null;
            }
            if (typeof context === "boolean") {
                keepScripts = context;
                context = false;
            }
            context = context || document;
            var parsed = rsingleTag.exec(data), scripts = !keepScripts && [];
            // Single tag
            if (parsed) {
                return [ context.createElement(parsed[1]) ];
            }
            parsed = jQuery.buildFragment([ data ], context, scripts);
            if (scripts) {
                jQuery(scripts).remove();
            }
            return jQuery.merge([], parsed.childNodes);
        },
        parseJSON: function(data) {
            // Attempt to parse using the native JSON parser first
            if (window.JSON && window.JSON.parse) {
                return window.JSON.parse(data);
            }
            if (data === null) {
                return data;
            }
            if (typeof data === "string") {
                // Make sure leading/trailing whitespace is removed (IE can't handle it)
                data = jQuery.trim(data);
                if (data) {
                    // Make sure the incoming data is actual JSON
                    // Logic borrowed from http://json.org/json2.js
                    if (rvalidchars.test(data.replace(rvalidescape, "@").replace(rvalidtokens, "]").replace(rvalidbraces, ""))) {
                        return new Function("return " + data)();
                    }
                }
            }
            jQuery.error("Invalid JSON: " + data);
        },
        // Cross-browser xml parsing
        parseXML: function(data) {
            var xml, tmp;
            if (!data || typeof data !== "string") {
                return null;
            }
            try {
                if (window.DOMParser) {
                    // Standard
                    tmp = new DOMParser();
                    xml = tmp.parseFromString(data, "text/xml");
                } else {
                    // IE
                    xml = new ActiveXObject("Microsoft.XMLDOM");
                    xml.async = "false";
                    xml.loadXML(data);
                }
            } catch (e) {
                xml = undefined;
            }
            if (!xml || !xml.documentElement || xml.getElementsByTagName("parsererror").length) {
                jQuery.error("Invalid XML: " + data);
            }
            return xml;
        },
        noop: function() {},
        // Evaluates a script in a global context
        // Workarounds based on findings by Jim Driscoll
        // http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
        globalEval: function(data) {
            if (data && jQuery.trim(data)) {
                // We use execScript on Internet Explorer
                // We use an anonymous function so that context is window
                // rather than jQuery in Firefox
                (window.execScript || function(data) {
                    window["eval"].call(window, data);
                })(data);
            }
        },
        // Convert dashed to camelCase; used by the css and data modules
        // Microsoft forgot to hump their vendor prefix (#9572)
        camelCase: function(string) {
            return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
        },
        nodeName: function(elem, name) {
            return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
        },
        // args is for internal usage only
        each: function(obj, callback, args) {
            var value, i = 0, length = obj.length, isArray = isArraylike(obj);
            if (args) {
                if (isArray) {
                    for (;i < length; i++) {
                        value = callback.apply(obj[i], args);
                        if (value === false) {
                            break;
                        }
                    }
                } else {
                    for (i in obj) {
                        value = callback.apply(obj[i], args);
                        if (value === false) {
                            break;
                        }
                    }
                }
            } else {
                if (isArray) {
                    for (;i < length; i++) {
                        value = callback.call(obj[i], i, obj[i]);
                        if (value === false) {
                            break;
                        }
                    }
                } else {
                    for (i in obj) {
                        value = callback.call(obj[i], i, obj[i]);
                        if (value === false) {
                            break;
                        }
                    }
                }
            }
            return obj;
        },
        // Use native String.trim function wherever possible
        trim: core_trim && !core_trim.call("﻿ ") ? function(text) {
            return text == null ? "" : core_trim.call(text);
        } : // Otherwise use our own trimming functionality
        function(text) {
            return text == null ? "" : (text + "").replace(rtrim, "");
        },
        // results is for internal usage only
        makeArray: function(arr, results) {
            var ret = results || [];
            if (arr != null) {
                if (isArraylike(Object(arr))) {
                    jQuery.merge(ret, typeof arr === "string" ? [ arr ] : arr);
                } else {
                    core_push.call(ret, arr);
                }
            }
            return ret;
        },
        inArray: function(elem, arr, i) {
            var len;
            if (arr) {
                if (core_indexOf) {
                    return core_indexOf.call(arr, elem, i);
                }
                len = arr.length;
                i = i ? i < 0 ? Math.max(0, len + i) : i : 0;
                for (;i < len; i++) {
                    // Skip accessing in sparse arrays
                    if (i in arr && arr[i] === elem) {
                        return i;
                    }
                }
            }
            return -1;
        },
        merge: function(first, second) {
            var l = second.length, i = first.length, j = 0;
            if (typeof l === "number") {
                for (;j < l; j++) {
                    first[i++] = second[j];
                }
            } else {
                while (second[j] !== undefined) {
                    first[i++] = second[j++];
                }
            }
            first.length = i;
            return first;
        },
        grep: function(elems, callback, inv) {
            var retVal, ret = [], i = 0, length = elems.length;
            inv = !!inv;
            // Go through the array, only saving the items
            // that pass the validator function
            for (;i < length; i++) {
                retVal = !!callback(elems[i], i);
                if (inv !== retVal) {
                    ret.push(elems[i]);
                }
            }
            return ret;
        },
        // arg is for internal usage only
        map: function(elems, callback, arg) {
            var value, i = 0, length = elems.length, isArray = isArraylike(elems), ret = [];
            // Go through the array, translating each of the items to their
            if (isArray) {
                for (;i < length; i++) {
                    value = callback(elems[i], i, arg);
                    if (value != null) {
                        ret[ret.length] = value;
                    }
                }
            } else {
                for (i in elems) {
                    value = callback(elems[i], i, arg);
                    if (value != null) {
                        ret[ret.length] = value;
                    }
                }
            }
            // Flatten any nested arrays
            return core_concat.apply([], ret);
        },
        // A global GUID counter for objects
        guid: 1,
        // Bind a function to a context, optionally partially applying any
        // arguments.
        proxy: function(fn, context) {
            var args, proxy, tmp;
            if (typeof context === "string") {
                tmp = fn[context];
                context = fn;
                fn = tmp;
            }
            // Quick check to determine if target is callable, in the spec
            // this throws a TypeError, but we will just return undefined.
            if (!jQuery.isFunction(fn)) {
                return undefined;
            }
            // Simulated bind
            args = core_slice.call(arguments, 2);
            proxy = function() {
                return fn.apply(context || this, args.concat(core_slice.call(arguments)));
            };
            // Set the guid of unique handler to the same of original handler, so it can be removed
            proxy.guid = fn.guid = fn.guid || jQuery.guid++;
            return proxy;
        },
        // Multifunctional method to get and set values of a collection
        // The value/s can optionally be executed if it's a function
        access: function(elems, fn, key, value, chainable, emptyGet, raw) {
            var i = 0, length = elems.length, bulk = key == null;
            // Sets many values
            if (jQuery.type(key) === "object") {
                chainable = true;
                for (i in key) {
                    jQuery.access(elems, fn, i, key[i], true, emptyGet, raw);
                }
            } else if (value !== undefined) {
                chainable = true;
                if (!jQuery.isFunction(value)) {
                    raw = true;
                }
                if (bulk) {
                    // Bulk operations run against the entire set
                    if (raw) {
                        fn.call(elems, value);
                        fn = null;
                    } else {
                        bulk = fn;
                        fn = function(elem, key, value) {
                            return bulk.call(jQuery(elem), value);
                        };
                    }
                }
                if (fn) {
                    for (;i < length; i++) {
                        fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
                    }
                }
            }
            return chainable ? elems : // Gets
            bulk ? fn.call(elems) : length ? fn(elems[0], key) : emptyGet;
        },
        now: function() {
            return new Date().getTime();
        },
        // A method for quickly swapping in/out CSS properties to get correct calculations.
        // Note: this method belongs to the css module but it's needed here for the support module.
        // If support gets modularized, this method should be moved back to the css module.
        swap: function(elem, options, callback, args) {
            var ret, name, old = {};
            // Remember the old values, and insert the new ones
            for (name in options) {
                old[name] = elem.style[name];
                elem.style[name] = options[name];
            }
            ret = callback.apply(elem, args || []);
            // Revert the old values
            for (name in options) {
                elem.style[name] = old[name];
            }
            return ret;
        }
    });
    jQuery.ready.promise = function(obj) {
        if (!readyList) {
            readyList = jQuery.Deferred();
            // Catch cases where $(document).ready() is called after the browser event has already occurred.
            // we once tried to use readyState "interactive" here, but it caused issues like the one
            // discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
            if (document.readyState === "complete") {
                // Handle it asynchronously to allow scripts the opportunity to delay ready
                setTimeout(jQuery.ready);
            } else if (document.addEventListener) {
                // Use the handy event callback
                document.addEventListener("DOMContentLoaded", completed, false);
                // A fallback to window.onload, that will always work
                window.addEventListener("load", completed, false);
            } else {
                // Ensure firing before onload, maybe late but safe also for iframes
                document.attachEvent("onreadystatechange", completed);
                // A fallback to window.onload, that will always work
                window.attachEvent("onload", completed);
                // If IE and not a frame
                // continually check to see if the document is ready
                var top = false;
                try {
                    top = window.frameElement == null && document.documentElement;
                } catch (e) {}
                if (top && top.doScroll) {
                    (function doScrollCheck() {
                        if (!jQuery.isReady) {
                            try {
                                // Use the trick by Diego Perini
                                // http://javascript.nwbox.com/IEContentLoaded/
                                top.doScroll("left");
                            } catch (e) {
                                return setTimeout(doScrollCheck, 50);
                            }
                            // detach all dom ready events
                            detach();
                            // and execute any waiting functions
                            jQuery.ready();
                        }
                    })();
                }
            }
        }
        return readyList.promise(obj);
    };
    // Populate the class2type map
    jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
        class2type["[object " + name + "]"] = name.toLowerCase();
    });
    function isArraylike(obj) {
        var length = obj.length, type = jQuery.type(obj);
        if (jQuery.isWindow(obj)) {
            return false;
        }
        if (obj.nodeType === 1 && length) {
            return true;
        }
        return type === "array" || type !== "function" && (length === 0 || typeof length === "number" && length > 0 && length - 1 in obj);
    }
    // All jQuery objects should point back to these
    rootjQuery = jQuery(document);
    /*!
     * Sizzle CSS Selector Engine v1.10.2
     * http://sizzlejs.com/
     *
     * Copyright 2013 jQuery Foundation, Inc. and other contributors
     * Released under the MIT license
     * http://jquery.org/license
     *
     * Date: 2013-07-03
     */
    (function(window, undefined) {
        var i, support, cachedruns, Expr, getText, isXML, compile, outermostContext, sortInput, // Local document vars
        setDocument, document, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains, // Instance-specific data
        expando = "sizzle" + -new Date(), preferredDoc = window.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), hasDuplicate = false, sortOrder = function(a, b) {
            if (a === b) {
                hasDuplicate = true;
                return 0;
            }
            return 0;
        }, // General-purpose constants
        strundefined = typeof undefined, MAX_NEGATIVE = 1 << 31, // Instance methods
        hasOwn = {}.hasOwnProperty, arr = [], pop = arr.pop, push_native = arr.push, push = arr.push, slice = arr.slice, // Use a stripped-down indexOf if we can't use a native one
        indexOf = arr.indexOf || function(elem) {
            var i = 0, len = this.length;
            for (;i < len; i++) {
                if (this[i] === elem) {
                    return i;
                }
            }
            return -1;
        }, booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", // Regular expressions
        // Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
        whitespace = "[\\x20\\t\\r\\n\\f]", // http://www.w3.org/TR/css3-syntax/#characters
        characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+", // Loosely modeled on CSS identifier characters
        // An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
        // Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
        identifier = characterEncoding.replace("w", "w#"), // Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
        attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace + "*(?:([*^$|!~]?=)" + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]", // Prefer arguments quoted,
        //   then not containing pseudos/brackets,
        //   then attribute selectors/non-parenthetical expressions,
        //   then anything else
        // These preferences are here to reduce the number of selectors
        //   needing tokenize in the PSEUDO preFilter
        pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace(3, 8) + ")*)|.*)\\)|)", // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
        rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"), rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"), rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"), rsibling = new RegExp(whitespace + "*[+~]"), rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*)" + whitespace + "*\\]", "g"), rpseudo = new RegExp(pseudos), ridentifier = new RegExp("^" + identifier + "$"), matchExpr = {
            ID: new RegExp("^#(" + characterEncoding + ")"),
            CLASS: new RegExp("^\\.(" + characterEncoding + ")"),
            TAG: new RegExp("^(" + characterEncoding.replace("w", "w*") + ")"),
            ATTR: new RegExp("^" + attributes),
            PSEUDO: new RegExp("^" + pseudos),
            CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
            bool: new RegExp("^(?:" + booleans + ")$", "i"),
            // For use in libraries implementing .is()
            // We use this for POS matching in `select`
            needsContext: new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
        }, rnative = /^[^{]+\{\s*\[native \w/, // Easily-parseable/retrievable ID or TAG or CLASS selectors
        rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rescape = /'|\\/g, // CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
        runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"), funescape = function(_, escaped, escapedWhitespace) {
            var high = "0x" + escaped - 65536;
            // NaN means non-codepoint
            // Support: Firefox
            // Workaround erroneous numeric interpretation of +"0x"
            return high !== high || escapedWhitespace ? escaped : // BMP codepoint
            high < 0 ? String.fromCharCode(high + 65536) : // Supplemental Plane codepoint (surrogate pair)
            String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320);
        };
        // Optimize for push.apply( _, NodeList )
        try {
            push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
            // Support: Android<4.0
            // Detect silently failing push.apply
            arr[preferredDoc.childNodes.length].nodeType;
        } catch (e) {
            push = {
                apply: arr.length ? // Leverage slice if possible
                function(target, els) {
                    push_native.apply(target, slice.call(els));
                } : // Support: IE<9
                // Otherwise append directly
                function(target, els) {
                    var j = target.length, i = 0;
                    // Can't trust NodeList.length
                    while (target[j++] = els[i++]) {}
                    target.length = j - 1;
                }
            };
        }
        function Sizzle(selector, context, results, seed) {
            var match, elem, m, nodeType, // QSA vars
            i, groups, old, nid, newContext, newSelector;
            if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
                setDocument(context);
            }
            context = context || document;
            results = results || [];
            if (!selector || typeof selector !== "string") {
                return results;
            }
            if ((nodeType = context.nodeType) !== 1 && nodeType !== 9) {
                return [];
            }
            if (documentIsHTML && !seed) {
                // Shortcuts
                if (match = rquickExpr.exec(selector)) {
                    // Speed-up: Sizzle("#ID")
                    if (m = match[1]) {
                        if (nodeType === 9) {
                            elem = context.getElementById(m);
                            // Check parentNode to catch when Blackberry 4.6 returns
                            // nodes that are no longer in the document #6963
                            if (elem && elem.parentNode) {
                                // Handle the case where IE, Opera, and Webkit return items
                                // by name instead of ID
                                if (elem.id === m) {
                                    results.push(elem);
                                    return results;
                                }
                            } else {
                                return results;
                            }
                        } else {
                            // Context is not a document
                            if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {
                                results.push(elem);
                                return results;
                            }
                        }
                    } else if (match[2]) {
                        push.apply(results, context.getElementsByTagName(selector));
                        return results;
                    } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
                        push.apply(results, context.getElementsByClassName(m));
                        return results;
                    }
                }
                // QSA path
                if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
                    nid = old = expando;
                    newContext = context;
                    newSelector = nodeType === 9 && selector;
                    // qSA works strangely on Element-rooted queries
                    // We can work around this by specifying an extra ID on the root
                    // and working up from there (Thanks to Andrew Dupont for the technique)
                    // IE 8 doesn't work on object elements
                    if (nodeType === 1 && context.nodeName.toLowerCase() !== "object") {
                        groups = tokenize(selector);
                        if (old = context.getAttribute("id")) {
                            nid = old.replace(rescape, "\\$&");
                        } else {
                            context.setAttribute("id", nid);
                        }
                        nid = "[id='" + nid + "'] ";
                        i = groups.length;
                        while (i--) {
                            groups[i] = nid + toSelector(groups[i]);
                        }
                        newContext = rsibling.test(selector) && context.parentNode || context;
                        newSelector = groups.join(",");
                    }
                    if (newSelector) {
                        try {
                            push.apply(results, newContext.querySelectorAll(newSelector));
                            return results;
                        } catch (qsaError) {} finally {
                            if (!old) {
                                context.removeAttribute("id");
                            }
                        }
                    }
                }
            }
            // All others
            return select(selector.replace(rtrim, "$1"), context, results, seed);
        }
        /**
         * Create key-value caches of limited size
         * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
         *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
         *	deleting the oldest entry
         */
        function createCache() {
            var keys = [];
            function cache(key, value) {
                // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
                if (keys.push(key += " ") > Expr.cacheLength) {
                    // Only keep the most recent entries
                    delete cache[keys.shift()];
                }
                return cache[key] = value;
            }
            return cache;
        }
        /**
         * Mark a function for special use by Sizzle
         * @param {Function} fn The function to mark
         */
        function markFunction(fn) {
            fn[expando] = true;
            return fn;
        }
        /**
         * Support testing using an element
         * @param {Function} fn Passed the created div and expects a boolean result
         */
        function assert(fn) {
            var div = document.createElement("div");
            try {
                return !!fn(div);
            } catch (e) {
                return false;
            } finally {
                // Remove from its parent by default
                if (div.parentNode) {
                    div.parentNode.removeChild(div);
                }
                // release memory in IE
                div = null;
            }
        }
        /**
         * Adds the same handler for all of the specified attrs
         * @param {String} attrs Pipe-separated list of attributes
         * @param {Function} handler The method that will be applied
         */
        function addHandle(attrs, handler) {
            var arr = attrs.split("|"), i = attrs.length;
            while (i--) {
                Expr.attrHandle[arr[i]] = handler;
            }
        }
        /**
         * Checks document order of two siblings
         * @param {Element} a
         * @param {Element} b
         * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
         */
        function siblingCheck(a, b) {
            var cur = b && a, diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);
            // Use IE sourceIndex if available on both nodes
            if (diff) {
                return diff;
            }
            // Check if b follows a
            if (cur) {
                while (cur = cur.nextSibling) {
                    if (cur === b) {
                        return -1;
                    }
                }
            }
            return a ? 1 : -1;
        }
        /**
         * Returns a function to use in pseudos for input types
         * @param {String} type
         */
        function createInputPseudo(type) {
            return function(elem) {
                var name = elem.nodeName.toLowerCase();
                return name === "input" && elem.type === type;
            };
        }
        /**
         * Returns a function to use in pseudos for buttons
         * @param {String} type
         */
        function createButtonPseudo(type) {
            return function(elem) {
                var name = elem.nodeName.toLowerCase();
                return (name === "input" || name === "button") && elem.type === type;
            };
        }
        /**
         * Returns a function to use in pseudos for positionals
         * @param {Function} fn
         */
        function createPositionalPseudo(fn) {
            return markFunction(function(argument) {
                argument = +argument;
                return markFunction(function(seed, matches) {
                    var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length;
                    // Match elements found at the specified indexes
                    while (i--) {
                        if (seed[j = matchIndexes[i]]) {
                            seed[j] = !(matches[j] = seed[j]);
                        }
                    }
                });
            });
        }
        /**
         * Detect xml
         * @param {Element|Object} elem An element or a document
         */
        isXML = Sizzle.isXML = function(elem) {
            // documentElement is verified for cases where it doesn't yet exist
            // (such as loading iframes in IE - #4833)
            var documentElement = elem && (elem.ownerDocument || elem).documentElement;
            return documentElement ? documentElement.nodeName !== "HTML" : false;
        };
        // Expose support vars for convenience
        support = Sizzle.support = {};
        /**
         * Sets document-related variables once based on the current document
         * @param {Element|Object} [doc] An element or document object to use to set the document
         * @returns {Object} Returns the current document
         */
        setDocument = Sizzle.setDocument = function(node) {
            var doc = node ? node.ownerDocument || node : preferredDoc, parent = doc.defaultView;
            // If no document and documentElement is available, return
            if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
                return document;
            }
            // Set our document
            document = doc;
            docElem = doc.documentElement;
            // Support tests
            documentIsHTML = !isXML(doc);
            // Support: IE>8
            // If iframe document is assigned to "document" variable and if iframe has been reloaded,
            // IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
            // IE6-8 do not support the defaultView property so parent will be undefined
            if (parent && parent.attachEvent && parent !== parent.top) {
                parent.attachEvent("onbeforeunload", function() {
                    setDocument();
                });
            }
            /* Attributes
             ---------------------------------------------------------------------- */
            // Support: IE<8
            // Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)
            support.attributes = assert(function(div) {
                div.className = "i";
                return !div.getAttribute("className");
            });
            /* getElement(s)By*
             ---------------------------------------------------------------------- */
            // Check if getElementsByTagName("*") returns only elements
            support.getElementsByTagName = assert(function(div) {
                div.appendChild(doc.createComment(""));
                return !div.getElementsByTagName("*").length;
            });
            // Check if getElementsByClassName can be trusted
            support.getElementsByClassName = assert(function(div) {
                div.innerHTML = "<div class='a'></div><div class='a i'></div>";
                // Support: Safari<4
                // Catch class over-caching
                div.firstChild.className = "i";
                // Support: Opera<10
                // Catch gEBCN failure to find non-leading classes
                return div.getElementsByClassName("i").length === 2;
            });
            // Support: IE<10
            // Check if getElementById returns elements by name
            // The broken getElementById methods don't pick up programatically-set names,
            // so use a roundabout getElementsByName test
            support.getById = assert(function(div) {
                docElem.appendChild(div).id = expando;
                return !doc.getElementsByName || !doc.getElementsByName(expando).length;
            });
            // ID find and filter
            if (support.getById) {
                Expr.find["ID"] = function(id, context) {
                    if (typeof context.getElementById !== strundefined && documentIsHTML) {
                        var m = context.getElementById(id);
                        // Check parentNode to catch when Blackberry 4.6 returns
                        // nodes that are no longer in the document #6963
                        return m && m.parentNode ? [ m ] : [];
                    }
                };
                Expr.filter["ID"] = function(id) {
                    var attrId = id.replace(runescape, funescape);
                    return function(elem) {
                        return elem.getAttribute("id") === attrId;
                    };
                };
            } else {
                // Support: IE6/7
                // getElementById is not reliable as a find shortcut
                delete Expr.find["ID"];
                Expr.filter["ID"] = function(id) {
                    var attrId = id.replace(runescape, funescape);
                    return function(elem) {
                        var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
                        return node && node.value === attrId;
                    };
                };
            }
            // Tag
            Expr.find["TAG"] = support.getElementsByTagName ? function(tag, context) {
                if (typeof context.getElementsByTagName !== strundefined) {
                    return context.getElementsByTagName(tag);
                }
            } : function(tag, context) {
                var elem, tmp = [], i = 0, results = context.getElementsByTagName(tag);
                // Filter out possible comments
                if (tag === "*") {
                    while (elem = results[i++]) {
                        if (elem.nodeType === 1) {
                            tmp.push(elem);
                        }
                    }
                    return tmp;
                }
                return results;
            };
            // Class
            Expr.find["CLASS"] = support.getElementsByClassName && function(className, context) {
                if (typeof context.getElementsByClassName !== strundefined && documentIsHTML) {
                    return context.getElementsByClassName(className);
                }
            };
            /* QSA/matchesSelector
             ---------------------------------------------------------------------- */
            // QSA and matchesSelector support
            // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
            rbuggyMatches = [];
            // qSa(:focus) reports false when true (Chrome 21)
            // We allow this because of a bug in IE8/9 that throws an error
            // whenever `document.activeElement` is accessed on an iframe
            // So, we allow :focus to pass through QSA all the time to avoid the IE error
            // See http://bugs.jquery.com/ticket/13378
            rbuggyQSA = [];
            if (support.qsa = rnative.test(doc.querySelectorAll)) {
                // Build QSA regex
                // Regex strategy adopted from Diego Perini
                assert(function(div) {
                    // Select is set to empty string on purpose
                    // This is to test IE's treatment of not explicitly
                    // setting a boolean content attribute,
                    // since its presence should be enough
                    // http://bugs.jquery.com/ticket/12359
                    div.innerHTML = "<select><option selected=''></option></select>";
                    // Support: IE8
                    // Boolean attributes and "value" are not treated correctly
                    if (!div.querySelectorAll("[selected]").length) {
                        rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
                    }
                    // Webkit/Opera - :checked should return selected option elements
                    // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                    // IE8 throws error here and will not see later tests
                    if (!div.querySelectorAll(":checked").length) {
                        rbuggyQSA.push(":checked");
                    }
                });
                assert(function(div) {
                    // Support: Opera 10-12/IE8
                    // ^= $= *= and empty values
                    // Should not select anything
                    // Support: Windows 8 Native Apps
                    // The type attribute is restricted during .innerHTML assignment
                    var input = doc.createElement("input");
                    input.setAttribute("type", "hidden");
                    div.appendChild(input).setAttribute("t", "");
                    if (div.querySelectorAll("[t^='']").length) {
                        rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
                    }
                    // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
                    // IE8 throws error here and will not see later tests
                    if (!div.querySelectorAll(":enabled").length) {
                        rbuggyQSA.push(":enabled", ":disabled");
                    }
                    // Opera 10-11 does not throw on post-comma invalid pseudos
                    div.querySelectorAll("*,:x");
                    rbuggyQSA.push(",.*:");
                });
            }
            if (support.matchesSelector = rnative.test(matches = docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
                assert(function(div) {
                    // Check to see if it's possible to do matchesSelector
                    // on a disconnected node (IE 9)
                    support.disconnectedMatch = matches.call(div, "div");
                    // This should fail with an exception
                    // Gecko does not error, returns false instead
                    matches.call(div, "[s!='']:x");
                    rbuggyMatches.push("!=", pseudos);
                });
            }
            rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
            rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
            /* Contains
             ---------------------------------------------------------------------- */
            // Element contains another
            // Purposefully does not implement inclusive descendent
            // As in, an element does not contain itself
            contains = rnative.test(docElem.contains) || docElem.compareDocumentPosition ? function(a, b) {
                var adown = a.nodeType === 9 ? a.documentElement : a, bup = b && b.parentNode;
                return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
            } : function(a, b) {
                if (b) {
                    while (b = b.parentNode) {
                        if (b === a) {
                            return true;
                        }
                    }
                }
                return false;
            };
            /* Sorting
             ---------------------------------------------------------------------- */
            // Document order sorting
            sortOrder = docElem.compareDocumentPosition ? function(a, b) {
                // Flag for duplicate removal
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                }
                var compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition(b);
                if (compare) {
                    // Disconnected nodes
                    if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
                        // Choose the first element that is related to our preferred document
                        if (a === doc || contains(preferredDoc, a)) {
                            return -1;
                        }
                        if (b === doc || contains(preferredDoc, b)) {
                            return 1;
                        }
                        // Maintain original order
                        return sortInput ? indexOf.call(sortInput, a) - indexOf.call(sortInput, b) : 0;
                    }
                    return compare & 4 ? -1 : 1;
                }
                // Not directly comparable, sort on existence of method
                return a.compareDocumentPosition ? -1 : 1;
            } : function(a, b) {
                var cur, i = 0, aup = a.parentNode, bup = b.parentNode, ap = [ a ], bp = [ b ];
                // Exit early if the nodes are identical
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                } else if (!aup || !bup) {
                    return a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf.call(sortInput, a) - indexOf.call(sortInput, b) : 0;
                } else if (aup === bup) {
                    return siblingCheck(a, b);
                }
                // Otherwise we need full lists of their ancestors for comparison
                cur = a;
                while (cur = cur.parentNode) {
                    ap.unshift(cur);
                }
                cur = b;
                while (cur = cur.parentNode) {
                    bp.unshift(cur);
                }
                // Walk down the tree looking for a discrepancy
                while (ap[i] === bp[i]) {
                    i++;
                }
                return i ? // Do a sibling check if the nodes have a common ancestor
                siblingCheck(ap[i], bp[i]) : // Otherwise nodes in our document sort first
                ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
            };
            return doc;
        };
        Sizzle.matches = function(expr, elements) {
            return Sizzle(expr, null, null, elements);
        };
        Sizzle.matchesSelector = function(elem, expr) {
            // Set document vars if needed
            if ((elem.ownerDocument || elem) !== document) {
                setDocument(elem);
            }
            // Make sure that attribute selectors are quoted
            expr = expr.replace(rattributeQuotes, "='$1']");
            if (support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
                try {
                    var ret = matches.call(elem, expr);
                    // IE 9's matchesSelector returns false on disconnected nodes
                    if (ret || support.disconnectedMatch || // As well, disconnected nodes are said to be in a document
                    // fragment in IE 9
                    elem.document && elem.document.nodeType !== 11) {
                        return ret;
                    }
                } catch (e) {}
            }
            return Sizzle(expr, document, null, [ elem ]).length > 0;
        };
        Sizzle.contains = function(context, elem) {
            // Set document vars if needed
            if ((context.ownerDocument || context) !== document) {
                setDocument(context);
            }
            return contains(context, elem);
        };
        Sizzle.attr = function(elem, name) {
            // Set document vars if needed
            if ((elem.ownerDocument || elem) !== document) {
                setDocument(elem);
            }
            var fn = Expr.attrHandle[name.toLowerCase()], // Don't get fooled by Object.prototype properties (jQuery #13807)
            val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
            return val === undefined ? support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null : val;
        };
        Sizzle.error = function(msg) {
            throw new Error("Syntax error, unrecognized expression: " + msg);
        };
        /**
         * Document sorting and removing duplicates
         * @param {ArrayLike} results
         */
        Sizzle.uniqueSort = function(results) {
            var elem, duplicates = [], j = 0, i = 0;
            // Unless we *know* we can detect duplicates, assume their presence
            hasDuplicate = !support.detectDuplicates;
            sortInput = !support.sortStable && results.slice(0);
            results.sort(sortOrder);
            if (hasDuplicate) {
                while (elem = results[i++]) {
                    if (elem === results[i]) {
                        j = duplicates.push(i);
                    }
                }
                while (j--) {
                    results.splice(duplicates[j], 1);
                }
            }
            return results;
        };
        /**
         * Utility function for retrieving the text value of an array of DOM nodes
         * @param {Array|Element} elem
         */
        getText = Sizzle.getText = function(elem) {
            var node, ret = "", i = 0, nodeType = elem.nodeType;
            if (!nodeType) {
                // If no nodeType, this is expected to be an array
                for (;node = elem[i]; i++) {
                    // Do not traverse comment nodes
                    ret += getText(node);
                }
            } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
                // Use textContent for elements
                // innerText usage removed for consistency of new lines (see #11153)
                if (typeof elem.textContent === "string") {
                    return elem.textContent;
                } else {
                    // Traverse its children
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                        ret += getText(elem);
                    }
                }
            } else if (nodeType === 3 || nodeType === 4) {
                return elem.nodeValue;
            }
            // Do not include comment or processing instruction nodes
            return ret;
        };
        Expr = Sizzle.selectors = {
            // Can be adjusted by the user
            cacheLength: 50,
            createPseudo: markFunction,
            match: matchExpr,
            attrHandle: {},
            find: {},
            relative: {
                ">": {
                    dir: "parentNode",
                    first: true
                },
                " ": {
                    dir: "parentNode"
                },
                "+": {
                    dir: "previousSibling",
                    first: true
                },
                "~": {
                    dir: "previousSibling"
                }
            },
            preFilter: {
                ATTR: function(match) {
                    match[1] = match[1].replace(runescape, funescape);
                    // Move the given value to match[3] whether quoted or unquoted
                    match[3] = (match[4] || match[5] || "").replace(runescape, funescape);
                    if (match[2] === "~=") {
                        match[3] = " " + match[3] + " ";
                    }
                    return match.slice(0, 4);
                },
                CHILD: function(match) {
                    /* matches from matchExpr["CHILD"]
                     1 type (only|nth|...)
                     2 what (child|of-type)
                     3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
                     4 xn-component of xn+y argument ([+-]?\d*n|)
                     5 sign of xn-component
                     6 x of xn-component
                     7 sign of y-component
                     8 y of y-component
                     */
                    match[1] = match[1].toLowerCase();
                    if (match[1].slice(0, 3) === "nth") {
                        // nth-* requires argument
                        if (!match[3]) {
                            Sizzle.error(match[0]);
                        }
                        // numeric x and y parameters for Expr.filter.CHILD
                        // remember that false/true cast respectively to 0/1
                        match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                        match[5] = +(match[7] + match[8] || match[3] === "odd");
                    } else if (match[3]) {
                        Sizzle.error(match[0]);
                    }
                    return match;
                },
                PSEUDO: function(match) {
                    var excess, unquoted = !match[5] && match[2];
                    if (matchExpr["CHILD"].test(match[0])) {
                        return null;
                    }
                    // Accept quoted arguments as-is
                    if (match[3] && match[4] !== undefined) {
                        match[2] = match[4];
                    } else if (unquoted && rpseudo.test(unquoted) && (// Get excess from tokenize (recursively)
                    excess = tokenize(unquoted, true)) && (// advance to the next closing parenthesis
                    excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                        // excess is a negative index
                        match[0] = match[0].slice(0, excess);
                        match[2] = unquoted.slice(0, excess);
                    }
                    // Return only captures needed by the pseudo filter method (type and argument)
                    return match.slice(0, 3);
                }
            },
            filter: {
                TAG: function(nodeNameSelector) {
                    var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                    return nodeNameSelector === "*" ? function() {
                        return true;
                    } : function(elem) {
                        return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                    };
                },
                CLASS: function(className) {
                    var pattern = classCache[className + " "];
                    return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function(elem) {
                        return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "");
                    });
                },
                ATTR: function(name, operator, check) {
                    return function(elem) {
                        var result = Sizzle.attr(elem, name);
                        if (result == null) {
                            return operator === "!=";
                        }
                        if (!operator) {
                            return true;
                        }
                        result += "";
                        return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
                    };
                },
                CHILD: function(type, what, argument, first, last) {
                    var simple = type.slice(0, 3) !== "nth", forward = type.slice(-4) !== "last", ofType = what === "of-type";
                    return first === 1 && last === 0 ? // Shortcut for :nth-*(n)
                    function(elem) {
                        return !!elem.parentNode;
                    } : function(elem, context, xml) {
                        var cache, outerCache, node, diff, nodeIndex, start, dir = simple !== forward ? "nextSibling" : "previousSibling", parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType;
                        if (parent) {
                            // :(first|last|only)-(child|of-type)
                            if (simple) {
                                while (dir) {
                                    node = elem;
                                    while (node = node[dir]) {
                                        if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                                            return false;
                                        }
                                    }
                                    // Reverse direction for :only-* (if we haven't yet done so)
                                    start = dir = type === "only" && !start && "nextSibling";
                                }
                                return true;
                            }
                            start = [ forward ? parent.firstChild : parent.lastChild ];
                            // non-xml :nth-child(...) stores cache data on `parent`
                            if (forward && useCache) {
                                // Seek `elem` from a previously-cached index
                                outerCache = parent[expando] || (parent[expando] = {});
                                cache = outerCache[type] || [];
                                nodeIndex = cache[0] === dirruns && cache[1];
                                diff = cache[0] === dirruns && cache[2];
                                node = nodeIndex && parent.childNodes[nodeIndex];
                                while (node = ++nodeIndex && node && node[dir] || (// Fallback to seeking `elem` from the start
                                diff = nodeIndex = 0) || start.pop()) {
                                    // When found, cache indexes on `parent` and break
                                    if (node.nodeType === 1 && ++diff && node === elem) {
                                        outerCache[type] = [ dirruns, nodeIndex, diff ];
                                        break;
                                    }
                                }
                            } else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {
                                diff = cache[1];
                            } else {
                                // Use the same loop as above to seek `elem` from the start
                                while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                                    if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                                        // Cache the index of each encountered element
                                        if (useCache) {
                                            (node[expando] || (node[expando] = {}))[type] = [ dirruns, diff ];
                                        }
                                        if (node === elem) {
                                            break;
                                        }
                                    }
                                }
                            }
                            // Incorporate the offset, then check against cycle size
                            diff -= last;
                            return diff === first || diff % first === 0 && diff / first >= 0;
                        }
                    };
                },
                PSEUDO: function(pseudo, argument) {
                    // pseudo-class names are case-insensitive
                    // http://www.w3.org/TR/selectors/#pseudo-classes
                    // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
                    // Remember that setFilters inherits from pseudos
                    var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);
                    // The user may use createPseudo to indicate that
                    // arguments are needed to create the filter function
                    // just as Sizzle does
                    if (fn[expando]) {
                        return fn(argument);
                    }
                    // But maintain support for old signatures
                    if (fn.length > 1) {
                        args = [ pseudo, pseudo, "", argument ];
                        return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(seed, matches) {
                            var idx, matched = fn(seed, argument), i = matched.length;
                            while (i--) {
                                idx = indexOf.call(seed, matched[i]);
                                seed[idx] = !(matches[idx] = matched[i]);
                            }
                        }) : function(elem) {
                            return fn(elem, 0, args);
                        };
                    }
                    return fn;
                }
            },
            pseudos: {
                // Potentially complex pseudos
                not: markFunction(function(selector) {
                    // Trim the selector passed to compile
                    // to avoid treating leading and trailing
                    // spaces as combinators
                    var input = [], results = [], matcher = compile(selector.replace(rtrim, "$1"));
                    return matcher[expando] ? markFunction(function(seed, matches, context, xml) {
                        var elem, unmatched = matcher(seed, null, xml, []), i = seed.length;
                        // Match elements unmatched by `matcher`
                        while (i--) {
                            if (elem = unmatched[i]) {
                                seed[i] = !(matches[i] = elem);
                            }
                        }
                    }) : function(elem, context, xml) {
                        input[0] = elem;
                        matcher(input, null, xml, results);
                        return !results.pop();
                    };
                }),
                has: markFunction(function(selector) {
                    return function(elem) {
                        return Sizzle(selector, elem).length > 0;
                    };
                }),
                contains: markFunction(function(text) {
                    return function(elem) {
                        return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
                    };
                }),
                // "Whether an element is represented by a :lang() selector
                // is based solely on the element's language value
                // being equal to the identifier C,
                // or beginning with the identifier C immediately followed by "-".
                // The matching of C against the element's language value is performed case-insensitively.
                // The identifier C does not have to be a valid language name."
                // http://www.w3.org/TR/selectors/#lang-pseudo
                lang: markFunction(function(lang) {
                    // lang value must be a valid identifier
                    if (!ridentifier.test(lang || "")) {
                        Sizzle.error("unsupported lang: " + lang);
                    }
                    lang = lang.replace(runescape, funescape).toLowerCase();
                    return function(elem) {
                        var elemLang;
                        do {
                            if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                                elemLang = elemLang.toLowerCase();
                                return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
                            }
                        } while ((elem = elem.parentNode) && elem.nodeType === 1);
                        return false;
                    };
                }),
                // Miscellaneous
                target: function(elem) {
                    var hash = window.location && window.location.hash;
                    return hash && hash.slice(1) === elem.id;
                },
                root: function(elem) {
                    return elem === docElem;
                },
                focus: function(elem) {
                    return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
                },
                // Boolean properties
                enabled: function(elem) {
                    return elem.disabled === false;
                },
                disabled: function(elem) {
                    return elem.disabled === true;
                },
                checked: function(elem) {
                    // In CSS3, :checked should return both checked and selected elements
                    // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                    var nodeName = elem.nodeName.toLowerCase();
                    return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
                },
                selected: function(elem) {
                    // Accessing this property makes selected-by-default
                    // options in Safari work properly
                    if (elem.parentNode) {
                        elem.parentNode.selectedIndex;
                    }
                    return elem.selected === true;
                },
                // Contents
                empty: function(elem) {
                    // http://www.w3.org/TR/selectors/#empty-pseudo
                    // :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
                    //   not comment, processing instructions, or others
                    // Thanks to Diego Perini for the nodeName shortcut
                    //   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                        if (elem.nodeName > "@" || elem.nodeType === 3 || elem.nodeType === 4) {
                            return false;
                        }
                    }
                    return true;
                },
                parent: function(elem) {
                    return !Expr.pseudos["empty"](elem);
                },
                // Element/input types
                header: function(elem) {
                    return rheader.test(elem.nodeName);
                },
                input: function(elem) {
                    return rinputs.test(elem.nodeName);
                },
                button: function(elem) {
                    var name = elem.nodeName.toLowerCase();
                    return name === "input" && elem.type === "button" || name === "button";
                },
                text: function(elem) {
                    var attr;
                    // IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
                    // use getAttribute instead to test this case
                    return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === elem.type);
                },
                // Position-in-collection
                first: createPositionalPseudo(function() {
                    return [ 0 ];
                }),
                last: createPositionalPseudo(function(matchIndexes, length) {
                    return [ length - 1 ];
                }),
                eq: createPositionalPseudo(function(matchIndexes, length, argument) {
                    return [ argument < 0 ? argument + length : argument ];
                }),
                even: createPositionalPseudo(function(matchIndexes, length) {
                    var i = 0;
                    for (;i < length; i += 2) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),
                odd: createPositionalPseudo(function(matchIndexes, length) {
                    var i = 1;
                    for (;i < length; i += 2) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),
                lt: createPositionalPseudo(function(matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (;--i >= 0; ) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),
                gt: createPositionalPseudo(function(matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (;++i < length; ) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                })
            }
        };
        Expr.pseudos["nth"] = Expr.pseudos["eq"];
        // Add button/input type pseudos
        for (i in {
            radio: true,
            checkbox: true,
            file: true,
            password: true,
            image: true
        }) {
            Expr.pseudos[i] = createInputPseudo(i);
        }
        for (i in {
            submit: true,
            reset: true
        }) {
            Expr.pseudos[i] = createButtonPseudo(i);
        }
        // Easy API for creating new setFilters
        function setFilters() {}
        setFilters.prototype = Expr.filters = Expr.pseudos;
        Expr.setFilters = new setFilters();
        function tokenize(selector, parseOnly) {
            var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + " "];
            if (cached) {
                return parseOnly ? 0 : cached.slice(0);
            }
            soFar = selector;
            groups = [];
            preFilters = Expr.preFilter;
            while (soFar) {
                // Comma and first run
                if (!matched || (match = rcomma.exec(soFar))) {
                    if (match) {
                        // Don't consume trailing commas as valid
                        soFar = soFar.slice(match[0].length) || soFar;
                    }
                    groups.push(tokens = []);
                }
                matched = false;
                // Combinators
                if (match = rcombinators.exec(soFar)) {
                    matched = match.shift();
                    tokens.push({
                        value: matched,
                        // Cast descendant combinators to space
                        type: match[0].replace(rtrim, " ")
                    });
                    soFar = soFar.slice(matched.length);
                }
                // Filters
                for (type in Expr.filter) {
                    if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                        matched = match.shift();
                        tokens.push({
                            value: matched,
                            type: type,
                            matches: match
                        });
                        soFar = soFar.slice(matched.length);
                    }
                }
                if (!matched) {
                    break;
                }
            }
            // Return the length of the invalid excess
            // if we're just parsing
            // Otherwise, throw an error or return tokens
            return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : // Cache the tokens
            tokenCache(selector, groups).slice(0);
        }
        function toSelector(tokens) {
            var i = 0, len = tokens.length, selector = "";
            for (;i < len; i++) {
                selector += tokens[i].value;
            }
            return selector;
        }
        function addCombinator(matcher, combinator, base) {
            var dir = combinator.dir, checkNonElements = base && dir === "parentNode", doneName = done++;
            return combinator.first ? // Check against closest ancestor/preceding element
            function(elem, context, xml) {
                while (elem = elem[dir]) {
                    if (elem.nodeType === 1 || checkNonElements) {
                        return matcher(elem, context, xml);
                    }
                }
            } : // Check against all ancestor/preceding elements
            function(elem, context, xml) {
                var data, cache, outerCache, dirkey = dirruns + " " + doneName;
                // We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
                if (xml) {
                    while (elem = elem[dir]) {
                        if (elem.nodeType === 1 || checkNonElements) {
                            if (matcher(elem, context, xml)) {
                                return true;
                            }
                        }
                    }
                } else {
                    while (elem = elem[dir]) {
                        if (elem.nodeType === 1 || checkNonElements) {
                            outerCache = elem[expando] || (elem[expando] = {});
                            if ((cache = outerCache[dir]) && cache[0] === dirkey) {
                                if ((data = cache[1]) === true || data === cachedruns) {
                                    return data === true;
                                }
                            } else {
                                cache = outerCache[dir] = [ dirkey ];
                                cache[1] = matcher(elem, context, xml) || cachedruns;
                                if (cache[1] === true) {
                                    return true;
                                }
                            }
                        }
                    }
                }
            };
        }
        function elementMatcher(matchers) {
            return matchers.length > 1 ? function(elem, context, xml) {
                var i = matchers.length;
                while (i--) {
                    if (!matchers[i](elem, context, xml)) {
                        return false;
                    }
                }
                return true;
            } : matchers[0];
        }
        function condense(unmatched, map, filter, context, xml) {
            var elem, newUnmatched = [], i = 0, len = unmatched.length, mapped = map != null;
            for (;i < len; i++) {
                if (elem = unmatched[i]) {
                    if (!filter || filter(elem, context, xml)) {
                        newUnmatched.push(elem);
                        if (mapped) {
                            map.push(i);
                        }
                    }
                }
            }
            return newUnmatched;
        }
        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
            if (postFilter && !postFilter[expando]) {
                postFilter = setMatcher(postFilter);
            }
            if (postFinder && !postFinder[expando]) {
                postFinder = setMatcher(postFinder, postSelector);
            }
            return markFunction(function(seed, results, context, xml) {
                var temp, i, elem, preMap = [], postMap = [], preexisting = results.length, // Get initial elements from seed or context
                elems = seed || multipleContexts(selector || "*", context.nodeType ? [ context ] : context, []), // Prefilter to get matcher input, preserving a map for seed-results synchronization
                matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
                postFinder || (seed ? preFilter : preexisting || postFilter) ? // ...intermediate processing is necessary
                [] : // ...otherwise use results directly
                results : matcherIn;
                // Find primary matches
                if (matcher) {
                    matcher(matcherIn, matcherOut, context, xml);
                }
                // Apply postFilter
                if (postFilter) {
                    temp = condense(matcherOut, postMap);
                    postFilter(temp, [], context, xml);
                    // Un-match failing elements by moving them back to matcherIn
                    i = temp.length;
                    while (i--) {
                        if (elem = temp[i]) {
                            matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                        }
                    }
                }
                if (seed) {
                    if (postFinder || preFilter) {
                        if (postFinder) {
                            // Get the final matcherOut by condensing this intermediate into postFinder contexts
                            temp = [];
                            i = matcherOut.length;
                            while (i--) {
                                if (elem = matcherOut[i]) {
                                    // Restore matcherIn since elem is not yet a final match
                                    temp.push(matcherIn[i] = elem);
                                }
                            }
                            postFinder(null, matcherOut = [], temp, xml);
                        }
                        // Move matched elements from seed to results to keep them synchronized
                        i = matcherOut.length;
                        while (i--) {
                            if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf.call(seed, elem) : preMap[i]) > -1) {
                                seed[temp] = !(results[temp] = elem);
                            }
                        }
                    }
                } else {
                    matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
                    if (postFinder) {
                        postFinder(null, results, matcherOut, xml);
                    } else {
                        push.apply(results, matcherOut);
                    }
                }
            });
        }
        function matcherFromTokens(tokens) {
            var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[" "], i = leadingRelative ? 1 : 0, // The foundational matcher ensures that elements are reachable from top-level context(s)
            matchContext = addCombinator(function(elem) {
                return elem === checkContext;
            }, implicitRelative, true), matchAnyContext = addCombinator(function(elem) {
                return indexOf.call(checkContext, elem) > -1;
            }, implicitRelative, true), matchers = [ function(elem, context, xml) {
                return !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
            } ];
            for (;i < len; i++) {
                if (matcher = Expr.relative[tokens[i].type]) {
                    matchers = [ addCombinator(elementMatcher(matchers), matcher) ];
                } else {
                    matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
                    // Return special upon seeing a positional matcher
                    if (matcher[expando]) {
                        // Find the next relative operator (if any) for proper handling
                        j = ++i;
                        for (;j < len; j++) {
                            if (Expr.relative[tokens[j].type]) {
                                break;
                            }
                        }
                        return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(// If the preceding token was a descendant combinator, insert an implicit any-element `*`
                        tokens.slice(0, i - 1).concat({
                            value: tokens[i - 2].type === " " ? "*" : ""
                        })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
                    }
                    matchers.push(matcher);
                }
            }
            return elementMatcher(matchers);
        }
        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
            // A counter to specify which element is currently being matched
            var matcherCachedRuns = 0, bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function(seed, context, xml, results, expandContext) {
                var elem, j, matcher, setMatched = [], matchedCount = 0, i = "0", unmatched = seed && [], outermost = expandContext != null, contextBackup = outermostContext, // We must always have either seed elements or context
                elems = seed || byElement && Expr.find["TAG"]("*", expandContext && context.parentNode || context), // Use integer dirruns iff this is the outermost matcher
                dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || .1;
                if (outermost) {
                    outermostContext = context !== document && context;
                    cachedruns = matcherCachedRuns;
                }
                // Add elements passing elementMatchers directly to results
                // Keep `i` a string if there are no elements so `matchedCount` will be "00" below
                for (;(elem = elems[i]) != null; i++) {
                    if (byElement && elem) {
                        j = 0;
                        while (matcher = elementMatchers[j++]) {
                            if (matcher(elem, context, xml)) {
                                results.push(elem);
                                break;
                            }
                        }
                        if (outermost) {
                            dirruns = dirrunsUnique;
                            cachedruns = ++matcherCachedRuns;
                        }
                    }
                    // Track unmatched elements for set filters
                    if (bySet) {
                        // They will have gone through all possible matchers
                        if (elem = !matcher && elem) {
                            matchedCount--;
                        }
                        // Lengthen the array for every element, matched or not
                        if (seed) {
                            unmatched.push(elem);
                        }
                    }
                }
                // Apply set filters to unmatched elements
                matchedCount += i;
                if (bySet && i !== matchedCount) {
                    j = 0;
                    while (matcher = setMatchers[j++]) {
                        matcher(unmatched, setMatched, context, xml);
                    }
                    if (seed) {
                        // Reintegrate element matches to eliminate the need for sorting
                        if (matchedCount > 0) {
                            while (i--) {
                                if (!(unmatched[i] || setMatched[i])) {
                                    setMatched[i] = pop.call(results);
                                }
                            }
                        }
                        // Discard index placeholder values to get only actual matches
                        setMatched = condense(setMatched);
                    }
                    // Add matches to results
                    push.apply(results, setMatched);
                    // Seedless set matches succeeding multiple successful matchers stipulate sorting
                    if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                        Sizzle.uniqueSort(results);
                    }
                }
                // Override manipulation of globals by nested matchers
                if (outermost) {
                    dirruns = dirrunsUnique;
                    outermostContext = contextBackup;
                }
                return unmatched;
            };
            return bySet ? markFunction(superMatcher) : superMatcher;
        }
        compile = Sizzle.compile = function(selector, group) {
            var i, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + " "];
            if (!cached) {
                // Generate a function of recursive functions that can be used to check each element
                if (!group) {
                    group = tokenize(selector);
                }
                i = group.length;
                while (i--) {
                    cached = matcherFromTokens(group[i]);
                    if (cached[expando]) {
                        setMatchers.push(cached);
                    } else {
                        elementMatchers.push(cached);
                    }
                }
                // Cache the compiled function
                cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
            }
            return cached;
        };
        function multipleContexts(selector, contexts, results) {
            var i = 0, len = contexts.length;
            for (;i < len; i++) {
                Sizzle(selector, contexts[i], results);
            }
            return results;
        }
        function select(selector, context, results, seed) {
            var i, tokens, token, type, find, match = tokenize(selector);
            if (!seed) {
                // Try to minimize operations if there is only one group
                if (match.length === 1) {
                    // Take a shortcut and set the context if the root selector is an ID
                    tokens = match[0] = match[0].slice(0);
                    if (tokens.length > 2 && (token = tokens[0]).type === "ID" && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
                        context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
                        if (!context) {
                            return results;
                        }
                        selector = selector.slice(tokens.shift().value.length);
                    }
                    // Fetch a seed set for right-to-left matching
                    i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
                    while (i--) {
                        token = tokens[i];
                        // Abort if we hit a combinator
                        if (Expr.relative[type = token.type]) {
                            break;
                        }
                        if (find = Expr.find[type]) {
                            // Search, expanding context for leading sibling combinators
                            if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && context.parentNode || context)) {
                                // If seed is empty or no tokens remain, we can return early
                                tokens.splice(i, 1);
                                selector = seed.length && toSelector(tokens);
                                if (!selector) {
                                    push.apply(results, seed);
                                    return results;
                                }
                                break;
                            }
                        }
                    }
                }
            }
            // Compile and execute a filtering function
            // Provide `match` to avoid retokenization if we modified the selector above
            compile(selector, match)(seed, context, !documentIsHTML, results, rsibling.test(selector));
            return results;
        }
        // One-time assignments
        // Sort stability
        support.sortStable = expando.split("").sort(sortOrder).join("") === expando;
        // Support: Chrome<14
        // Always assume duplicates if they aren't passed to the comparison function
        support.detectDuplicates = hasDuplicate;
        // Initialize against the default document
        setDocument();
        // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
        // Detached nodes confoundingly follow *each other*
        support.sortDetached = assert(function(div1) {
            // Should return 1, but returns 4 (following)
            return div1.compareDocumentPosition(document.createElement("div")) & 1;
        });
        // Support: IE<8
        // Prevent attribute/property "interpolation"
        // http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
        if (!assert(function(div) {
            div.innerHTML = "<a href='#'></a>";
            return div.firstChild.getAttribute("href") === "#";
        })) {
            addHandle("type|href|height|width", function(elem, name, isXML) {
                if (!isXML) {
                    return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
                }
            });
        }
        // Support: IE<9
        // Use defaultValue in place of getAttribute("value")
        if (!support.attributes || !assert(function(div) {
            div.innerHTML = "<input/>";
            div.firstChild.setAttribute("value", "");
            return div.firstChild.getAttribute("value") === "";
        })) {
            addHandle("value", function(elem, name, isXML) {
                if (!isXML && elem.nodeName.toLowerCase() === "input") {
                    return elem.defaultValue;
                }
            });
        }
        // Support: IE<9
        // Use getAttributeNode to fetch booleans when getAttribute lies
        if (!assert(function(div) {
            return div.getAttribute("disabled") == null;
        })) {
            addHandle(booleans, function(elem, name, isXML) {
                var val;
                if (!isXML) {
                    return (val = elem.getAttributeNode(name)) && val.specified ? val.value : elem[name] === true ? name.toLowerCase() : null;
                }
            });
        }
        jQuery.find = Sizzle;
        jQuery.expr = Sizzle.selectors;
        jQuery.expr[":"] = jQuery.expr.pseudos;
        jQuery.unique = Sizzle.uniqueSort;
        jQuery.text = Sizzle.getText;
        jQuery.isXMLDoc = Sizzle.isXML;
        jQuery.contains = Sizzle.contains;
    })(window);
    // String to Object options format cache
    var optionsCache = {};
    // Convert String-formatted options into Object-formatted ones and store in cache
    function createOptions(options) {
        var object = optionsCache[options] = {};
        jQuery.each(options.match(core_rnotwhite) || [], function(_, flag) {
            object[flag] = true;
        });
        return object;
    }
    /*
     * Create a callback list using the following parameters:
     *
     *	options: an optional list of space-separated options that will change how
     *			the callback list behaves or a more traditional option object
     *
     * By default a callback list will act like an event callback list and can be
     * "fired" multiple times.
     *
     * Possible options:
     *
     *	once:			will ensure the callback list can only be fired once (like a Deferred)
     *
     *	memory:			will keep track of previous values and will call any callback added
     *					after the list has been fired right away with the latest "memorized"
     *					values (like a Deferred)
     *
     *	unique:			will ensure a callback can only be added once (no duplicate in the list)
     *
     *	stopOnFalse:	interrupt callings when a callback returns false
     *
     */
    jQuery.Callbacks = function(options) {
        // Convert options from String-formatted to Object-formatted if needed
        // (we check in cache first)
        options = typeof options === "string" ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options);
        var // Flag to know if list is currently firing
        firing, // Last fire value (for non-forgettable lists)
        memory, // Flag to know if list was already fired
        fired, // End of the loop when firing
        firingLength, // Index of currently firing callback (modified by remove if needed)
        firingIndex, // First callback to fire (used internally by add and fireWith)
        firingStart, // Actual callback list
        list = [], // Stack of fire calls for repeatable lists
        stack = !options.once && [], // Fire callbacks
        fire = function(data) {
            memory = options.memory && data;
            fired = true;
            firingIndex = firingStart || 0;
            firingStart = 0;
            firingLength = list.length;
            firing = true;
            for (;list && firingIndex < firingLength; firingIndex++) {
                if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
                    memory = false;
                    // To prevent further calls using add
                    break;
                }
            }
            firing = false;
            if (list) {
                if (stack) {
                    if (stack.length) {
                        fire(stack.shift());
                    }
                } else if (memory) {
                    list = [];
                } else {
                    self.disable();
                }
            }
        }, // Actual Callbacks object
        self = {
            // Add a callback or a collection of callbacks to the list
            add: function() {
                if (list) {
                    // First, we save the current length
                    var start = list.length;
                    (function add(args) {
                        jQuery.each(args, function(_, arg) {
                            var type = jQuery.type(arg);
                            if (type === "function") {
                                if (!options.unique || !self.has(arg)) {
                                    list.push(arg);
                                }
                            } else if (arg && arg.length && type !== "string") {
                                // Inspect recursively
                                add(arg);
                            }
                        });
                    })(arguments);
                    // Do we need to add the callbacks to the
                    // current firing batch?
                    if (firing) {
                        firingLength = list.length;
                    } else if (memory) {
                        firingStart = start;
                        fire(memory);
                    }
                }
                return this;
            },
            // Remove a callback from the list
            remove: function() {
                if (list) {
                    jQuery.each(arguments, function(_, arg) {
                        var index;
                        while ((index = jQuery.inArray(arg, list, index)) > -1) {
                            list.splice(index, 1);
                            // Handle firing indexes
                            if (firing) {
                                if (index <= firingLength) {
                                    firingLength--;
                                }
                                if (index <= firingIndex) {
                                    firingIndex--;
                                }
                            }
                        }
                    });
                }
                return this;
            },
            // Check if a given callback is in the list.
            // If no argument is given, return whether or not list has callbacks attached.
            has: function(fn) {
                return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length);
            },
            // Remove all callbacks from the list
            empty: function() {
                list = [];
                firingLength = 0;
                return this;
            },
            // Have the list do nothing anymore
            disable: function() {
                list = stack = memory = undefined;
                return this;
            },
            // Is it disabled?
            disabled: function() {
                return !list;
            },
            // Lock the list in its current state
            lock: function() {
                stack = undefined;
                if (!memory) {
                    self.disable();
                }
                return this;
            },
            // Is it locked?
            locked: function() {
                return !stack;
            },
            // Call all callbacks with the given context and arguments
            fireWith: function(context, args) {
                if (list && (!fired || stack)) {
                    args = args || [];
                    args = [ context, args.slice ? args.slice() : args ];
                    if (firing) {
                        stack.push(args);
                    } else {
                        fire(args);
                    }
                }
                return this;
            },
            // Call all the callbacks with the given arguments
            fire: function() {
                self.fireWith(this, arguments);
                return this;
            },
            // To know if the callbacks have already been called at least once
            fired: function() {
                return !!fired;
            }
        };
        return self;
    };
    jQuery.extend({
        Deferred: function(func) {
            var tuples = [ // action, add listener, listener list, final state
            [ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ], [ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ], [ "notify", "progress", jQuery.Callbacks("memory") ] ], state = "pending", promise = {
                state: function() {
                    return state;
                },
                always: function() {
                    deferred.done(arguments).fail(arguments);
                    return this;
                },
                then: function() {
                    var fns = arguments;
                    return jQuery.Deferred(function(newDefer) {
                        jQuery.each(tuples, function(i, tuple) {
                            var action = tuple[0], fn = jQuery.isFunction(fns[i]) && fns[i];
                            // deferred[ done | fail | progress ] for forwarding actions to newDefer
                            deferred[tuple[1]](function() {
                                var returned = fn && fn.apply(this, arguments);
                                if (returned && jQuery.isFunction(returned.promise)) {
                                    returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);
                                } else {
                                    newDefer[action + "With"](this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments);
                                }
                            });
                        });
                        fns = null;
                    }).promise();
                },
                // Get a promise for this deferred
                // If obj is provided, the promise aspect is added to the object
                promise: function(obj) {
                    return obj != null ? jQuery.extend(obj, promise) : promise;
                }
            }, deferred = {};
            // Keep pipe for back-compat
            promise.pipe = promise.then;
            // Add list-specific methods
            jQuery.each(tuples, function(i, tuple) {
                var list = tuple[2], stateString = tuple[3];
                // promise[ done | fail | progress ] = list.add
                promise[tuple[1]] = list.add;
                // Handle state
                if (stateString) {
                    list.add(function() {
                        // state = [ resolved | rejected ]
                        state = stateString;
                    }, tuples[i ^ 1][2].disable, tuples[2][2].lock);
                }
                // deferred[ resolve | reject | notify ]
                deferred[tuple[0]] = function() {
                    deferred[tuple[0] + "With"](this === deferred ? promise : this, arguments);
                    return this;
                };
                deferred[tuple[0] + "With"] = list.fireWith;
            });
            // Make the deferred a promise
            promise.promise(deferred);
            // Call given func if any
            if (func) {
                func.call(deferred, deferred);
            }
            // All done!
            return deferred;
        },
        // Deferred helper
        when: function(subordinate) {
            var i = 0, resolveValues = core_slice.call(arguments), length = resolveValues.length, // the count of uncompleted subordinates
            remaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0, // the master Deferred. If resolveValues consist of only a single Deferred, just use that.
            deferred = remaining === 1 ? subordinate : jQuery.Deferred(), // Update function for both resolve and progress values
            updateFunc = function(i, contexts, values) {
                return function(value) {
                    contexts[i] = this;
                    values[i] = arguments.length > 1 ? core_slice.call(arguments) : value;
                    if (values === progressValues) {
                        deferred.notifyWith(contexts, values);
                    } else if (!--remaining) {
                        deferred.resolveWith(contexts, values);
                    }
                };
            }, progressValues, progressContexts, resolveContexts;
            // add listeners to Deferred subordinates; treat others as resolved
            if (length > 1) {
                progressValues = new Array(length);
                progressContexts = new Array(length);
                resolveContexts = new Array(length);
                for (;i < length; i++) {
                    if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
                        resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues));
                    } else {
                        --remaining;
                    }
                }
            }
            // if we're not waiting on anything, resolve the master
            if (!remaining) {
                deferred.resolveWith(resolveContexts, resolveValues);
            }
            return deferred.promise();
        }
    });
    jQuery.support = function(support) {
        var all, a, input, select, fragment, opt, eventName, isSupported, i, div = document.createElement("div");
        // Setup
        div.setAttribute("className", "t");
        div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
        // Finish early in limited (non-browser) environments
        all = div.getElementsByTagName("*") || [];
        a = div.getElementsByTagName("a")[0];
        if (!a || !a.style || !all.length) {
            return support;
        }
        // First batch of tests
        select = document.createElement("select");
        opt = select.appendChild(document.createElement("option"));
        input = div.getElementsByTagName("input")[0];
        a.style.cssText = "top:1px;float:left;opacity:.5";
        // Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
        support.getSetAttribute = div.className !== "t";
        // IE strips leading whitespace when .innerHTML is used
        support.leadingWhitespace = div.firstChild.nodeType === 3;
        // Make sure that tbody elements aren't automatically inserted
        // IE will insert them into empty tables
        support.tbody = !div.getElementsByTagName("tbody").length;
        // Make sure that link elements get serialized correctly by innerHTML
        // This requires a wrapper element in IE
        support.htmlSerialize = !!div.getElementsByTagName("link").length;
        // Get the style information from getAttribute
        // (IE uses .cssText instead)
        support.style = /top/.test(a.getAttribute("style"));
        // Make sure that URLs aren't manipulated
        // (IE normalizes it by default)
        support.hrefNormalized = a.getAttribute("href") === "/a";
        // Make sure that element opacity exists
        // (IE uses filter instead)
        // Use a regex to work around a WebKit issue. See #5145
        support.opacity = /^0.5/.test(a.style.opacity);
        // Verify style float existence
        // (IE uses styleFloat instead of cssFloat)
        support.cssFloat = !!a.style.cssFloat;
        // Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
        support.checkOn = !!input.value;
        // Make sure that a selected-by-default option has a working selected property.
        // (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
        support.optSelected = opt.selected;
        // Tests for enctype support on a form (#6743)
        support.enctype = !!document.createElement("form").enctype;
        // Makes sure cloning an html5 element does not cause problems
        // Where outerHTML is undefined, this still works
        support.html5Clone = document.createElement("nav").cloneNode(true).outerHTML !== "<:nav></:nav>";
        // Will be defined later
        support.inlineBlockNeedsLayout = false;
        support.shrinkWrapBlocks = false;
        support.pixelPosition = false;
        support.deleteExpando = true;
        support.noCloneEvent = true;
        support.reliableMarginRight = true;
        support.boxSizingReliable = true;
        // Make sure checked status is properly cloned
        input.checked = true;
        support.noCloneChecked = input.cloneNode(true).checked;
        // Make sure that the options inside disabled selects aren't marked as disabled
        // (WebKit marks them as disabled)
        select.disabled = true;
        support.optDisabled = !opt.disabled;
        // Support: IE<9
        try {
            delete div.test;
        } catch (e) {
            support.deleteExpando = false;
        }
        // Check if we can trust getAttribute("value")
        input = document.createElement("input");
        input.setAttribute("value", "");
        support.input = input.getAttribute("value") === "";
        // Check if an input maintains its value after becoming a radio
        input.value = "t";
        input.setAttribute("type", "radio");
        support.radioValue = input.value === "t";
        // #11217 - WebKit loses check when the name is after the checked attribute
        input.setAttribute("checked", "t");
        input.setAttribute("name", "t");
        fragment = document.createDocumentFragment();
        fragment.appendChild(input);
        // Check if a disconnected checkbox will retain its checked
        // value of true after appended to the DOM (IE6/7)
        support.appendChecked = input.checked;
        // WebKit doesn't clone checked state correctly in fragments
        support.checkClone = fragment.cloneNode(true).cloneNode(true).lastChild.checked;
        // Support: IE<9
        // Opera does not clone events (and typeof div.attachEvent === undefined).
        // IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
        if (div.attachEvent) {
            div.attachEvent("onclick", function() {
                support.noCloneEvent = false;
            });
            div.cloneNode(true).click();
        }
        // Support: IE<9 (lack submit/change bubble), Firefox 17+ (lack focusin event)
        // Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
        for (i in {
            submit: true,
            change: true,
            focusin: true
        }) {
            div.setAttribute(eventName = "on" + i, "t");
            support[i + "Bubbles"] = eventName in window || div.attributes[eventName].expando === false;
        }
        div.style.backgroundClip = "content-box";
        div.cloneNode(true).style.backgroundClip = "";
        support.clearCloneStyle = div.style.backgroundClip === "content-box";
        // Support: IE<9
        // Iteration over object's inherited properties before its own.
        for (i in jQuery(support)) {
            break;
        }
        support.ownLast = i !== "0";
        // Run tests that need a body at doc ready
        jQuery(function() {
            var container, marginDiv, tds, divReset = "padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;", body = document.getElementsByTagName("body")[0];
            if (!body) {
                // Return for frameset docs that don't have a body
                return;
            }
            container = document.createElement("div");
            container.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px";
            body.appendChild(container).appendChild(div);
            // Support: IE8
            // Check if table cells still have offsetWidth/Height when they are set
            // to display:none and there are still other visible table cells in a
            // table row; if so, offsetWidth/Height are not reliable for use when
            // determining if an element has been hidden directly using
            // display:none (it is still safe to use offsets if a parent element is
            // hidden; don safety goggles and see bug #4512 for more information).
            div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
            tds = div.getElementsByTagName("td");
            tds[0].style.cssText = "padding:0;margin:0;border:0;display:none";
            isSupported = tds[0].offsetHeight === 0;
            tds[0].style.display = "";
            tds[1].style.display = "none";
            // Support: IE8
            // Check if empty table cells still have offsetWidth/Height
            support.reliableHiddenOffsets = isSupported && tds[0].offsetHeight === 0;
            // Check box-sizing and margin behavior.
            div.innerHTML = "";
            div.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";
            // Workaround failing boxSizing test due to offsetWidth returning wrong value
            // with some non-1 values of body zoom, ticket #13543
            jQuery.swap(body, body.style.zoom != null ? {
                zoom: 1
            } : {}, function() {
                support.boxSizing = div.offsetWidth === 4;
            });
            // Use window.getComputedStyle because jsdom on node.js will break without it.
            if (window.getComputedStyle) {
                support.pixelPosition = (window.getComputedStyle(div, null) || {}).top !== "1%";
                support.boxSizingReliable = (window.getComputedStyle(div, null) || {
                    width: "4px"
                }).width === "4px";
                // Check if div with explicit width and no margin-right incorrectly
                // gets computed margin-right based on width of container. (#3333)
                // Fails in WebKit before Feb 2011 nightlies
                // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
                marginDiv = div.appendChild(document.createElement("div"));
                marginDiv.style.cssText = div.style.cssText = divReset;
                marginDiv.style.marginRight = marginDiv.style.width = "0";
                div.style.width = "1px";
                support.reliableMarginRight = !parseFloat((window.getComputedStyle(marginDiv, null) || {}).marginRight);
            }
            if (typeof div.style.zoom !== core_strundefined) {
                // Support: IE<8
                // Check if natively block-level elements act like inline-block
                // elements when setting their display to 'inline' and giving
                // them layout
                div.innerHTML = "";
                div.style.cssText = divReset + "width:1px;padding:1px;display:inline;zoom:1";
                support.inlineBlockNeedsLayout = div.offsetWidth === 3;
                // Support: IE6
                // Check if elements with layout shrink-wrap their children
                div.style.display = "block";
                div.innerHTML = "<div></div>";
                div.firstChild.style.width = "5px";
                support.shrinkWrapBlocks = div.offsetWidth !== 3;
                if (support.inlineBlockNeedsLayout) {
                    // Prevent IE 6 from affecting layout for positioned elements #11048
                    // Prevent IE from shrinking the body in IE 7 mode #12869
                    // Support: IE<8
                    body.style.zoom = 1;
                }
            }
            body.removeChild(container);
            // Null elements to avoid leaks in IE
            container = div = tds = marginDiv = null;
        });
        // Null elements to avoid leaks in IE
        all = select = fragment = opt = a = input = null;
        return support;
    }({});
    var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/, rmultiDash = /([A-Z])/g;
    function internalData(elem, name, data, pvt) {
        if (!jQuery.acceptData(elem)) {
            return;
        }
        var ret, thisCache, internalKey = jQuery.expando, // We have to handle DOM nodes and JS objects differently because IE6-7
        // can't GC object references properly across the DOM-JS boundary
        isNode = elem.nodeType, // Only DOM nodes need the global jQuery cache; JS object data is
        // attached directly to the object so GC can occur automatically
        cache = isNode ? jQuery.cache : elem, // Only defining an ID for JS objects if its cache already exists allows
        // the code to shortcut on the same path as a DOM node with no cache
        id = isNode ? elem[internalKey] : elem[internalKey] && internalKey;
        // Avoid doing any more work than we need to when trying to get data on an
        // object that has no data at all
        if ((!id || !cache[id] || !pvt && !cache[id].data) && data === undefined && typeof name === "string") {
            return;
        }
        if (!id) {
            // Only DOM nodes need a new unique ID for each element since their data
            // ends up in the global cache
            if (isNode) {
                id = elem[internalKey] = core_deletedIds.pop() || jQuery.guid++;
            } else {
                id = internalKey;
            }
        }
        if (!cache[id]) {
            // Avoid exposing jQuery metadata on plain JS objects when the object
            // is serialized using JSON.stringify
            cache[id] = isNode ? {} : {
                toJSON: jQuery.noop
            };
        }
        // An object can be passed to jQuery.data instead of a key/value pair; this gets
        // shallow copied over onto the existing cache
        if (typeof name === "object" || typeof name === "function") {
            if (pvt) {
                cache[id] = jQuery.extend(cache[id], name);
            } else {
                cache[id].data = jQuery.extend(cache[id].data, name);
            }
        }
        thisCache = cache[id];
        // jQuery data() is stored in a separate object inside the object's internal data
        // cache in order to avoid key collisions between internal data and user-defined
        // data.
        if (!pvt) {
            if (!thisCache.data) {
                thisCache.data = {};
            }
            thisCache = thisCache.data;
        }
        if (data !== undefined) {
            thisCache[jQuery.camelCase(name)] = data;
        }
        // Check for both converted-to-camel and non-converted data property names
        // If a data property was specified
        if (typeof name === "string") {
            // First Try to find as-is property data
            ret = thisCache[name];
            // Test for null|undefined property data
            if (ret == null) {
                // Try to find the camelCased property
                ret = thisCache[jQuery.camelCase(name)];
            }
        } else {
            ret = thisCache;
        }
        return ret;
    }
    function internalRemoveData(elem, name, pvt) {
        if (!jQuery.acceptData(elem)) {
            return;
        }
        var thisCache, i, isNode = elem.nodeType, // See jQuery.data for more information
        cache = isNode ? jQuery.cache : elem, id = isNode ? elem[jQuery.expando] : jQuery.expando;
        // If there is already no cache entry for this object, there is no
        // purpose in continuing
        if (!cache[id]) {
            return;
        }
        if (name) {
            thisCache = pvt ? cache[id] : cache[id].data;
            if (thisCache) {
                // Support array or space separated string names for data keys
                if (!jQuery.isArray(name)) {
                    // try the string as a key before any manipulation
                    if (name in thisCache) {
                        name = [ name ];
                    } else {
                        // split the camel cased version by spaces unless a key with the spaces exists
                        name = jQuery.camelCase(name);
                        if (name in thisCache) {
                            name = [ name ];
                        } else {
                            name = name.split(" ");
                        }
                    }
                } else {
                    // If "name" is an array of keys...
                    // When data is initially created, via ("key", "val") signature,
                    // keys will be converted to camelCase.
                    // Since there is no way to tell _how_ a key was added, remove
                    // both plain key and camelCase key. #12786
                    // This will only penalize the array argument path.
                    name = name.concat(jQuery.map(name, jQuery.camelCase));
                }
                i = name.length;
                while (i--) {
                    delete thisCache[name[i]];
                }
                // If there is no data left in the cache, we want to continue
                // and let the cache object itself get destroyed
                if (pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache)) {
                    return;
                }
            }
        }
        // See jQuery.data for more information
        if (!pvt) {
            delete cache[id].data;
            // Don't destroy the parent cache unless the internal data object
            // had been the only thing left in it
            if (!isEmptyDataObject(cache[id])) {
                return;
            }
        }
        // Destroy the cache
        if (isNode) {
            jQuery.cleanData([ elem ], true);
        } else if (jQuery.support.deleteExpando || cache != cache.window) {
            /* jshint eqeqeq: true */
            delete cache[id];
        } else {
            cache[id] = null;
        }
    }
    jQuery.extend({
        cache: {},
        // The following elements throw uncatchable exceptions if you
        // attempt to add expando properties to them.
        noData: {
            applet: true,
            embed: true,
            // Ban all objects except for Flash (which handle expandos)
            object: "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
        },
        hasData: function(elem) {
            elem = elem.nodeType ? jQuery.cache[elem[jQuery.expando]] : elem[jQuery.expando];
            return !!elem && !isEmptyDataObject(elem);
        },
        data: function(elem, name, data) {
            return internalData(elem, name, data);
        },
        removeData: function(elem, name) {
            return internalRemoveData(elem, name);
        },
        // For internal use only.
        _data: function(elem, name, data) {
            return internalData(elem, name, data, true);
        },
        _removeData: function(elem, name) {
            return internalRemoveData(elem, name, true);
        },
        // A method for determining if a DOM node can handle the data expando
        acceptData: function(elem) {
            // Do not set data on non-element because it will not be cleared (#8335).
            if (elem.nodeType && elem.nodeType !== 1 && elem.nodeType !== 9) {
                return false;
            }
            var noData = elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()];
            // nodes accept data unless otherwise specified; rejection can be conditional
            return !noData || noData !== true && elem.getAttribute("classid") === noData;
        }
    });
    jQuery.fn.extend({
        data: function(key, value) {
            var attrs, name, data = null, i = 0, elem = this[0];
            // Special expections of .data basically thwart jQuery.access,
            // so implement the relevant behavior ourselves
            // Gets all values
            if (key === undefined) {
                if (this.length) {
                    data = jQuery.data(elem);
                    if (elem.nodeType === 1 && !jQuery._data(elem, "parsedAttrs")) {
                        attrs = elem.attributes;
                        for (;i < attrs.length; i++) {
                            name = attrs[i].name;
                            if (name.indexOf("data-") === 0) {
                                name = jQuery.camelCase(name.slice(5));
                                dataAttr(elem, name, data[name]);
                            }
                        }
                        jQuery._data(elem, "parsedAttrs", true);
                    }
                }
                return data;
            }
            // Sets multiple values
            if (typeof key === "object") {
                return this.each(function() {
                    jQuery.data(this, key);
                });
            }
            return arguments.length > 1 ? // Sets one value
            this.each(function() {
                jQuery.data(this, key, value);
            }) : // Gets one value
            // Try to fetch any internally stored data first
            elem ? dataAttr(elem, key, jQuery.data(elem, key)) : null;
        },
        removeData: function(key) {
            return this.each(function() {
                jQuery.removeData(this, key);
            });
        }
    });
    function dataAttr(elem, key, data) {
        // If nothing was found internally, try to fetch any
        // data from the HTML5 data-* attribute
        if (data === undefined && elem.nodeType === 1) {
            var name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();
            data = elem.getAttribute(name);
            if (typeof data === "string") {
                try {
                    data = data === "true" ? true : data === "false" ? false : data === "null" ? null : // Only convert to a number if it doesn't change the string
                    +data + "" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;
                } catch (e) {}
                // Make sure we set the data so it isn't changed later
                jQuery.data(elem, key, data);
            } else {
                data = undefined;
            }
        }
        return data;
    }
    // checks a cache object for emptiness
    function isEmptyDataObject(obj) {
        var name;
        for (name in obj) {
            // if the public data object is empty, the private is still empty
            if (name === "data" && jQuery.isEmptyObject(obj[name])) {
                continue;
            }
            if (name !== "toJSON") {
                return false;
            }
        }
        return true;
    }
    jQuery.extend({
        queue: function(elem, type, data) {
            var queue;
            if (elem) {
                type = (type || "fx") + "queue";
                queue = jQuery._data(elem, type);
                // Speed up dequeue by getting out quickly if this is just a lookup
                if (data) {
                    if (!queue || jQuery.isArray(data)) {
                        queue = jQuery._data(elem, type, jQuery.makeArray(data));
                    } else {
                        queue.push(data);
                    }
                }
                return queue || [];
            }
        },
        dequeue: function(elem, type) {
            type = type || "fx";
            var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function() {
                jQuery.dequeue(elem, type);
            };
            // If the fx queue is dequeued, always remove the progress sentinel
            if (fn === "inprogress") {
                fn = queue.shift();
                startLength--;
            }
            if (fn) {
                // Add a progress sentinel to prevent the fx queue from being
                // automatically dequeued
                if (type === "fx") {
                    queue.unshift("inprogress");
                }
                // clear up the last queue stop function
                delete hooks.stop;
                fn.call(elem, next, hooks);
            }
            if (!startLength && hooks) {
                hooks.empty.fire();
            }
        },
        // not intended for public consumption - generates a queueHooks object, or returns the current one
        _queueHooks: function(elem, type) {
            var key = type + "queueHooks";
            return jQuery._data(elem, key) || jQuery._data(elem, key, {
                empty: jQuery.Callbacks("once memory").add(function() {
                    jQuery._removeData(elem, type + "queue");
                    jQuery._removeData(elem, key);
                })
            });
        }
    });
    jQuery.fn.extend({
        queue: function(type, data) {
            var setter = 2;
            if (typeof type !== "string") {
                data = type;
                type = "fx";
                setter--;
            }
            if (arguments.length < setter) {
                return jQuery.queue(this[0], type);
            }
            return data === undefined ? this : this.each(function() {
                var queue = jQuery.queue(this, type, data);
                // ensure a hooks for this queue
                jQuery._queueHooks(this, type);
                if (type === "fx" && queue[0] !== "inprogress") {
                    jQuery.dequeue(this, type);
                }
            });
        },
        dequeue: function(type) {
            return this.each(function() {
                jQuery.dequeue(this, type);
            });
        },
        // Based off of the plugin by Clint Helfers, with permission.
        // http://blindsignals.com/index.php/2009/07/jquery-delay/
        delay: function(time, type) {
            time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
            type = type || "fx";
            return this.queue(type, function(next, hooks) {
                var timeout = setTimeout(next, time);
                hooks.stop = function() {
                    clearTimeout(timeout);
                };
            });
        },
        clearQueue: function(type) {
            return this.queue(type || "fx", []);
        },
        // Get a promise resolved when queues of a certain type
        // are emptied (fx is the type by default)
        promise: function(type, obj) {
            var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function() {
                if (!--count) {
                    defer.resolveWith(elements, [ elements ]);
                }
            };
            if (typeof type !== "string") {
                obj = type;
                type = undefined;
            }
            type = type || "fx";
            while (i--) {
                tmp = jQuery._data(elements[i], type + "queueHooks");
                if (tmp && tmp.empty) {
                    count++;
                    tmp.empty.add(resolve);
                }
            }
            resolve();
            return defer.promise(obj);
        }
    });
    var nodeHook, boolHook, rclass = /[\t\r\n\f]/g, rreturn = /\r/g, rfocusable = /^(?:input|select|textarea|button|object)$/i, rclickable = /^(?:a|area)$/i, ruseDefault = /^(?:checked|selected)$/i, getSetAttribute = jQuery.support.getSetAttribute, getSetInput = jQuery.support.input;
    jQuery.fn.extend({
        attr: function(name, value) {
            return jQuery.access(this, jQuery.attr, name, value, arguments.length > 1);
        },
        removeAttr: function(name) {
            return this.each(function() {
                jQuery.removeAttr(this, name);
            });
        },
        prop: function(name, value) {
            return jQuery.access(this, jQuery.prop, name, value, arguments.length > 1);
        },
        removeProp: function(name) {
            name = jQuery.propFix[name] || name;
            return this.each(function() {
                // try/catch handles cases where IE balks (such as removing a property on window)
                try {
                    this[name] = undefined;
                    delete this[name];
                } catch (e) {}
            });
        },
        addClass: function(value) {
            var classes, elem, cur, clazz, j, i = 0, len = this.length, proceed = typeof value === "string" && value;
            if (jQuery.isFunction(value)) {
                return this.each(function(j) {
                    jQuery(this).addClass(value.call(this, j, this.className));
                });
            }
            if (proceed) {
                // The disjunction here is for better compressibility (see removeClass)
                classes = (value || "").match(core_rnotwhite) || [];
                for (;i < len; i++) {
                    elem = this[i];
                    cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : " ");
                    if (cur) {
                        j = 0;
                        while (clazz = classes[j++]) {
                            if (cur.indexOf(" " + clazz + " ") < 0) {
                                cur += clazz + " ";
                            }
                        }
                        elem.className = jQuery.trim(cur);
                    }
                }
            }
            return this;
        },
        removeClass: function(value) {
            var classes, elem, cur, clazz, j, i = 0, len = this.length, proceed = arguments.length === 0 || typeof value === "string" && value;
            if (jQuery.isFunction(value)) {
                return this.each(function(j) {
                    jQuery(this).removeClass(value.call(this, j, this.className));
                });
            }
            if (proceed) {
                classes = (value || "").match(core_rnotwhite) || [];
                for (;i < len; i++) {
                    elem = this[i];
                    // This expression is here for better compressibility (see addClass)
                    cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : "");
                    if (cur) {
                        j = 0;
                        while (clazz = classes[j++]) {
                            // Remove *all* instances
                            while (cur.indexOf(" " + clazz + " ") >= 0) {
                                cur = cur.replace(" " + clazz + " ", " ");
                            }
                        }
                        elem.className = value ? jQuery.trim(cur) : "";
                    }
                }
            }
            return this;
        },
        toggleClass: function(value, stateVal) {
            var type = typeof value;
            if (typeof stateVal === "boolean" && type === "string") {
                return stateVal ? this.addClass(value) : this.removeClass(value);
            }
            if (jQuery.isFunction(value)) {
                return this.each(function(i) {
                    jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
                });
            }
            return this.each(function() {
                if (type === "string") {
                    // toggle individual class names
                    var className, i = 0, self = jQuery(this), classNames = value.match(core_rnotwhite) || [];
                    while (className = classNames[i++]) {
                        // check each className given, space separated list
                        if (self.hasClass(className)) {
                            self.removeClass(className);
                        } else {
                            self.addClass(className);
                        }
                    }
                } else if (type === core_strundefined || type === "boolean") {
                    if (this.className) {
                        // store className if set
                        jQuery._data(this, "__className__", this.className);
                    }
                    // If the element has a class name or if we're passed "false",
                    // then remove the whole classname (if there was one, the above saved it).
                    // Otherwise bring back whatever was previously saved (if anything),
                    // falling back to the empty string if nothing was stored.
                    this.className = this.className || value === false ? "" : jQuery._data(this, "__className__") || "";
                }
            });
        },
        hasClass: function(selector) {
            var className = " " + selector + " ", i = 0, l = this.length;
            for (;i < l; i++) {
                if (this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf(className) >= 0) {
                    return true;
                }
            }
            return false;
        },
        val: function(value) {
            var ret, hooks, isFunction, elem = this[0];
            if (!arguments.length) {
                if (elem) {
                    hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
                    if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
                        return ret;
                    }
                    ret = elem.value;
                    return typeof ret === "string" ? // handle most common string cases
                    ret.replace(rreturn, "") : // handle cases where value is null/undef or number
                    ret == null ? "" : ret;
                }
                return;
            }
            isFunction = jQuery.isFunction(value);
            return this.each(function(i) {
                var val;
                if (this.nodeType !== 1) {
                    return;
                }
                if (isFunction) {
                    val = value.call(this, i, jQuery(this).val());
                } else {
                    val = value;
                }
                // Treat null/undefined as ""; convert numbers to string
                if (val == null) {
                    val = "";
                } else if (typeof val === "number") {
                    val += "";
                } else if (jQuery.isArray(val)) {
                    val = jQuery.map(val, function(value) {
                        return value == null ? "" : value + "";
                    });
                }
                hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
                // If set returns undefined, fall back to normal setting
                if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
                    this.value = val;
                }
            });
        }
    });
    jQuery.extend({
        valHooks: {
            option: {
                get: function(elem) {
                    // Use proper attribute retrieval(#6932, #12072)
                    var val = jQuery.find.attr(elem, "value");
                    return val != null ? val : elem.text;
                }
            },
            select: {
                get: function(elem) {
                    var value, option, options = elem.options, index = elem.selectedIndex, one = elem.type === "select-one" || index < 0, values = one ? null : [], max = one ? index + 1 : options.length, i = index < 0 ? max : one ? index : 0;
                    // Loop through all the selected options
                    for (;i < max; i++) {
                        option = options[i];
                        // oldIE doesn't update selected after form reset (#2551)
                        if ((option.selected || i === index) && (// Don't return options that are disabled or in a disabled optgroup
                        jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {
                            // Get the specific value for the option
                            value = jQuery(option).val();
                            // We don't need an array for one selects
                            if (one) {
                                return value;
                            }
                            // Multi-Selects return an array
                            values.push(value);
                        }
                    }
                    return values;
                },
                set: function(elem, value) {
                    var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length;
                    while (i--) {
                        option = options[i];
                        if (option.selected = jQuery.inArray(jQuery(option).val(), values) >= 0) {
                            optionSet = true;
                        }
                    }
                    // force browsers to behave consistently when non-matching value is set
                    if (!optionSet) {
                        elem.selectedIndex = -1;
                    }
                    return values;
                }
            }
        },
        attr: function(elem, name, value) {
            var hooks, ret, nType = elem.nodeType;
            // don't get/set attributes on text, comment and attribute nodes
            if (!elem || nType === 3 || nType === 8 || nType === 2) {
                return;
            }
            // Fallback to prop when attributes are not supported
            if (typeof elem.getAttribute === core_strundefined) {
                return jQuery.prop(elem, name, value);
            }
            // All attributes are lowercase
            // Grab necessary hook if one is defined
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                name = name.toLowerCase();
                hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook);
            }
            if (value !== undefined) {
                if (value === null) {
                    jQuery.removeAttr(elem, name);
                } else if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                    return ret;
                } else {
                    elem.setAttribute(name, value + "");
                    return value;
                }
            } else if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
                return ret;
            } else {
                ret = jQuery.find.attr(elem, name);
                // Non-existent attributes return null, we normalize to undefined
                return ret == null ? undefined : ret;
            }
        },
        removeAttr: function(elem, value) {
            var name, propName, i = 0, attrNames = value && value.match(core_rnotwhite);
            if (attrNames && elem.nodeType === 1) {
                while (name = attrNames[i++]) {
                    propName = jQuery.propFix[name] || name;
                    // Boolean attributes get special treatment (#10870)
                    if (jQuery.expr.match.bool.test(name)) {
                        // Set corresponding property to false
                        if (getSetInput && getSetAttribute || !ruseDefault.test(name)) {
                            elem[propName] = false;
                        } else {
                            elem[jQuery.camelCase("default-" + name)] = elem[propName] = false;
                        }
                    } else {
                        jQuery.attr(elem, name, "");
                    }
                    elem.removeAttribute(getSetAttribute ? name : propName);
                }
            }
        },
        attrHooks: {
            type: {
                set: function(elem, value) {
                    if (!jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input")) {
                        // Setting the type on a radio button after the value resets the value in IE6-9
                        // Reset value to default in case type is set after value during creation
                        var val = elem.value;
                        elem.setAttribute("type", value);
                        if (val) {
                            elem.value = val;
                        }
                        return value;
                    }
                }
            }
        },
        propFix: {
            "for": "htmlFor",
            "class": "className"
        },
        prop: function(elem, name, value) {
            var ret, hooks, notxml, nType = elem.nodeType;
            // don't get/set properties on text, comment and attribute nodes
            if (!elem || nType === 3 || nType === 8 || nType === 2) {
                return;
            }
            notxml = nType !== 1 || !jQuery.isXMLDoc(elem);
            if (notxml) {
                // Fix name and attach hooks
                name = jQuery.propFix[name] || name;
                hooks = jQuery.propHooks[name];
            }
            if (value !== undefined) {
                return hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined ? ret : elem[name] = value;
            } else {
                return hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null ? ret : elem[name];
            }
        },
        propHooks: {
            tabIndex: {
                get: function(elem) {
                    // elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
                    // http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
                    // Use proper attribute retrieval(#12072)
                    var tabindex = jQuery.find.attr(elem, "tabindex");
                    return tabindex ? parseInt(tabindex, 10) : rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ? 0 : -1;
                }
            }
        }
    });
    // Hooks for boolean attributes
    boolHook = {
        set: function(elem, value, name) {
            if (value === false) {
                // Remove boolean attributes when set to false
                jQuery.removeAttr(elem, name);
            } else if (getSetInput && getSetAttribute || !ruseDefault.test(name)) {
                // IE<8 needs the *property* name
                elem.setAttribute(!getSetAttribute && jQuery.propFix[name] || name, name);
            } else {
                elem[jQuery.camelCase("default-" + name)] = elem[name] = true;
            }
            return name;
        }
    };
    jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function(i, name) {
        var getter = jQuery.expr.attrHandle[name] || jQuery.find.attr;
        jQuery.expr.attrHandle[name] = getSetInput && getSetAttribute || !ruseDefault.test(name) ? function(elem, name, isXML) {
            var fn = jQuery.expr.attrHandle[name], ret = isXML ? undefined : /* jshint eqeqeq: false */
            (jQuery.expr.attrHandle[name] = undefined) != getter(elem, name, isXML) ? name.toLowerCase() : null;
            jQuery.expr.attrHandle[name] = fn;
            return ret;
        } : function(elem, name, isXML) {
            return isXML ? undefined : elem[jQuery.camelCase("default-" + name)] ? name.toLowerCase() : null;
        };
    });
    // fix oldIE attroperties
    if (!getSetInput || !getSetAttribute) {
        jQuery.attrHooks.value = {
            set: function(elem, value, name) {
                if (jQuery.nodeName(elem, "input")) {
                    // Does not return so that setAttribute is also used
                    elem.defaultValue = value;
                } else {
                    // Use nodeHook if defined (#1954); otherwise setAttribute is fine
                    return nodeHook && nodeHook.set(elem, value, name);
                }
            }
        };
    }
    // IE6/7 do not support getting/setting some attributes with get/setAttribute
    if (!getSetAttribute) {
        // Use this for any attribute in IE6/7
        // This fixes almost every IE6/7 issue
        nodeHook = {
            set: function(elem, value, name) {
                // Set the existing or create a new attribute node
                var ret = elem.getAttributeNode(name);
                if (!ret) {
                    elem.setAttributeNode(ret = elem.ownerDocument.createAttribute(name));
                }
                ret.value = value += "";
                // Break association with cloned elements by also using setAttribute (#9646)
                return name === "value" || value === elem.getAttribute(name) ? value : undefined;
            }
        };
        jQuery.expr.attrHandle.id = jQuery.expr.attrHandle.name = jQuery.expr.attrHandle.coords = // Some attributes are constructed with empty-string values when not defined
        function(elem, name, isXML) {
            var ret;
            return isXML ? undefined : (ret = elem.getAttributeNode(name)) && ret.value !== "" ? ret.value : null;
        };
        jQuery.valHooks.button = {
            get: function(elem, name) {
                var ret = elem.getAttributeNode(name);
                return ret && ret.specified ? ret.value : undefined;
            },
            set: nodeHook.set
        };
        // Set contenteditable to false on removals(#10429)
        // Setting to empty string throws an error as an invalid value
        jQuery.attrHooks.contenteditable = {
            set: function(elem, value, name) {
                nodeHook.set(elem, value === "" ? false : value, name);
            }
        };
        // Set width and height to auto instead of 0 on empty string( Bug #8150 )
        // This is for removals
        jQuery.each([ "width", "height" ], function(i, name) {
            jQuery.attrHooks[name] = {
                set: function(elem, value) {
                    if (value === "") {
                        elem.setAttribute(name, "auto");
                        return value;
                    }
                }
            };
        });
    }
    // Some attributes require a special call on IE
    // http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
    if (!jQuery.support.hrefNormalized) {
        // href/src property should get the full normalized URL (#10299/#12915)
        jQuery.each([ "href", "src" ], function(i, name) {
            jQuery.propHooks[name] = {
                get: function(elem) {
                    return elem.getAttribute(name, 4);
                }
            };
        });
    }
    if (!jQuery.support.style) {
        jQuery.attrHooks.style = {
            get: function(elem) {
                // Return undefined in the case of empty string
                // Note: IE uppercases css property names, but if we were to .toLowerCase()
                // .cssText, that would destroy case senstitivity in URL's, like in "background"
                return elem.style.cssText || undefined;
            },
            set: function(elem, value) {
                return elem.style.cssText = value + "";
            }
        };
    }
    // Safari mis-reports the default selected property of an option
    // Accessing the parent's selectedIndex property fixes it
    if (!jQuery.support.optSelected) {
        jQuery.propHooks.selected = {
            get: function(elem) {
                var parent = elem.parentNode;
                if (parent) {
                    parent.selectedIndex;
                    // Make sure that it also works with optgroups, see #5701
                    if (parent.parentNode) {
                        parent.parentNode.selectedIndex;
                    }
                }
                return null;
            }
        };
    }
    jQuery.each([ "tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable" ], function() {
        jQuery.propFix[this.toLowerCase()] = this;
    });
    // IE6/7 call enctype encoding
    if (!jQuery.support.enctype) {
        jQuery.propFix.enctype = "encoding";
    }
    // Radios and checkboxes getter/setter
    jQuery.each([ "radio", "checkbox" ], function() {
        jQuery.valHooks[this] = {
            set: function(elem, value) {
                if (jQuery.isArray(value)) {
                    return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0;
                }
            }
        };
        if (!jQuery.support.checkOn) {
            jQuery.valHooks[this].get = function(elem) {
                // Support: Webkit
                // "" is returned instead of "on" if a value isn't specified
                return elem.getAttribute("value") === null ? "on" : elem.value;
            };
        }
    });
    var rformElems = /^(?:input|select|textarea)$/i, rkeyEvent = /^key/, rmouseEvent = /^(?:mouse|contextmenu)|click/, rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;
    function returnTrue() {
        return true;
    }
    function returnFalse() {
        return false;
    }
    function safeActiveElement() {
        try {
            return document.activeElement;
        } catch (err) {}
    }
    /*
     * Helper functions for managing events -- not part of the public interface.
     * Props to Dean Edwards' addEvent library for many of the ideas.
     */
    jQuery.event = {
        global: {},
        add: function(elem, types, handler, data, selector) {
            var tmp, events, t, handleObjIn, special, eventHandle, handleObj, handlers, type, namespaces, origType, elemData = jQuery._data(elem);
            // Don't attach events to noData or text/comment nodes (but allow plain objects)
            if (!elemData) {
                return;
            }
            // Caller can pass in an object of custom data in lieu of the handler
            if (handler.handler) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
                selector = handleObjIn.selector;
            }
            // Make sure that the handler has a unique ID, used to find/remove it later
            if (!handler.guid) {
                handler.guid = jQuery.guid++;
            }
            // Init the element's event structure and main handler, if this is the first
            if (!(events = elemData.events)) {
                events = elemData.events = {};
            }
            if (!(eventHandle = elemData.handle)) {
                eventHandle = elemData.handle = function(e) {
                    // Discard the second event of a jQuery.event.trigger() and
                    // when an event is called after a page has unloaded
                    return typeof jQuery !== core_strundefined && (!e || jQuery.event.triggered !== e.type) ? jQuery.event.dispatch.apply(eventHandle.elem, arguments) : undefined;
                };
                // Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
                eventHandle.elem = elem;
            }
            // Handle multiple events separated by a space
            types = (types || "").match(core_rnotwhite) || [ "" ];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();
                // There *must* be a type, no attaching namespace-only handlers
                if (!type) {
                    continue;
                }
                // If event changes its type, use the special event handlers for the changed type
                special = jQuery.event.special[type] || {};
                // If selector defined, determine special event api type, otherwise given type
                type = (selector ? special.delegateType : special.bindType) || type;
                // Update special based on newly reset type
                special = jQuery.event.special[type] || {};
                // handleObj is passed to all event handlers
                handleObj = jQuery.extend({
                    type: type,
                    origType: origType,
                    data: data,
                    handler: handler,
                    guid: handler.guid,
                    selector: selector,
                    needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                    namespace: namespaces.join(".")
                }, handleObjIn);
                // Init the event handler queue if we're the first
                if (!(handlers = events[type])) {
                    handlers = events[type] = [];
                    handlers.delegateCount = 0;
                    // Only use addEventListener/attachEvent if the special events handler returns false
                    if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                        // Bind the global event handler to the element
                        if (elem.addEventListener) {
                            elem.addEventListener(type, eventHandle, false);
                        } else if (elem.attachEvent) {
                            elem.attachEvent("on" + type, eventHandle);
                        }
                    }
                }
                if (special.add) {
                    special.add.call(elem, handleObj);
                    if (!handleObj.handler.guid) {
                        handleObj.handler.guid = handler.guid;
                    }
                }
                // Add to the element's handler list, delegates in front
                if (selector) {
                    handlers.splice(handlers.delegateCount++, 0, handleObj);
                } else {
                    handlers.push(handleObj);
                }
                // Keep track of which events have ever been used, for event optimization
                jQuery.event.global[type] = true;
            }
            // Nullify elem to prevent memory leaks in IE
            elem = null;
        },
        // Detach an event or set of events from an element
        remove: function(elem, types, handler, selector, mappedTypes) {
            var j, handleObj, tmp, origCount, t, events, special, handlers, type, namespaces, origType, elemData = jQuery.hasData(elem) && jQuery._data(elem);
            if (!elemData || !(events = elemData.events)) {
                return;
            }
            // Once for each type.namespace in types; type may be omitted
            types = (types || "").match(core_rnotwhite) || [ "" ];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();
                // Unbind all events (on this namespace, if provided) for the element
                if (!type) {
                    for (type in events) {
                        jQuery.event.remove(elem, type + types[t], handler, selector, true);
                    }
                    continue;
                }
                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                handlers = events[type] || [];
                tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
                // Remove matching events
                origCount = j = handlers.length;
                while (j--) {
                    handleObj = handlers[j];
                    if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                        handlers.splice(j, 1);
                        if (handleObj.selector) {
                            handlers.delegateCount--;
                        }
                        if (special.remove) {
                            special.remove.call(elem, handleObj);
                        }
                    }
                }
                // Remove generic event handler if we removed something and no more handlers exist
                // (avoids potential for endless recursion during removal of special event handlers)
                if (origCount && !handlers.length) {
                    if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                        jQuery.removeEvent(elem, type, elemData.handle);
                    }
                    delete events[type];
                }
            }
            // Remove the expando if it's no longer used
            if (jQuery.isEmptyObject(events)) {
                delete elemData.handle;
                // removeData also checks for emptiness and clears the expando if empty
                // so use it instead of delete
                jQuery._removeData(elem, "events");
            }
        },
        trigger: function(event, data, elem, onlyHandlers) {
            var handle, ontype, cur, bubbleType, special, tmp, i, eventPath = [ elem || document ], type = core_hasOwn.call(event, "type") ? event.type : event, namespaces = core_hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
            cur = tmp = elem = elem || document;
            // Don't do events on text and comment nodes
            if (elem.nodeType === 3 || elem.nodeType === 8) {
                return;
            }
            // focus/blur morphs to focusin/out; ensure we're not firing them right now
            if (rfocusMorph.test(type + jQuery.event.triggered)) {
                return;
            }
            if (type.indexOf(".") >= 0) {
                // Namespaced trigger; create a regexp to match event type in handle()
                namespaces = type.split(".");
                type = namespaces.shift();
                namespaces.sort();
            }
            ontype = type.indexOf(":") < 0 && "on" + type;
            // Caller can pass in a jQuery.Event object, Object, or just an event type string
            event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === "object" && event);
            // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join(".");
            event.namespace_re = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
            // Clean up the event in case it is being reused
            event.result = undefined;
            if (!event.target) {
                event.target = elem;
            }
            // Clone any incoming data and prepend the event, creating the handler arg list
            data = data == null ? [ event ] : jQuery.makeArray(data, [ event ]);
            // Allow special events to draw outside the lines
            special = jQuery.event.special[type] || {};
            if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
                return;
            }
            // Determine event propagation path in advance, per W3C events spec (#9951)
            // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
            if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
                bubbleType = special.delegateType || type;
                if (!rfocusMorph.test(bubbleType + type)) {
                    cur = cur.parentNode;
                }
                for (;cur; cur = cur.parentNode) {
                    eventPath.push(cur);
                    tmp = cur;
                }
                // Only add window if we got to document (e.g., not plain obj or detached DOM)
                if (tmp === (elem.ownerDocument || document)) {
                    eventPath.push(tmp.defaultView || tmp.parentWindow || window);
                }
            }
            // Fire handlers on the event path
            i = 0;
            while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
                event.type = i > 1 ? bubbleType : special.bindType || type;
                // jQuery handler
                handle = (jQuery._data(cur, "events") || {})[event.type] && jQuery._data(cur, "handle");
                if (handle) {
                    handle.apply(cur, data);
                }
                // Native handler
                handle = ontype && cur[ontype];
                if (handle && jQuery.acceptData(cur) && handle.apply && handle.apply(cur, data) === false) {
                    event.preventDefault();
                }
            }
            event.type = type;
            // If nobody prevented the default action, do it now
            if (!onlyHandlers && !event.isDefaultPrevented()) {
                if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && jQuery.acceptData(elem)) {
                    // Call a native DOM method on the target with the same name name as the event.
                    // Can't use an .isFunction() check here because IE6/7 fails that test.
                    // Don't do default actions on window, that's where global variables be (#6170)
                    if (ontype && elem[type] && !jQuery.isWindow(elem)) {
                        // Don't re-trigger an onFOO event when we call its FOO() method
                        tmp = elem[ontype];
                        if (tmp) {
                            elem[ontype] = null;
                        }
                        // Prevent re-triggering of the same event, since we already bubbled it above
                        jQuery.event.triggered = type;
                        try {
                            elem[type]();
                        } catch (e) {}
                        jQuery.event.triggered = undefined;
                        if (tmp) {
                            elem[ontype] = tmp;
                        }
                    }
                }
            }
            return event.result;
        },
        dispatch: function(event) {
            // Make a writable jQuery.Event from the native event object
            event = jQuery.event.fix(event);
            var i, ret, handleObj, matched, j, handlerQueue = [], args = core_slice.call(arguments), handlers = (jQuery._data(this, "events") || {})[event.type] || [], special = jQuery.event.special[event.type] || {};
            // Use the fix-ed jQuery.Event rather than the (read-only) native event
            args[0] = event;
            event.delegateTarget = this;
            // Call the preDispatch hook for the mapped type, and let it bail if desired
            if (special.preDispatch && special.preDispatch.call(this, event) === false) {
                return;
            }
            // Determine handlers
            handlerQueue = jQuery.event.handlers.call(this, event, handlers);
            // Run delegates first; they may want to stop propagation beneath us
            i = 0;
            while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
                event.currentTarget = matched.elem;
                j = 0;
                while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
                    // Triggered event must either 1) have no namespace, or
                    // 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
                    if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {
                        event.handleObj = handleObj;
                        event.data = handleObj.data;
                        ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                        if (ret !== undefined) {
                            if ((event.result = ret) === false) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                        }
                    }
                }
            }
            // Call the postDispatch hook for the mapped type
            if (special.postDispatch) {
                special.postDispatch.call(this, event);
            }
            return event.result;
        },
        handlers: function(event, handlers) {
            var sel, handleObj, matches, i, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
            // Find delegate handlers
            // Black-hole SVG <use> instance trees (#13180)
            // Avoid non-left-click bubbling in Firefox (#3861)
            if (delegateCount && cur.nodeType && (!event.button || event.type !== "click")) {
                /* jshint eqeqeq: false */
                for (;cur != this; cur = cur.parentNode || this) {
                    /* jshint eqeqeq: true */
                    // Don't check non-elements (#13208)
                    // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
                    if (cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click")) {
                        matches = [];
                        for (i = 0; i < delegateCount; i++) {
                            handleObj = handlers[i];
                            // Don't conflict with Object.prototype properties (#13203)
                            sel = handleObj.selector + " ";
                            if (matches[sel] === undefined) {
                                matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [ cur ]).length;
                            }
                            if (matches[sel]) {
                                matches.push(handleObj);
                            }
                        }
                        if (matches.length) {
                            handlerQueue.push({
                                elem: cur,
                                handlers: matches
                            });
                        }
                    }
                }
            }
            // Add the remaining (directly-bound) handlers
            if (delegateCount < handlers.length) {
                handlerQueue.push({
                    elem: this,
                    handlers: handlers.slice(delegateCount)
                });
            }
            return handlerQueue;
        },
        fix: function(event) {
            if (event[jQuery.expando]) {
                return event;
            }
            // Create a writable copy of the event object and normalize some properties
            var i, prop, copy, type = event.type, originalEvent = event, fixHook = this.fixHooks[type];
            if (!fixHook) {
                this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};
            }
            copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
            event = new jQuery.Event(originalEvent);
            i = copy.length;
            while (i--) {
                prop = copy[i];
                event[prop] = originalEvent[prop];
            }
            // Support: IE<9
            // Fix target property (#1925)
            if (!event.target) {
                event.target = originalEvent.srcElement || document;
            }
            // Support: Chrome 23+, Safari?
            // Target should not be a text node (#504, #13143)
            if (event.target.nodeType === 3) {
                event.target = event.target.parentNode;
            }
            // Support: IE<9
            // For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
            event.metaKey = !!event.metaKey;
            return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
        },
        // Includes some event props shared by KeyEvent and MouseEvent
        props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
        fixHooks: {},
        keyHooks: {
            props: "char charCode key keyCode".split(" "),
            filter: function(event, original) {
                // Add which for key events
                if (event.which == null) {
                    event.which = original.charCode != null ? original.charCode : original.keyCode;
                }
                return event;
            }
        },
        mouseHooks: {
            props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
            filter: function(event, original) {
                var body, eventDoc, doc, button = original.button, fromElement = original.fromElement;
                // Calculate pageX/Y if missing and clientX/Y available
                if (event.pageX == null && original.clientX != null) {
                    eventDoc = event.target.ownerDocument || document;
                    doc = eventDoc.documentElement;
                    body = eventDoc.body;
                    event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
                    event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
                }
                // Add relatedTarget, if necessary
                if (!event.relatedTarget && fromElement) {
                    event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
                }
                // Add which for click: 1 === left; 2 === middle; 3 === right
                // Note: button is not normalized, so don't use it
                if (!event.which && button !== undefined) {
                    event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
                }
                return event;
            }
        },
        special: {
            load: {
                // Prevent triggered image.load events from bubbling to window.load
                noBubble: true
            },
            focus: {
                // Fire native event if possible so blur/focus sequence is correct
                trigger: function() {
                    if (this !== safeActiveElement() && this.focus) {
                        try {
                            this.focus();
                            return false;
                        } catch (e) {}
                    }
                },
                delegateType: "focusin"
            },
            blur: {
                trigger: function() {
                    if (this === safeActiveElement() && this.blur) {
                        this.blur();
                        return false;
                    }
                },
                delegateType: "focusout"
            },
            click: {
                // For checkbox, fire native event so checked state will be right
                trigger: function() {
                    if (jQuery.nodeName(this, "input") && this.type === "checkbox" && this.click) {
                        this.click();
                        return false;
                    }
                },
                // For cross-browser consistency, don't fire native .click() on links
                _default: function(event) {
                    return jQuery.nodeName(event.target, "a");
                }
            },
            beforeunload: {
                postDispatch: function(event) {
                    // Even when returnValue equals to undefined Firefox will still show alert
                    if (event.result !== undefined) {
                        event.originalEvent.returnValue = event.result;
                    }
                }
            }
        },
        simulate: function(type, elem, event, bubble) {
            // Piggyback on a donor event to simulate a different one.
            // Fake originalEvent to avoid donor's stopPropagation, but if the
            // simulated event prevents default then we do the same on the donor.
            var e = jQuery.extend(new jQuery.Event(), event, {
                type: type,
                isSimulated: true,
                originalEvent: {}
            });
            if (bubble) {
                jQuery.event.trigger(e, null, elem);
            } else {
                jQuery.event.dispatch.call(elem, e);
            }
            if (e.isDefaultPrevented()) {
                event.preventDefault();
            }
        }
    };
    jQuery.removeEvent = document.removeEventListener ? function(elem, type, handle) {
        if (elem.removeEventListener) {
            elem.removeEventListener(type, handle, false);
        }
    } : function(elem, type, handle) {
        var name = "on" + type;
        if (elem.detachEvent) {
            // #8545, #7054, preventing memory leaks for custom events in IE6-8
            // detachEvent needed property on element, by name of that event, to properly expose it to GC
            if (typeof elem[name] === core_strundefined) {
                elem[name] = null;
            }
            elem.detachEvent(name, handle);
        }
    };
    jQuery.Event = function(src, props) {
        // Allow instantiation without the 'new' keyword
        if (!(this instanceof jQuery.Event)) {
            return new jQuery.Event(src, props);
        }
        // Event object
        if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;
            // Events bubbling up the document may have been marked as prevented
            // by a handler lower down the tree; reflect the correct value.
            this.isDefaultPrevented = src.defaultPrevented || src.returnValue === false || src.getPreventDefault && src.getPreventDefault() ? returnTrue : returnFalse;
        } else {
            this.type = src;
        }
        // Put explicitly provided properties onto the event object
        if (props) {
            jQuery.extend(this, props);
        }
        // Create a timestamp if incoming event doesn't have one
        this.timeStamp = src && src.timeStamp || jQuery.now();
        // Mark it as fixed
        this[jQuery.expando] = true;
    };
    // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
    // http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
    jQuery.Event.prototype = {
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        preventDefault: function() {
            var e = this.originalEvent;
            this.isDefaultPrevented = returnTrue;
            if (!e) {
                return;
            }
            // If preventDefault exists, run it on the original event
            if (e.preventDefault) {
                e.preventDefault();
            } else {
                e.returnValue = false;
            }
        },
        stopPropagation: function() {
            var e = this.originalEvent;
            this.isPropagationStopped = returnTrue;
            if (!e) {
                return;
            }
            // If stopPropagation exists, run it on the original event
            if (e.stopPropagation) {
                e.stopPropagation();
            }
            // Support: IE
            // Set the cancelBubble property of the original event to true
            e.cancelBubble = true;
        },
        stopImmediatePropagation: function() {
            this.isImmediatePropagationStopped = returnTrue;
            this.stopPropagation();
        }
    };
    // Create mouseenter/leave events using mouseover/out and event-time checks
    jQuery.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout"
    }, function(orig, fix) {
        jQuery.event.special[orig] = {
            delegateType: fix,
            bindType: fix,
            handle: function(event) {
                var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
                // For mousenter/leave call the handler if related is outside the target.
                // NB: No relatedTarget if the mouse left/entered the browser window
                if (!related || related !== target && !jQuery.contains(target, related)) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply(this, arguments);
                    event.type = fix;
                }
                return ret;
            }
        };
    });
    // IE submit delegation
    if (!jQuery.support.submitBubbles) {
        jQuery.event.special.submit = {
            setup: function() {
                // Only need this for delegated form submit events
                if (jQuery.nodeName(this, "form")) {
                    return false;
                }
                // Lazy-add a submit handler when a descendant form may potentially be submitted
                jQuery.event.add(this, "click._submit keypress._submit", function(e) {
                    // Node name check avoids a VML-related crash in IE (#9807)
                    var elem = e.target, form = jQuery.nodeName(elem, "input") || jQuery.nodeName(elem, "button") ? elem.form : undefined;
                    if (form && !jQuery._data(form, "submitBubbles")) {
                        jQuery.event.add(form, "submit._submit", function(event) {
                            event._submit_bubble = true;
                        });
                        jQuery._data(form, "submitBubbles", true);
                    }
                });
            },
            postDispatch: function(event) {
                // If form was submitted by the user, bubble the event up the tree
                if (event._submit_bubble) {
                    delete event._submit_bubble;
                    if (this.parentNode && !event.isTrigger) {
                        jQuery.event.simulate("submit", this.parentNode, event, true);
                    }
                }
            },
            teardown: function() {
                // Only need this for delegated form submit events
                if (jQuery.nodeName(this, "form")) {
                    return false;
                }
                // Remove delegated handlers; cleanData eventually reaps submit handlers attached above
                jQuery.event.remove(this, "._submit");
            }
        };
    }
    // IE change delegation and checkbox/radio fix
    if (!jQuery.support.changeBubbles) {
        jQuery.event.special.change = {
            setup: function() {
                if (rformElems.test(this.nodeName)) {
                    // IE doesn't fire change on a check/radio until blur; trigger it on click
                    // after a propertychange. Eat the blur-change in special.change.handle.
                    // This still fires onchange a second time for check/radio after blur.
                    if (this.type === "checkbox" || this.type === "radio") {
                        jQuery.event.add(this, "propertychange._change", function(event) {
                            if (event.originalEvent.propertyName === "checked") {
                                this._just_changed = true;
                            }
                        });
                        jQuery.event.add(this, "click._change", function(event) {
                            if (this._just_changed && !event.isTrigger) {
                                this._just_changed = false;
                            }
                            // Allow triggered, simulated change events (#11500)
                            jQuery.event.simulate("change", this, event, true);
                        });
                    }
                    return false;
                }
                // Delegated event; lazy-add a change handler on descendant inputs
                jQuery.event.add(this, "beforeactivate._change", function(e) {
                    var elem = e.target;
                    if (rformElems.test(elem.nodeName) && !jQuery._data(elem, "changeBubbles")) {
                        jQuery.event.add(elem, "change._change", function(event) {
                            if (this.parentNode && !event.isSimulated && !event.isTrigger) {
                                jQuery.event.simulate("change", this.parentNode, event, true);
                            }
                        });
                        jQuery._data(elem, "changeBubbles", true);
                    }
                });
            },
            handle: function(event) {
                var elem = event.target;
                // Swallow native change events from checkbox/radio, we already triggered them above
                if (this !== elem || event.isSimulated || event.isTrigger || elem.type !== "radio" && elem.type !== "checkbox") {
                    return event.handleObj.handler.apply(this, arguments);
                }
            },
            teardown: function() {
                jQuery.event.remove(this, "._change");
                return !rformElems.test(this.nodeName);
            }
        };
    }
    // Create "bubbling" focus and blur events
    if (!jQuery.support.focusinBubbles) {
        jQuery.each({
            focus: "focusin",
            blur: "focusout"
        }, function(orig, fix) {
            // Attach a single capturing handler while someone wants focusin/focusout
            var attaches = 0, handler = function(event) {
                jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);
            };
            jQuery.event.special[fix] = {
                setup: function() {
                    if (attaches++ === 0) {
                        document.addEventListener(orig, handler, true);
                    }
                },
                teardown: function() {
                    if (--attaches === 0) {
                        document.removeEventListener(orig, handler, true);
                    }
                }
            };
        });
    }
    jQuery.fn.extend({
        on: function(types, selector, data, fn, /*INTERNAL*/ one) {
            var type, origFn;
            // Types can be a map of types/handlers
            if (typeof types === "object") {
                // ( types-Object, selector, data )
                if (typeof selector !== "string") {
                    // ( types-Object, data )
                    data = data || selector;
                    selector = undefined;
                }
                for (type in types) {
                    this.on(type, selector, data, types[type], one);
                }
                return this;
            }
            if (data == null && fn == null) {
                // ( types, fn )
                fn = selector;
                data = selector = undefined;
            } else if (fn == null) {
                if (typeof selector === "string") {
                    // ( types, selector, fn )
                    fn = data;
                    data = undefined;
                } else {
                    // ( types, data, fn )
                    fn = data;
                    data = selector;
                    selector = undefined;
                }
            }
            if (fn === false) {
                fn = returnFalse;
            } else if (!fn) {
                return this;
            }
            if (one === 1) {
                origFn = fn;
                fn = function(event) {
                    // Can use an empty set, since event contains the info
                    jQuery().off(event);
                    return origFn.apply(this, arguments);
                };
                // Use same guid so caller can remove using origFn
                fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
            }
            return this.each(function() {
                jQuery.event.add(this, types, fn, data, selector);
            });
        },
        one: function(types, selector, data, fn) {
            return this.on(types, selector, data, fn, 1);
        },
        off: function(types, selector, fn) {
            var handleObj, type;
            if (types && types.preventDefault && types.handleObj) {
                // ( event )  dispatched jQuery.Event
                handleObj = types.handleObj;
                jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
                return this;
            }
            if (typeof types === "object") {
                // ( types-object [, selector] )
                for (type in types) {
                    this.off(type, selector, types[type]);
                }
                return this;
            }
            if (selector === false || typeof selector === "function") {
                // ( types [, fn] )
                fn = selector;
                selector = undefined;
            }
            if (fn === false) {
                fn = returnFalse;
            }
            return this.each(function() {
                jQuery.event.remove(this, types, fn, selector);
            });
        },
        trigger: function(type, data) {
            return this.each(function() {
                jQuery.event.trigger(type, data, this);
            });
        },
        triggerHandler: function(type, data) {
            var elem = this[0];
            if (elem) {
                return jQuery.event.trigger(type, data, elem, true);
            }
        }
    });
    var isSimple = /^.[^:#\[\.,]*$/, rparentsprev = /^(?:parents|prev(?:Until|All))/, rneedsContext = jQuery.expr.match.needsContext, // methods guaranteed to produce a unique set when starting from a unique set
    guaranteedUnique = {
        children: true,
        contents: true,
        next: true,
        prev: true
    };
    jQuery.fn.extend({
        find: function(selector) {
            var i, ret = [], self = this, len = self.length;
            if (typeof selector !== "string") {
                return this.pushStack(jQuery(selector).filter(function() {
                    for (i = 0; i < len; i++) {
                        if (jQuery.contains(self[i], this)) {
                            return true;
                        }
                    }
                }));
            }
            for (i = 0; i < len; i++) {
                jQuery.find(selector, self[i], ret);
            }
            // Needed because $( selector, context ) becomes $( context ).find( selector )
            ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
            ret.selector = this.selector ? this.selector + " " + selector : selector;
            return ret;
        },
        has: function(target) {
            var i, targets = jQuery(target, this), len = targets.length;
            return this.filter(function() {
                for (i = 0; i < len; i++) {
                    if (jQuery.contains(this, targets[i])) {
                        return true;
                    }
                }
            });
        },
        not: function(selector) {
            return this.pushStack(winnow(this, selector || [], true));
        },
        filter: function(selector) {
            return this.pushStack(winnow(this, selector || [], false));
        },
        is: function(selector) {
            return !!winnow(this, // If this is a positional/relative selector, check membership in the returned set
            // so $("p:first").is("p:last") won't return true for a doc with two "p".
            typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
        },
        closest: function(selectors, context) {
            var cur, i = 0, l = this.length, ret = [], pos = rneedsContext.test(selectors) || typeof selectors !== "string" ? jQuery(selectors, context || this.context) : 0;
            for (;i < l; i++) {
                for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
                    // Always skip document fragments
                    if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 : // Don't pass non-elements to Sizzle
                    cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
                        cur = ret.push(cur);
                        break;
                    }
                }
            }
            return this.pushStack(ret.length > 1 ? jQuery.unique(ret) : ret);
        },
        // Determine the position of an element within
        // the matched set of elements
        index: function(elem) {
            // No argument, return index in parent
            if (!elem) {
                return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
            }
            // index in selector
            if (typeof elem === "string") {
                return jQuery.inArray(this[0], jQuery(elem));
            }
            // Locate the position of the desired element
            return jQuery.inArray(// If it receives a jQuery object, the first element is used
            elem.jquery ? elem[0] : elem, this);
        },
        add: function(selector, context) {
            var set = typeof selector === "string" ? jQuery(selector, context) : jQuery.makeArray(selector && selector.nodeType ? [ selector ] : selector), all = jQuery.merge(this.get(), set);
            return this.pushStack(jQuery.unique(all));
        },
        addBack: function(selector) {
            return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
        }
    });
    function sibling(cur, dir) {
        do {
            cur = cur[dir];
        } while (cur && cur.nodeType !== 1);
        return cur;
    }
    jQuery.each({
        parent: function(elem) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function(elem) {
            return jQuery.dir(elem, "parentNode");
        },
        parentsUntil: function(elem, i, until) {
            return jQuery.dir(elem, "parentNode", until);
        },
        next: function(elem) {
            return sibling(elem, "nextSibling");
        },
        prev: function(elem) {
            return sibling(elem, "previousSibling");
        },
        nextAll: function(elem) {
            return jQuery.dir(elem, "nextSibling");
        },
        prevAll: function(elem) {
            return jQuery.dir(elem, "previousSibling");
        },
        nextUntil: function(elem, i, until) {
            return jQuery.dir(elem, "nextSibling", until);
        },
        prevUntil: function(elem, i, until) {
            return jQuery.dir(elem, "previousSibling", until);
        },
        siblings: function(elem) {
            return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
        },
        children: function(elem) {
            return jQuery.sibling(elem.firstChild);
        },
        contents: function(elem) {
            return jQuery.nodeName(elem, "iframe") ? elem.contentDocument || elem.contentWindow.document : jQuery.merge([], elem.childNodes);
        }
    }, function(name, fn) {
        jQuery.fn[name] = function(until, selector) {
            var ret = jQuery.map(this, fn, until);
            if (name.slice(-5) !== "Until") {
                selector = until;
            }
            if (selector && typeof selector === "string") {
                ret = jQuery.filter(selector, ret);
            }
            if (this.length > 1) {
                // Remove duplicates
                if (!guaranteedUnique[name]) {
                    ret = jQuery.unique(ret);
                }
                // Reverse order for parents* and prev-derivatives
                if (rparentsprev.test(name)) {
                    ret = ret.reverse();
                }
            }
            return this.pushStack(ret);
        };
    });
    jQuery.extend({
        filter: function(expr, elems, not) {
            var elem = elems[0];
            if (not) {
                expr = ":not(" + expr + ")";
            }
            return elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [ elem ] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function(elem) {
                return elem.nodeType === 1;
            }));
        },
        dir: function(elem, dir, until) {
            var matched = [], cur = elem[dir];
            while (cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery(cur).is(until))) {
                if (cur.nodeType === 1) {
                    matched.push(cur);
                }
                cur = cur[dir];
            }
            return matched;
        },
        sibling: function(n, elem) {
            var r = [];
            for (;n; n = n.nextSibling) {
                if (n.nodeType === 1 && n !== elem) {
                    r.push(n);
                }
            }
            return r;
        }
    });
    // Implement the identical functionality for filter and not
    function winnow(elements, qualifier, not) {
        if (jQuery.isFunction(qualifier)) {
            return jQuery.grep(elements, function(elem, i) {
                /* jshint -W018 */
                return !!qualifier.call(elem, i, elem) !== not;
            });
        }
        if (qualifier.nodeType) {
            return jQuery.grep(elements, function(elem) {
                return elem === qualifier !== not;
            });
        }
        if (typeof qualifier === "string") {
            if (isSimple.test(qualifier)) {
                return jQuery.filter(qualifier, elements, not);
            }
            qualifier = jQuery.filter(qualifier, elements);
        }
        return jQuery.grep(elements, function(elem) {
            return jQuery.inArray(elem, qualifier) >= 0 !== not;
        });
    }
    function createSafeFragment(document) {
        var list = nodeNames.split("|"), safeFrag = document.createDocumentFragment();
        if (safeFrag.createElement) {
            while (list.length) {
                safeFrag.createElement(list.pop());
            }
        }
        return safeFrag;
    }
    var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" + "header|hgroup|mark|meter|nav|output|progress|section|summary|time|video", rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g, rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"), rleadingWhitespace = /^\s+/, rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, rtagName = /<([\w:]+)/, rtbody = /<tbody/i, rhtml = /<|&#?\w+;/, rnoInnerhtml = /<(?:script|style|link)/i, manipulation_rcheckableType = /^(?:checkbox|radio)$/i, // checked="checked" or checked
    rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rscriptType = /^$|\/(?:java|ecma)script/i, rscriptTypeMasked = /^true\/(.*)/, rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g, // We have to close these tags to support XHTML (#13200)
    wrapMap = {
        option: [ 1, "<select multiple='multiple'>", "</select>" ],
        legend: [ 1, "<fieldset>", "</fieldset>" ],
        area: [ 1, "<map>", "</map>" ],
        param: [ 1, "<object>", "</object>" ],
        thead: [ 1, "<table>", "</table>" ],
        tr: [ 2, "<table><tbody>", "</tbody></table>" ],
        col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
        td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
        // IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
        // unless wrapped in a div with non-breaking characters in front of it.
        _default: jQuery.support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>" ]
    }, safeFragment = createSafeFragment(document), fragmentDiv = safeFragment.appendChild(document.createElement("div"));
    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;
    jQuery.fn.extend({
        text: function(value) {
            return jQuery.access(this, function(value) {
                return value === undefined ? jQuery.text(this) : this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value));
            }, null, value, arguments.length);
        },
        append: function() {
            return this.domManip(arguments, function(elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.appendChild(elem);
                }
            });
        },
        prepend: function() {
            return this.domManip(arguments, function(elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.insertBefore(elem, target.firstChild);
                }
            });
        },
        before: function() {
            return this.domManip(arguments, function(elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this);
                }
            });
        },
        after: function() {
            return this.domManip(arguments, function(elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this.nextSibling);
                }
            });
        },
        // keepData is for internal use only--do not document
        remove: function(selector, keepData) {
            var elem, elems = selector ? jQuery.filter(selector, this) : this, i = 0;
            for (;(elem = elems[i]) != null; i++) {
                if (!keepData && elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem));
                }
                if (elem.parentNode) {
                    if (keepData && jQuery.contains(elem.ownerDocument, elem)) {
                        setGlobalEval(getAll(elem, "script"));
                    }
                    elem.parentNode.removeChild(elem);
                }
            }
            return this;
        },
        empty: function() {
            var elem, i = 0;
            for (;(elem = this[i]) != null; i++) {
                // Remove element nodes and prevent memory leaks
                if (elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem, false));
                }
                // Remove any remaining nodes
                while (elem.firstChild) {
                    elem.removeChild(elem.firstChild);
                }
                // If this is a select, ensure that it displays empty (#12336)
                // Support: IE<9
                if (elem.options && jQuery.nodeName(elem, "select")) {
                    elem.options.length = 0;
                }
            }
            return this;
        },
        clone: function(dataAndEvents, deepDataAndEvents) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
            return this.map(function() {
                return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
            });
        },
        html: function(value) {
            return jQuery.access(this, function(value) {
                var elem = this[0] || {}, i = 0, l = this.length;
                if (value === undefined) {
                    return elem.nodeType === 1 ? elem.innerHTML.replace(rinlinejQuery, "") : undefined;
                }
                // See if we can take a shortcut and just use innerHTML
                if (typeof value === "string" && !rnoInnerhtml.test(value) && (jQuery.support.htmlSerialize || !rnoshimcache.test(value)) && (jQuery.support.leadingWhitespace || !rleadingWhitespace.test(value)) && !wrapMap[(rtagName.exec(value) || [ "", "" ])[1].toLowerCase()]) {
                    value = value.replace(rxhtmlTag, "<$1></$2>");
                    try {
                        for (;i < l; i++) {
                            // Remove element nodes and prevent memory leaks
                            elem = this[i] || {};
                            if (elem.nodeType === 1) {
                                jQuery.cleanData(getAll(elem, false));
                                elem.innerHTML = value;
                            }
                        }
                        elem = 0;
                    } catch (e) {}
                }
                if (elem) {
                    this.empty().append(value);
                }
            }, null, value, arguments.length);
        },
        replaceWith: function() {
            var // Snapshot the DOM in case .domManip sweeps something relevant into its fragment
            args = jQuery.map(this, function(elem) {
                return [ elem.nextSibling, elem.parentNode ];
            }), i = 0;
            // Make the changes, replacing each context element with the new content
            this.domManip(arguments, function(elem) {
                var next = args[i++], parent = args[i++];
                if (parent) {
                    // Don't use the snapshot next if it has moved (#13810)
                    if (next && next.parentNode !== parent) {
                        next = this.nextSibling;
                    }
                    jQuery(this).remove();
                    parent.insertBefore(elem, next);
                }
            }, true);
            // Force removal if there was no new content (e.g., from empty arguments)
            return i ? this : this.remove();
        },
        detach: function(selector) {
            return this.remove(selector, true);
        },
        domManip: function(args, callback, allowIntersection) {
            // Flatten any nested arrays
            args = core_concat.apply([], args);
            var first, node, hasScripts, scripts, doc, fragment, i = 0, l = this.length, set = this, iNoClone = l - 1, value = args[0], isFunction = jQuery.isFunction(value);
            // We can't cloneNode fragments that contain checked, in WebKit
            if (isFunction || !(l <= 1 || typeof value !== "string" || jQuery.support.checkClone || !rchecked.test(value))) {
                return this.each(function(index) {
                    var self = set.eq(index);
                    if (isFunction) {
                        args[0] = value.call(this, index, self.html());
                    }
                    self.domManip(args, callback, allowIntersection);
                });
            }
            if (l) {
                fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, !allowIntersection && this);
                first = fragment.firstChild;
                if (fragment.childNodes.length === 1) {
                    fragment = first;
                }
                if (first) {
                    scripts = jQuery.map(getAll(fragment, "script"), disableScript);
                    hasScripts = scripts.length;
                    // Use the original fragment for the last item instead of the first because it can end up
                    // being emptied incorrectly in certain situations (#8070).
                    for (;i < l; i++) {
                        node = fragment;
                        if (i !== iNoClone) {
                            node = jQuery.clone(node, true, true);
                            // Keep references to cloned scripts for later restoration
                            if (hasScripts) {
                                jQuery.merge(scripts, getAll(node, "script"));
                            }
                        }
                        callback.call(this[i], node, i);
                    }
                    if (hasScripts) {
                        doc = scripts[scripts.length - 1].ownerDocument;
                        // Reenable scripts
                        jQuery.map(scripts, restoreScript);
                        // Evaluate executable scripts on first document insertion
                        for (i = 0; i < hasScripts; i++) {
                            node = scripts[i];
                            if (rscriptType.test(node.type || "") && !jQuery._data(node, "globalEval") && jQuery.contains(doc, node)) {
                                if (node.src) {
                                    // Hope ajax is available...
                                    jQuery._evalUrl(node.src);
                                } else {
                                    jQuery.globalEval((node.text || node.textContent || node.innerHTML || "").replace(rcleanScript, ""));
                                }
                            }
                        }
                    }
                    // Fix #11809: Avoid leaking memory
                    fragment = first = null;
                }
            }
            return this;
        }
    });
    // Support: IE<8
    // Manipulating tables requires a tbody
    function manipulationTarget(elem, content) {
        return jQuery.nodeName(elem, "table") && jQuery.nodeName(content.nodeType === 1 ? content : content.firstChild, "tr") ? elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")) : elem;
    }
    // Replace/restore the type attribute of script elements for safe DOM manipulation
    function disableScript(elem) {
        elem.type = (jQuery.find.attr(elem, "type") !== null) + "/" + elem.type;
        return elem;
    }
    function restoreScript(elem) {
        var match = rscriptTypeMasked.exec(elem.type);
        if (match) {
            elem.type = match[1];
        } else {
            elem.removeAttribute("type");
        }
        return elem;
    }
    // Mark scripts as having already been evaluated
    function setGlobalEval(elems, refElements) {
        var elem, i = 0;
        for (;(elem = elems[i]) != null; i++) {
            jQuery._data(elem, "globalEval", !refElements || jQuery._data(refElements[i], "globalEval"));
        }
    }
    function cloneCopyEvent(src, dest) {
        if (dest.nodeType !== 1 || !jQuery.hasData(src)) {
            return;
        }
        var type, i, l, oldData = jQuery._data(src), curData = jQuery._data(dest, oldData), events = oldData.events;
        if (events) {
            delete curData.handle;
            curData.events = {};
            for (type in events) {
                for (i = 0, l = events[type].length; i < l; i++) {
                    jQuery.event.add(dest, type, events[type][i]);
                }
            }
        }
        // make the cloned public data object a copy from the original
        if (curData.data) {
            curData.data = jQuery.extend({}, curData.data);
        }
    }
    function fixCloneNodeIssues(src, dest) {
        var nodeName, e, data;
        // We do not need to do anything for non-Elements
        if (dest.nodeType !== 1) {
            return;
        }
        nodeName = dest.nodeName.toLowerCase();
        // IE6-8 copies events bound via attachEvent when using cloneNode.
        if (!jQuery.support.noCloneEvent && dest[jQuery.expando]) {
            data = jQuery._data(dest);
            for (e in data.events) {
                jQuery.removeEvent(dest, e, data.handle);
            }
            // Event data gets referenced instead of copied if the expando gets copied too
            dest.removeAttribute(jQuery.expando);
        }
        // IE blanks contents when cloning scripts, and tries to evaluate newly-set text
        if (nodeName === "script" && dest.text !== src.text) {
            disableScript(dest).text = src.text;
            restoreScript(dest);
        } else if (nodeName === "object") {
            if (dest.parentNode) {
                dest.outerHTML = src.outerHTML;
            }
            // This path appears unavoidable for IE9. When cloning an object
            // element in IE9, the outerHTML strategy above is not sufficient.
            // If the src has innerHTML and the destination does not,
            // copy the src.innerHTML into the dest.innerHTML. #10324
            if (jQuery.support.html5Clone && src.innerHTML && !jQuery.trim(dest.innerHTML)) {
                dest.innerHTML = src.innerHTML;
            }
        } else if (nodeName === "input" && manipulation_rcheckableType.test(src.type)) {
            // IE6-8 fails to persist the checked state of a cloned checkbox
            // or radio button. Worse, IE6-7 fail to give the cloned element
            // a checked appearance if the defaultChecked value isn't also set
            dest.defaultChecked = dest.checked = src.checked;
            // IE6-7 get confused and end up setting the value of a cloned
            // checkbox/radio button to an empty string instead of "on"
            if (dest.value !== src.value) {
                dest.value = src.value;
            }
        } else if (nodeName === "option") {
            dest.defaultSelected = dest.selected = src.defaultSelected;
        } else if (nodeName === "input" || nodeName === "textarea") {
            dest.defaultValue = src.defaultValue;
        }
    }
    jQuery.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function(name, original) {
        jQuery.fn[name] = function(selector) {
            var elems, i = 0, ret = [], insert = jQuery(selector), last = insert.length - 1;
            for (;i <= last; i++) {
                elems = i === last ? this : this.clone(true);
                jQuery(insert[i])[original](elems);
                // Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
                core_push.apply(ret, elems.get());
            }
            return this.pushStack(ret);
        };
    });
    function getAll(context, tag) {
        var elems, elem, i = 0, found = typeof context.getElementsByTagName !== core_strundefined ? context.getElementsByTagName(tag || "*") : typeof context.querySelectorAll !== core_strundefined ? context.querySelectorAll(tag || "*") : undefined;
        if (!found) {
            for (found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++) {
                if (!tag || jQuery.nodeName(elem, tag)) {
                    found.push(elem);
                } else {
                    jQuery.merge(found, getAll(elem, tag));
                }
            }
        }
        return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([ context ], found) : found;
    }
    // Used in buildFragment, fixes the defaultChecked property
    function fixDefaultChecked(elem) {
        if (manipulation_rcheckableType.test(elem.type)) {
            elem.defaultChecked = elem.checked;
        }
    }
    jQuery.extend({
        clone: function(elem, dataAndEvents, deepDataAndEvents) {
            var destElements, node, clone, i, srcElements, inPage = jQuery.contains(elem.ownerDocument, elem);
            if (jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test("<" + elem.nodeName + ">")) {
                clone = elem.cloneNode(true);
            } else {
                fragmentDiv.innerHTML = elem.outerHTML;
                fragmentDiv.removeChild(clone = fragmentDiv.firstChild);
            }
            if ((!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
                // We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
                destElements = getAll(clone);
                srcElements = getAll(elem);
                // Fix all IE cloning issues
                for (i = 0; (node = srcElements[i]) != null; ++i) {
                    // Ensure that the destination node is not null; Fixes #9587
                    if (destElements[i]) {
                        fixCloneNodeIssues(node, destElements[i]);
                    }
                }
            }
            // Copy the events from the original to the clone
            if (dataAndEvents) {
                if (deepDataAndEvents) {
                    srcElements = srcElements || getAll(elem);
                    destElements = destElements || getAll(clone);
                    for (i = 0; (node = srcElements[i]) != null; i++) {
                        cloneCopyEvent(node, destElements[i]);
                    }
                } else {
                    cloneCopyEvent(elem, clone);
                }
            }
            // Preserve script evaluation history
            destElements = getAll(clone, "script");
            if (destElements.length > 0) {
                setGlobalEval(destElements, !inPage && getAll(elem, "script"));
            }
            destElements = srcElements = node = null;
            // Return the cloned set
            return clone;
        },
        buildFragment: function(elems, context, scripts, selection) {
            var j, elem, contains, tmp, tag, tbody, wrap, l = elems.length, // Ensure a safe fragment
            safe = createSafeFragment(context), nodes = [], i = 0;
            for (;i < l; i++) {
                elem = elems[i];
                if (elem || elem === 0) {
                    // Add nodes directly
                    if (jQuery.type(elem) === "object") {
                        jQuery.merge(nodes, elem.nodeType ? [ elem ] : elem);
                    } else if (!rhtml.test(elem)) {
                        nodes.push(context.createTextNode(elem));
                    } else {
                        tmp = tmp || safe.appendChild(context.createElement("div"));
                        // Deserialize a standard representation
                        tag = (rtagName.exec(elem) || [ "", "" ])[1].toLowerCase();
                        wrap = wrapMap[tag] || wrapMap._default;
                        tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, "<$1></$2>") + wrap[2];
                        // Descend through wrappers to the right content
                        j = wrap[0];
                        while (j--) {
                            tmp = tmp.lastChild;
                        }
                        // Manually add leading whitespace removed by IE
                        if (!jQuery.support.leadingWhitespace && rleadingWhitespace.test(elem)) {
                            nodes.push(context.createTextNode(rleadingWhitespace.exec(elem)[0]));
                        }
                        // Remove IE's autoinserted <tbody> from table fragments
                        if (!jQuery.support.tbody) {
                            // String was a <table>, *may* have spurious <tbody>
                            elem = tag === "table" && !rtbody.test(elem) ? tmp.firstChild : // String was a bare <thead> or <tfoot>
                            wrap[1] === "<table>" && !rtbody.test(elem) ? tmp : 0;
                            j = elem && elem.childNodes.length;
                            while (j--) {
                                if (jQuery.nodeName(tbody = elem.childNodes[j], "tbody") && !tbody.childNodes.length) {
                                    elem.removeChild(tbody);
                                }
                            }
                        }
                        jQuery.merge(nodes, tmp.childNodes);
                        // Fix #12392 for WebKit and IE > 9
                        tmp.textContent = "";
                        // Fix #12392 for oldIE
                        while (tmp.firstChild) {
                            tmp.removeChild(tmp.firstChild);
                        }
                        // Remember the top-level container for proper cleanup
                        tmp = safe.lastChild;
                    }
                }
            }
            // Fix #11356: Clear elements from fragment
            if (tmp) {
                safe.removeChild(tmp);
            }
            // Reset defaultChecked for any radios and checkboxes
            // about to be appended to the DOM in IE 6/7 (#8060)
            if (!jQuery.support.appendChecked) {
                jQuery.grep(getAll(nodes, "input"), fixDefaultChecked);
            }
            i = 0;
            while (elem = nodes[i++]) {
                // #4087 - If origin and destination elements are the same, and this is
                // that element, do not do anything
                if (selection && jQuery.inArray(elem, selection) !== -1) {
                    continue;
                }
                contains = jQuery.contains(elem.ownerDocument, elem);
                // Append to fragment
                tmp = getAll(safe.appendChild(elem), "script");
                // Preserve script evaluation history
                if (contains) {
                    setGlobalEval(tmp);
                }
                // Capture executables
                if (scripts) {
                    j = 0;
                    while (elem = tmp[j++]) {
                        if (rscriptType.test(elem.type || "")) {
                            scripts.push(elem);
                        }
                    }
                }
            }
            tmp = null;
            return safe;
        },
        cleanData: function(elems, /* internal */ acceptData) {
            var elem, type, id, data, i = 0, internalKey = jQuery.expando, cache = jQuery.cache, deleteExpando = jQuery.support.deleteExpando, special = jQuery.event.special;
            for (;(elem = elems[i]) != null; i++) {
                if (acceptData || jQuery.acceptData(elem)) {
                    id = elem[internalKey];
                    data = id && cache[id];
                    if (data) {
                        if (data.events) {
                            for (type in data.events) {
                                if (special[type]) {
                                    jQuery.event.remove(elem, type);
                                } else {
                                    jQuery.removeEvent(elem, type, data.handle);
                                }
                            }
                        }
                        // Remove cache only if it was not already removed by jQuery.event.remove
                        if (cache[id]) {
                            delete cache[id];
                            // IE does not allow us to delete expando properties from nodes,
                            // nor does it have a removeAttribute function on Document nodes;
                            // we must handle all of these cases
                            if (deleteExpando) {
                                delete elem[internalKey];
                            } else if (typeof elem.removeAttribute !== core_strundefined) {
                                elem.removeAttribute(internalKey);
                            } else {
                                elem[internalKey] = null;
                            }
                            core_deletedIds.push(id);
                        }
                    }
                }
            }
        },
        _evalUrl: function(url) {
            return jQuery.ajax({
                url: url,
                type: "GET",
                dataType: "script",
                async: false,
                global: false,
                "throws": true
            });
        }
    });
    jQuery.fn.extend({
        wrapAll: function(html) {
            if (jQuery.isFunction(html)) {
                return this.each(function(i) {
                    jQuery(this).wrapAll(html.call(this, i));
                });
            }
            if (this[0]) {
                // The elements to wrap the target around
                var wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
                if (this[0].parentNode) {
                    wrap.insertBefore(this[0]);
                }
                wrap.map(function() {
                    var elem = this;
                    while (elem.firstChild && elem.firstChild.nodeType === 1) {
                        elem = elem.firstChild;
                    }
                    return elem;
                }).append(this);
            }
            return this;
        },
        wrapInner: function(html) {
            if (jQuery.isFunction(html)) {
                return this.each(function(i) {
                    jQuery(this).wrapInner(html.call(this, i));
                });
            }
            return this.each(function() {
                var self = jQuery(this), contents = self.contents();
                if (contents.length) {
                    contents.wrapAll(html);
                } else {
                    self.append(html);
                }
            });
        },
        wrap: function(html) {
            var isFunction = jQuery.isFunction(html);
            return this.each(function(i) {
                jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
            });
        },
        unwrap: function() {
            return this.parent().each(function() {
                if (!jQuery.nodeName(this, "body")) {
                    jQuery(this).replaceWith(this.childNodes);
                }
            }).end();
        }
    });
    var iframe, getStyles, curCSS, ralpha = /alpha\([^)]*\)/i, ropacity = /opacity\s*=\s*([^)]*)/, rposition = /^(top|right|bottom|left)$/, // swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
    // see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
    rdisplayswap = /^(none|table(?!-c[ea]).+)/, rmargin = /^margin/, rnumsplit = new RegExp("^(" + core_pnum + ")(.*)$", "i"), rnumnonpx = new RegExp("^(" + core_pnum + ")(?!px)[a-z%]+$", "i"), rrelNum = new RegExp("^([+-])=(" + core_pnum + ")", "i"), elemdisplay = {
        BODY: "block"
    }, cssShow = {
        position: "absolute",
        visibility: "hidden",
        display: "block"
    }, cssNormalTransform = {
        letterSpacing: 0,
        fontWeight: 400
    }, cssExpand = [ "Top", "Right", "Bottom", "Left" ], cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];
    // return a css property mapped to a potentially vendor prefixed property
    function vendorPropName(style, name) {
        // shortcut for names that are not vendor prefixed
        if (name in style) {
            return name;
        }
        // check for vendor prefixed names
        var capName = name.charAt(0).toUpperCase() + name.slice(1), origName = name, i = cssPrefixes.length;
        while (i--) {
            name = cssPrefixes[i] + capName;
            if (name in style) {
                return name;
            }
        }
        return origName;
    }
    function isHidden(elem, el) {
        // isHidden might be called from jQuery#filter function;
        // in that case, element will be second argument
        elem = el || elem;
        return jQuery.css(elem, "display") === "none" || !jQuery.contains(elem.ownerDocument, elem);
    }
    function showHide(elements, show) {
        var display, elem, hidden, values = [], index = 0, length = elements.length;
        for (;index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
                continue;
            }
            values[index] = jQuery._data(elem, "olddisplay");
            display = elem.style.display;
            if (show) {
                // Reset the inline display of this element to learn if it is
                // being hidden by cascaded rules or not
                if (!values[index] && display === "none") {
                    elem.style.display = "";
                }
                // Set elements which have been overridden with display: none
                // in a stylesheet to whatever the default browser style is
                // for such an element
                if (elem.style.display === "" && isHidden(elem)) {
                    values[index] = jQuery._data(elem, "olddisplay", css_defaultDisplay(elem.nodeName));
                }
            } else {
                if (!values[index]) {
                    hidden = isHidden(elem);
                    if (display && display !== "none" || !hidden) {
                        jQuery._data(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"));
                    }
                }
            }
        }
        // Set the display of most of the elements in a second loop
        // to avoid the constant reflow
        for (index = 0; index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
                continue;
            }
            if (!show || elem.style.display === "none" || elem.style.display === "") {
                elem.style.display = show ? values[index] || "" : "none";
            }
        }
        return elements;
    }
    jQuery.fn.extend({
        css: function(name, value) {
            return jQuery.access(this, function(elem, name, value) {
                var len, styles, map = {}, i = 0;
                if (jQuery.isArray(name)) {
                    styles = getStyles(elem);
                    len = name.length;
                    for (;i < len; i++) {
                        map[name[i]] = jQuery.css(elem, name[i], false, styles);
                    }
                    return map;
                }
                return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
            }, name, value, arguments.length > 1);
        },
        show: function() {
            return showHide(this, true);
        },
        hide: function() {
            return showHide(this);
        },
        toggle: function(state) {
            if (typeof state === "boolean") {
                return state ? this.show() : this.hide();
            }
            return this.each(function() {
                if (isHidden(this)) {
                    jQuery(this).show();
                } else {
                    jQuery(this).hide();
                }
            });
        }
    });
    jQuery.extend({
        // Add in style property hooks for overriding the default
        // behavior of getting and setting a style property
        cssHooks: {
            opacity: {
                get: function(elem, computed) {
                    if (computed) {
                        // We should always get a number back from opacity
                        var ret = curCSS(elem, "opacity");
                        return ret === "" ? "1" : ret;
                    }
                }
            }
        },
        // Don't automatically add "px" to these possibly-unitless properties
        cssNumber: {
            columnCount: true,
            fillOpacity: true,
            fontWeight: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            widows: true,
            zIndex: true,
            zoom: true
        },
        // Add in properties whose names you wish to fix before
        // setting or getting the value
        cssProps: {
            // normalize float css property
            "float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
        },
        // Get and set the style property on a DOM Node
        style: function(elem, name, value, extra) {
            // Don't set styles on text and comment nodes
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
                return;
            }
            // Make sure that we're working with the right name
            var ret, type, hooks, origName = jQuery.camelCase(name), style = elem.style;
            name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));
            // gets hook for the prefixed version
            // followed by the unprefixed version
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            // Check if we're setting a value
            if (value !== undefined) {
                type = typeof value;
                // convert relative number strings (+= or -=) to relative numbers. #7345
                if (type === "string" && (ret = rrelNum.exec(value))) {
                    value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
                    // Fixes bug #9237
                    type = "number";
                }
                // Make sure that NaN and null values aren't set. See: #7116
                if (value == null || type === "number" && isNaN(value)) {
                    return;
                }
                // If a number was passed in, add 'px' to the (except for certain CSS properties)
                if (type === "number" && !jQuery.cssNumber[origName]) {
                    value += "px";
                }
                // Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
                // but it would mean to define eight (for every problematic property) identical functions
                if (!jQuery.support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
                    style[name] = "inherit";
                }
                // If a hook was provided, use that value, otherwise just set the specified value
                if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
                    // Wrapped to prevent IE from throwing errors when 'invalid' values are provided
                    // Fixes bug #5509
                    try {
                        style[name] = value;
                    } catch (e) {}
                }
            } else {
                // If a hook was provided get the non-computed value from there
                if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
                    return ret;
                }
                // Otherwise just get the value from the style object
                return style[name];
            }
        },
        css: function(elem, name, extra, styles) {
            var num, val, hooks, origName = jQuery.camelCase(name);
            // Make sure that we're working with the right name
            name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));
            // gets hook for the prefixed version
            // followed by the unprefixed version
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            // If a hook was provided get the computed value from there
            if (hooks && "get" in hooks) {
                val = hooks.get(elem, true, extra);
            }
            // Otherwise, if a way to get the computed value exists, use that
            if (val === undefined) {
                val = curCSS(elem, name, styles);
            }
            //convert "normal" to computed value
            if (val === "normal" && name in cssNormalTransform) {
                val = cssNormalTransform[name];
            }
            // Return, converting to number if forced or a qualifier was provided and val looks numeric
            if (extra === "" || extra) {
                num = parseFloat(val);
                return extra === true || jQuery.isNumeric(num) ? num || 0 : val;
            }
            return val;
        }
    });
    // NOTE: we've included the "window" in window.getComputedStyle
    // because jsdom on node.js will break without it.
    if (window.getComputedStyle) {
        getStyles = function(elem) {
            return window.getComputedStyle(elem, null);
        };
        curCSS = function(elem, name, _computed) {
            var width, minWidth, maxWidth, computed = _computed || getStyles(elem), // getPropertyValue is only needed for .css('filter') in IE9, see #12537
            ret = computed ? computed.getPropertyValue(name) || computed[name] : undefined, style = elem.style;
            if (computed) {
                if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
                    ret = jQuery.style(elem, name);
                }
                // A tribute to the "awesome hack by Dean Edwards"
                // Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
                // Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
                // this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
                if (rnumnonpx.test(ret) && rmargin.test(name)) {
                    // Remember the original values
                    width = style.width;
                    minWidth = style.minWidth;
                    maxWidth = style.maxWidth;
                    // Put in the new values to get a computed value out
                    style.minWidth = style.maxWidth = style.width = ret;
                    ret = computed.width;
                    // Revert the changed values
                    style.width = width;
                    style.minWidth = minWidth;
                    style.maxWidth = maxWidth;
                }
            }
            return ret;
        };
    } else if (document.documentElement.currentStyle) {
        getStyles = function(elem) {
            return elem.currentStyle;
        };
        curCSS = function(elem, name, _computed) {
            var left, rs, rsLeft, computed = _computed || getStyles(elem), ret = computed ? computed[name] : undefined, style = elem.style;
            // Avoid setting ret to empty string here
            // so we don't default to auto
            if (ret == null && style && style[name]) {
                ret = style[name];
            }
            // From the awesome hack by Dean Edwards
            // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291
            // If we're not dealing with a regular pixel number
            // but a number that has a weird ending, we need to convert it to pixels
            // but not position css attributes, as those are proportional to the parent element instead
            // and we can't measure the parent instead because it might trigger a "stacking dolls" problem
            if (rnumnonpx.test(ret) && !rposition.test(name)) {
                // Remember the original values
                left = style.left;
                rs = elem.runtimeStyle;
                rsLeft = rs && rs.left;
                // Put in the new values to get a computed value out
                if (rsLeft) {
                    rs.left = elem.currentStyle.left;
                }
                style.left = name === "fontSize" ? "1em" : ret;
                ret = style.pixelLeft + "px";
                // Revert the changed values
                style.left = left;
                if (rsLeft) {
                    rs.left = rsLeft;
                }
            }
            return ret === "" ? "auto" : ret;
        };
    }
    function setPositiveNumber(elem, value, subtract) {
        var matches = rnumsplit.exec(value);
        return matches ? // Guard against undefined "subtract", e.g., when used as in cssHooks
        Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px") : value;
    }
    function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
        var i = extra === (isBorderBox ? "border" : "content") ? // If we already have the right measurement, avoid augmentation
        4 : // Otherwise initialize for horizontal or vertical properties
        name === "width" ? 1 : 0, val = 0;
        for (;i < 4; i += 2) {
            // both box models exclude margin, so add it if we want it
            if (extra === "margin") {
                val += jQuery.css(elem, extra + cssExpand[i], true, styles);
            }
            if (isBorderBox) {
                // border-box includes padding, so remove it if we want content
                if (extra === "content") {
                    val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                }
                // at this point, extra isn't border nor margin, so remove border
                if (extra !== "margin") {
                    val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                }
            } else {
                // at this point, extra isn't content, so add padding
                val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                // at this point, extra isn't content nor padding, so add border
                if (extra !== "padding") {
                    val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                }
            }
        }
        return val;
    }
    function getWidthOrHeight(elem, name, extra) {
        // Start with offset property, which is equivalent to the border-box value
        var valueIsBorderBox = true, val = name === "width" ? elem.offsetWidth : elem.offsetHeight, styles = getStyles(elem), isBorderBox = jQuery.support.boxSizing && jQuery.css(elem, "boxSizing", false, styles) === "border-box";
        // some non-html elements return undefined for offsetWidth, so check for null/undefined
        // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
        // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
        if (val <= 0 || val == null) {
            // Fall back to computed then uncomputed css if necessary
            val = curCSS(elem, name, styles);
            if (val < 0 || val == null) {
                val = elem.style[name];
            }
            // Computed unit is not pixels. Stop here and return.
            if (rnumnonpx.test(val)) {
                return val;
            }
            // we need the check for style in case a browser which returns unreliable values
            // for getComputedStyle silently falls back to the reliable elem.style
            valueIsBorderBox = isBorderBox && (jQuery.support.boxSizingReliable || val === elem.style[name]);
            // Normalize "", auto, and prepare for extra
            val = parseFloat(val) || 0;
        }
        // use the active box-sizing model to add/subtract irrelevant styles
        return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px";
    }
    // Try to determine the default display value of an element
    function css_defaultDisplay(nodeName) {
        var doc = document, display = elemdisplay[nodeName];
        if (!display) {
            display = actualDisplay(nodeName, doc);
            // If the simple way fails, read from inside an iframe
            if (display === "none" || !display) {
                // Use the already-created iframe if possible
                iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>").css("cssText", "display:block !important")).appendTo(doc.documentElement);
                // Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
                doc = (iframe[0].contentWindow || iframe[0].contentDocument).document;
                doc.write("<!doctype html><html><body>");
                doc.close();
                display = actualDisplay(nodeName, doc);
                iframe.detach();
            }
            // Store the correct default display
            elemdisplay[nodeName] = display;
        }
        return display;
    }
    // Called ONLY from within css_defaultDisplay
    function actualDisplay(name, doc) {
        var elem = jQuery(doc.createElement(name)).appendTo(doc.body), display = jQuery.css(elem[0], "display");
        elem.remove();
        return display;
    }
    jQuery.each([ "height", "width" ], function(i, name) {
        jQuery.cssHooks[name] = {
            get: function(elem, computed, extra) {
                if (computed) {
                    // certain elements can have dimension info if we invisibly show them
                    // however, it must have a current display style that would benefit from this
                    return elem.offsetWidth === 0 && rdisplayswap.test(jQuery.css(elem, "display")) ? jQuery.swap(elem, cssShow, function() {
                        return getWidthOrHeight(elem, name, extra);
                    }) : getWidthOrHeight(elem, name, extra);
                }
            },
            set: function(elem, value, extra) {
                var styles = extra && getStyles(elem);
                return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, jQuery.support.boxSizing && jQuery.css(elem, "boxSizing", false, styles) === "border-box", styles) : 0);
            }
        };
    });
    if (!jQuery.support.opacity) {
        jQuery.cssHooks.opacity = {
            get: function(elem, computed) {
                // IE uses filters for opacity
                return ropacity.test((computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "") ? .01 * parseFloat(RegExp.$1) + "" : computed ? "1" : "";
            },
            set: function(elem, value) {
                var style = elem.style, currentStyle = elem.currentStyle, opacity = jQuery.isNumeric(value) ? "alpha(opacity=" + value * 100 + ")" : "", filter = currentStyle && currentStyle.filter || style.filter || "";
                // IE has trouble with opacity if it does not have layout
                // Force it by setting the zoom level
                style.zoom = 1;
                // if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
                // if value === "", then remove inline opacity #12685
                if ((value >= 1 || value === "") && jQuery.trim(filter.replace(ralpha, "")) === "" && style.removeAttribute) {
                    // Setting style.filter to null, "" & " " still leave "filter:" in the cssText
                    // if "filter:" is present at all, clearType is disabled, we want to avoid this
                    // style.removeAttribute is IE Only, but so apparently is this code path...
                    style.removeAttribute("filter");
                    // if there is no filter style applied in a css rule or unset inline opacity, we are done
                    if (value === "" || currentStyle && !currentStyle.filter) {
                        return;
                    }
                }
                // otherwise, set new filter values
                style.filter = ralpha.test(filter) ? filter.replace(ralpha, opacity) : filter + " " + opacity;
            }
        };
    }
    // These hooks cannot be added until DOM ready because the support test
    // for it is not run until after DOM ready
    jQuery(function() {
        if (!jQuery.support.reliableMarginRight) {
            jQuery.cssHooks.marginRight = {
                get: function(elem, computed) {
                    if (computed) {
                        // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
                        // Work around by temporarily setting element display to inline-block
                        return jQuery.swap(elem, {
                            display: "inline-block"
                        }, curCSS, [ elem, "marginRight" ]);
                    }
                }
            };
        }
        // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
        // getComputedStyle returns percent when specified for top/left/bottom/right
        // rather than make the css module depend on the offset module, we just check for it here
        if (!jQuery.support.pixelPosition && jQuery.fn.position) {
            jQuery.each([ "top", "left" ], function(i, prop) {
                jQuery.cssHooks[prop] = {
                    get: function(elem, computed) {
                        if (computed) {
                            computed = curCSS(elem, prop);
                            // if curCSS returns percentage, fallback to offset
                            return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
                        }
                    }
                };
            });
        }
    });
    if (jQuery.expr && jQuery.expr.filters) {
        jQuery.expr.filters.hidden = function(elem) {
            // Support: Opera <= 12.12
            // Opera reports offsetWidths and offsetHeights less than zero on some elements
            return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 || !jQuery.support.reliableHiddenOffsets && (elem.style && elem.style.display || jQuery.css(elem, "display")) === "none";
        };
        jQuery.expr.filters.visible = function(elem) {
            return !jQuery.expr.filters.hidden(elem);
        };
    }
    // These hooks are used by animate to expand properties
    jQuery.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function(prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
            expand: function(value) {
                var i = 0, expanded = {}, // assumes a single number if not a string
                parts = typeof value === "string" ? value.split(" ") : [ value ];
                for (;i < 4; i++) {
                    expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
                }
                return expanded;
            }
        };
        if (!rmargin.test(prefix)) {
            jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
        }
    });
    var r20 = /%20/g, rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
    jQuery.fn.extend({
        serialize: function() {
            return jQuery.param(this.serializeArray());
        },
        serializeArray: function() {
            return this.map(function() {
                // Can add propHook for "elements" to filter or add form elements
                var elements = jQuery.prop(this, "elements");
                return elements ? jQuery.makeArray(elements) : this;
            }).filter(function() {
                var type = this.type;
                // Use .is(":disabled") so that fieldset[disabled] works
                return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !manipulation_rcheckableType.test(type));
            }).map(function(i, elem) {
                var val = jQuery(this).val();
                return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function(val) {
                    return {
                        name: elem.name,
                        value: val.replace(rCRLF, "\r\n")
                    };
                }) : {
                    name: elem.name,
                    value: val.replace(rCRLF, "\r\n")
                };
            }).get();
        }
    });
    //Serialize an array of form elements or a set of
    //key/values into a query string
    jQuery.param = function(a, traditional) {
        var prefix, s = [], add = function(key, value) {
            // If value is a function, invoke it and return its value
            value = jQuery.isFunction(value) ? value() : value == null ? "" : value;
            s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
        };
        // Set traditional to true for jQuery <= 1.3.2 behavior.
        if (traditional === undefined) {
            traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
        }
        // If an array was passed in, assume that it is an array of form elements.
        if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
            // Serialize the form elements
            jQuery.each(a, function() {
                add(this.name, this.value);
            });
        } else {
            // If traditional, encode the "old" way (the way 1.3.2 or older
            // did it), otherwise encode params recursively.
            for (prefix in a) {
                buildParams(prefix, a[prefix], traditional, add);
            }
        }
        // Return the resulting serialization
        return s.join("&").replace(r20, "+");
    };
    function buildParams(prefix, obj, traditional, add) {
        var name;
        if (jQuery.isArray(obj)) {
            // Serialize array item.
            jQuery.each(obj, function(i, v) {
                if (traditional || rbracket.test(prefix)) {
                    // Treat each array item as a scalar.
                    add(prefix, v);
                } else {
                    // Item is non-scalar (array or object), encode its numeric index.
                    buildParams(prefix + "[" + (typeof v === "object" ? i : "") + "]", v, traditional, add);
                }
            });
        } else if (!traditional && jQuery.type(obj) === "object") {
            // Serialize object item.
            for (name in obj) {
                buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
            }
        } else {
            // Serialize scalar item.
            add(prefix, obj);
        }
    }
    jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup error contextmenu").split(" "), function(i, name) {
        // Handle event binding
        jQuery.fn[name] = function(data, fn) {
            return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
        };
    });
    jQuery.fn.extend({
        hover: function(fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        },
        bind: function(types, data, fn) {
            return this.on(types, null, data, fn);
        },
        unbind: function(types, fn) {
            return this.off(types, null, fn);
        },
        delegate: function(selector, types, data, fn) {
            return this.on(types, selector, data, fn);
        },
        undelegate: function(selector, types, fn) {
            // ( namespace ) or ( selector, types [, fn] )
            return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
        }
    });
    var // Document location
    ajaxLocParts, ajaxLocation, ajax_nonce = jQuery.now(), ajax_rquery = /\?/, rhash = /#.*$/, rts = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/gm, // IE leaves an \r character at EOL
    // #7653, #8125, #8152: local protocol detection
    rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, rurl = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/, // Keep a copy of the old load method
    _load = jQuery.fn.load, /* Prefilters
     * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
     * 2) These are called:
     *    - BEFORE asking for a transport
     *    - AFTER param serialization (s.data is a string if s.processData is true)
     * 3) key is the dataType
     * 4) the catchall symbol "*" can be used
     * 5) execution will start with transport dataType and THEN continue down to "*" if needed
     */
    prefilters = {}, /* Transports bindings
     * 1) key is the dataType
     * 2) the catchall symbol "*" can be used
     * 3) selection will start with transport dataType and THEN go to "*" if needed
     */
    transports = {}, // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
    allTypes = "*/".concat("*");
    // #8138, IE may throw an exception when accessing
    // a field from window.location if document.domain has been set
    try {
        ajaxLocation = location.href;
    } catch (e) {
        // Use the href attribute of an A element
        // since IE will modify it given document.location
        ajaxLocation = document.createElement("a");
        ajaxLocation.href = "";
        ajaxLocation = ajaxLocation.href;
    }
    // Segment location into parts
    ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];
    // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
    function addToPrefiltersOrTransports(structure) {
        // dataTypeExpression is optional and defaults to "*"
        return function(dataTypeExpression, func) {
            if (typeof dataTypeExpression !== "string") {
                func = dataTypeExpression;
                dataTypeExpression = "*";
            }
            var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(core_rnotwhite) || [];
            if (jQuery.isFunction(func)) {
                // For each dataType in the dataTypeExpression
                while (dataType = dataTypes[i++]) {
                    // Prepend if requested
                    if (dataType[0] === "+") {
                        dataType = dataType.slice(1) || "*";
                        (structure[dataType] = structure[dataType] || []).unshift(func);
                    } else {
                        (structure[dataType] = structure[dataType] || []).push(func);
                    }
                }
            }
        };
    }
    // Base inspection function for prefilters and transports
    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        var inspected = {}, seekingTransport = structure === transports;
        function inspect(dataType) {
            var selected;
            inspected[dataType] = true;
            jQuery.each(structure[dataType] || [], function(_, prefilterOrFactory) {
                var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
                if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
                    options.dataTypes.unshift(dataTypeOrTransport);
                    inspect(dataTypeOrTransport);
                    return false;
                } else if (seekingTransport) {
                    return !(selected = dataTypeOrTransport);
                }
            });
            return selected;
        }
        return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
    }
    // A special extend for ajax options
    // that takes "flat" options (not to be deep extended)
    // Fixes #9887
    function ajaxExtend(target, src) {
        var deep, key, flatOptions = jQuery.ajaxSettings.flatOptions || {};
        for (key in src) {
            if (src[key] !== undefined) {
                (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
            }
        }
        if (deep) {
            jQuery.extend(true, target, deep);
        }
        return target;
    }
    jQuery.fn.load = function(url, params, callback) {
        if (typeof url !== "string" && _load) {
            return _load.apply(this, arguments);
        }
        var selector, response, type, self = this, off = url.indexOf(" ");
        if (off >= 0) {
            selector = url.slice(off, url.length);
            url = url.slice(0, off);
        }
        // If it's a function
        if (jQuery.isFunction(params)) {
            // We assume that it's the callback
            callback = params;
            params = undefined;
        } else if (params && typeof params === "object") {
            type = "POST";
        }
        // If we have elements to modify, make the request
        if (self.length > 0) {
            jQuery.ajax({
                url: url,
                // if "type" variable is undefined, then "GET" method will be used
                type: type,
                dataType: "html",
                data: params
            }).done(function(responseText) {
                // Save response for use in complete callback
                response = arguments;
                self.html(selector ? // If a selector was specified, locate the right elements in a dummy div
                // Exclude scripts to avoid IE 'Permission Denied' errors
                jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : // Otherwise use the full result
                responseText);
            }).complete(callback && function(jqXHR, status) {
                self.each(callback, response || [ jqXHR.responseText, status, jqXHR ]);
            });
        }
        return this;
    };
    // Attach a bunch of functions for handling common AJAX events
    jQuery.each([ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function(i, type) {
        jQuery.fn[type] = function(fn) {
            return this.on(type, fn);
        };
    });
    jQuery.extend({
        // Counter for holding the number of active queries
        active: 0,
        // Last-Modified header cache for next request
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: ajaxLocation,
            type: "GET",
            isLocal: rlocalProtocol.test(ajaxLocParts[1]),
            global: true,
            processData: true,
            async: true,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            /*
             timeout: 0,
             data: null,
             dataType: null,
             username: null,
             password: null,
             cache: null,
             throws: false,
             traditional: false,
             headers: {},
             */
            accepts: {
                "*": allTypes,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
            contents: {
                xml: /xml/,
                html: /html/,
                json: /json/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },
            // Data converters
            // Keys separate source (or catchall "*") and destination types with a single space
            converters: {
                // Convert anything to text
                "* text": String,
                // Text to html (true = no transformation)
                "text html": true,
                // Evaluate text as a json expression
                "text json": jQuery.parseJSON,
                // Parse text as xml
                "text xml": jQuery.parseXML
            },
            // For options that shouldn't be deep extended:
            // you can add your own custom options here if
            // and when you create one that shouldn't be
            // deep extended (see ajaxExtend)
            flatOptions: {
                url: true,
                context: true
            }
        },
        // Creates a full fledged settings object into target
        // with both ajaxSettings and settings fields.
        // If target is omitted, writes into ajaxSettings.
        ajaxSetup: function(target, settings) {
            return settings ? // Building a settings object
            ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : // Extending ajaxSettings
            ajaxExtend(jQuery.ajaxSettings, target);
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        // Main method
        ajax: function(url, options) {
            // If url is an object, simulate pre-1.5 signature
            if (typeof url === "object") {
                options = url;
                url = undefined;
            }
            // Force options to be an object
            options = options || {};
            var // Cross-domain detection vars
            parts, // Loop variable
            i, // URL without anti-cache param
            cacheURL, // Response headers as string
            responseHeadersString, // timeout handle
            timeoutTimer, // To know if global events are to be dispatched
            fireGlobals, transport, // Response headers
            responseHeaders, // Create the final options object
            s = jQuery.ajaxSetup({}, options), // Callbacks context
            callbackContext = s.context || s, // Context for global events is callbackContext if it is a DOM node or jQuery collection
            globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event, // Deferreds
            deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks("once memory"), // Status-dependent callbacks
            statusCode = s.statusCode || {}, // Headers (they are sent all at once)
            requestHeaders = {}, requestHeadersNames = {}, // The jqXHR state
            state = 0, // Default abort message
            strAbort = "canceled", // Fake xhr
            jqXHR = {
                readyState: 0,
                // Builds headers hashtable if needed
                getResponseHeader: function(key) {
                    var match;
                    if (state === 2) {
                        if (!responseHeaders) {
                            responseHeaders = {};
                            while (match = rheaders.exec(responseHeadersString)) {
                                responseHeaders[match[1].toLowerCase()] = match[2];
                            }
                        }
                        match = responseHeaders[key.toLowerCase()];
                    }
                    return match == null ? null : match;
                },
                // Raw string
                getAllResponseHeaders: function() {
                    return state === 2 ? responseHeadersString : null;
                },
                // Caches the header
                setRequestHeader: function(name, value) {
                    var lname = name.toLowerCase();
                    if (!state) {
                        name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
                        requestHeaders[name] = value;
                    }
                    return this;
                },
                // Overrides response content-type header
                overrideMimeType: function(type) {
                    if (!state) {
                        s.mimeType = type;
                    }
                    return this;
                },
                // Status-dependent callbacks
                statusCode: function(map) {
                    var code;
                    if (map) {
                        if (state < 2) {
                            for (code in map) {
                                // Lazy-add the new callback in a way that preserves old ones
                                statusCode[code] = [ statusCode[code], map[code] ];
                            }
                        } else {
                            // Execute the appropriate callbacks
                            jqXHR.always(map[jqXHR.status]);
                        }
                    }
                    return this;
                },
                // Cancel the request
                abort: function(statusText) {
                    var finalText = statusText || strAbort;
                    if (transport) {
                        transport.abort(finalText);
                    }
                    done(0, finalText);
                    return this;
                }
            };
            // Attach deferreds
            deferred.promise(jqXHR).complete = completeDeferred.add;
            jqXHR.success = jqXHR.done;
            jqXHR.error = jqXHR.fail;
            // Remove hash character (#7531: and string promotion)
            // Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
            // Handle falsy url in the settings object (#10093: consistency with old signature)
            // We also use the url parameter if available
            s.url = ((url || s.url || ajaxLocation) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");
            // Alias method option to type as per ticket #12004
            s.type = options.method || options.type || s.method || s.type;
            // Extract dataTypes list
            s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(core_rnotwhite) || [ "" ];
            // A cross-domain request is in order when we have a protocol:host:port mismatch
            if (s.crossDomain == null) {
                parts = rurl.exec(s.url.toLowerCase());
                s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === "http:" ? "80" : "443")) !== (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? "80" : "443"))));
            }
            // Convert data if not already a string
            if (s.data && s.processData && typeof s.data !== "string") {
                s.data = jQuery.param(s.data, s.traditional);
            }
            // Apply prefilters
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
            // If request was aborted inside a prefilter, stop there
            if (state === 2) {
                return jqXHR;
            }
            // We can fire global events as of now if asked to
            fireGlobals = s.global;
            // Watch for a new set of requests
            if (fireGlobals && jQuery.active++ === 0) {
                jQuery.event.trigger("ajaxStart");
            }
            // Uppercase the type
            s.type = s.type.toUpperCase();
            // Determine if request has content
            s.hasContent = !rnoContent.test(s.type);
            // Save the URL in case we're toying with the If-Modified-Since
            // and/or If-None-Match header later on
            cacheURL = s.url;
            // More options handling for requests with no content
            if (!s.hasContent) {
                // If data is available, append data to url
                if (s.data) {
                    cacheURL = s.url += (ajax_rquery.test(cacheURL) ? "&" : "?") + s.data;
                    // #9682: remove data so that it's not used in an eventual retry
                    delete s.data;
                }
                // Add anti-cache in url if needed
                if (s.cache === false) {
                    s.url = rts.test(cacheURL) ? // If there is already a '_' parameter, set its value
                    cacheURL.replace(rts, "$1_=" + ajax_nonce++) : // Otherwise add one to the end
                    cacheURL + (ajax_rquery.test(cacheURL) ? "&" : "?") + "_=" + ajax_nonce++;
                }
            }
            // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
            if (s.ifModified) {
                if (jQuery.lastModified[cacheURL]) {
                    jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
                }
                if (jQuery.etag[cacheURL]) {
                    jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
                }
            }
            // Set the correct header, if data is being sent
            if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
                jqXHR.setRequestHeader("Content-Type", s.contentType);
            }
            // Set the Accepts header for the server, depending on the dataType
            jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);
            // Check for headers option
            for (i in s.headers) {
                jqXHR.setRequestHeader(i, s.headers[i]);
            }
            // Allow custom headers/mimetypes and early abort
            if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
                // Abort if not done already and return
                return jqXHR.abort();
            }
            // aborting is no longer a cancellation
            strAbort = "abort";
            // Install callbacks on deferreds
            for (i in {
                success: 1,
                error: 1,
                complete: 1
            }) {
                jqXHR[i](s[i]);
            }
            // Get transport
            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
            // If no transport, we auto-abort
            if (!transport) {
                done(-1, "No Transport");
            } else {
                jqXHR.readyState = 1;
                // Send global event
                if (fireGlobals) {
                    globalEventContext.trigger("ajaxSend", [ jqXHR, s ]);
                }
                // Timeout
                if (s.async && s.timeout > 0) {
                    timeoutTimer = setTimeout(function() {
                        jqXHR.abort("timeout");
                    }, s.timeout);
                }
                try {
                    state = 1;
                    transport.send(requestHeaders, done);
                } catch (e) {
                    // Propagate exception as error if not done
                    if (state < 2) {
                        done(-1, e);
                    } else {
                        throw e;
                    }
                }
            }
            // Callback for when everything is done
            function done(status, nativeStatusText, responses, headers) {
                var isSuccess, success, error, response, modified, statusText = nativeStatusText;
                // Called once
                if (state === 2) {
                    return;
                }
                // State is "done" now
                state = 2;
                // Clear timeout if it exists
                if (timeoutTimer) {
                    clearTimeout(timeoutTimer);
                }
                // Dereference transport for early garbage collection
                // (no matter how long the jqXHR object will be used)
                transport = undefined;
                // Cache response headers
                responseHeadersString = headers || "";
                // Set readyState
                jqXHR.readyState = status > 0 ? 4 : 0;
                // Determine if successful
                isSuccess = status >= 200 && status < 300 || status === 304;
                // Get response data
                if (responses) {
                    response = ajaxHandleResponses(s, jqXHR, responses);
                }
                // Convert no matter what (that way responseXXX fields are always set)
                response = ajaxConvert(s, response, jqXHR, isSuccess);
                // If successful, handle type chaining
                if (isSuccess) {
                    // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                    if (s.ifModified) {
                        modified = jqXHR.getResponseHeader("Last-Modified");
                        if (modified) {
                            jQuery.lastModified[cacheURL] = modified;
                        }
                        modified = jqXHR.getResponseHeader("etag");
                        if (modified) {
                            jQuery.etag[cacheURL] = modified;
                        }
                    }
                    // if no content
                    if (status === 204 || s.type === "HEAD") {
                        statusText = "nocontent";
                    } else if (status === 304) {
                        statusText = "notmodified";
                    } else {
                        statusText = response.state;
                        success = response.data;
                        error = response.error;
                        isSuccess = !error;
                    }
                } else {
                    // We extract error from statusText
                    // then normalize statusText and status for non-aborts
                    error = statusText;
                    if (status || !statusText) {
                        statusText = "error";
                        if (status < 0) {
                            status = 0;
                        }
                    }
                }
                // Set data for the fake xhr object
                jqXHR.status = status;
                jqXHR.statusText = (nativeStatusText || statusText) + "";
                // Success/Error
                if (isSuccess) {
                    deferred.resolveWith(callbackContext, [ success, statusText, jqXHR ]);
                } else {
                    deferred.rejectWith(callbackContext, [ jqXHR, statusText, error ]);
                }
                // Status-dependent callbacks
                jqXHR.statusCode(statusCode);
                statusCode = undefined;
                if (fireGlobals) {
                    globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [ jqXHR, s, isSuccess ? success : error ]);
                }
                // Complete
                completeDeferred.fireWith(callbackContext, [ jqXHR, statusText ]);
                if (fireGlobals) {
                    globalEventContext.trigger("ajaxComplete", [ jqXHR, s ]);
                    // Handle the global AJAX counter
                    if (!--jQuery.active) {
                        jQuery.event.trigger("ajaxStop");
                    }
                }
            }
            return jqXHR;
        },
        getJSON: function(url, data, callback) {
            return jQuery.get(url, data, callback, "json");
        },
        getScript: function(url, callback) {
            return jQuery.get(url, undefined, callback, "script");
        }
    });
    jQuery.each([ "get", "post" ], function(i, method) {
        jQuery[method] = function(url, data, callback, type) {
            // shift arguments if data argument was omitted
            if (jQuery.isFunction(data)) {
                type = type || callback;
                callback = data;
                data = undefined;
            }
            return jQuery.ajax({
                url: url,
                type: method,
                dataType: type,
                data: data,
                success: callback
            });
        };
    });
    /* Handles responses to an ajax request:
     * - finds the right dataType (mediates between content-type and expected dataType)
     * - returns the corresponding response
     */
    function ajaxHandleResponses(s, jqXHR, responses) {
        var firstDataType, ct, finalDataType, type, contents = s.contents, dataTypes = s.dataTypes;
        // Remove auto dataType and get content-type in the process
        while (dataTypes[0] === "*") {
            dataTypes.shift();
            if (ct === undefined) {
                ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
            }
        }
        // Check if we're dealing with a known content-type
        if (ct) {
            for (type in contents) {
                if (contents[type] && contents[type].test(ct)) {
                    dataTypes.unshift(type);
                    break;
                }
            }
        }
        // Check to see if we have a response for the expected dataType
        if (dataTypes[0] in responses) {
            finalDataType = dataTypes[0];
        } else {
            // Try convertible dataTypes
            for (type in responses) {
                if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                    finalDataType = type;
                    break;
                }
                if (!firstDataType) {
                    firstDataType = type;
                }
            }
            // Or just use first one
            finalDataType = finalDataType || firstDataType;
        }
        // If we found a dataType
        // We add the dataType to the list if needed
        // and return the corresponding response
        if (finalDataType) {
            if (finalDataType !== dataTypes[0]) {
                dataTypes.unshift(finalDataType);
            }
            return responses[finalDataType];
        }
    }
    /* Chain conversions given the request and the original response
     * Also sets the responseXXX fields on the jqXHR instance
     */
    function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2, current, conv, tmp, prev, converters = {}, // Work with a copy of dataTypes in case we need to modify it for conversion
        dataTypes = s.dataTypes.slice();
        // Create converters map with lowercased keys
        if (dataTypes[1]) {
            for (conv in s.converters) {
                converters[conv.toLowerCase()] = s.converters[conv];
            }
        }
        current = dataTypes.shift();
        // Convert to each sequential dataType
        while (current) {
            if (s.responseFields[current]) {
                jqXHR[s.responseFields[current]] = response;
            }
            // Apply the dataFilter if provided
            if (!prev && isSuccess && s.dataFilter) {
                response = s.dataFilter(response, s.dataType);
            }
            prev = current;
            current = dataTypes.shift();
            if (current) {
                // There's only work to do if current dataType is non-auto
                if (current === "*") {
                    current = prev;
                } else if (prev !== "*" && prev !== current) {
                    // Seek a direct converter
                    conv = converters[prev + " " + current] || converters["* " + current];
                    // If none found, seek a pair
                    if (!conv) {
                        for (conv2 in converters) {
                            // If conv2 outputs current
                            tmp = conv2.split(" ");
                            if (tmp[1] === current) {
                                // If prev can be converted to accepted input
                                conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                                if (conv) {
                                    // Condense equivalence converters
                                    if (conv === true) {
                                        conv = converters[conv2];
                                    } else if (converters[conv2] !== true) {
                                        current = tmp[0];
                                        dataTypes.unshift(tmp[1]);
                                    }
                                    break;
                                }
                            }
                        }
                    }
                    // Apply converter (if not an equivalence)
                    if (conv !== true) {
                        // Unless errors are allowed to bubble, catch and return them
                        if (conv && s["throws"]) {
                            response = conv(response);
                        } else {
                            try {
                                response = conv(response);
                            } catch (e) {
                                return {
                                    state: "parsererror",
                                    error: conv ? e : "No conversion from " + prev + " to " + current
                                };
                            }
                        }
                    }
                }
            }
        }
        return {
            state: "success",
            data: response
        };
    }
    // Install script dataType
    jQuery.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /(?:java|ecma)script/
        },
        converters: {
            "text script": function(text) {
                jQuery.globalEval(text);
                return text;
            }
        }
    });
    // Handle cache's special case and global
    jQuery.ajaxPrefilter("script", function(s) {
        if (s.cache === undefined) {
            s.cache = false;
        }
        if (s.crossDomain) {
            s.type = "GET";
            s.global = false;
        }
    });
    // Bind script tag hack transport
    jQuery.ajaxTransport("script", function(s) {
        // This transport only deals with cross domain requests
        if (s.crossDomain) {
            var script, head = document.head || jQuery("head")[0] || document.documentElement;
            return {
                send: function(_, callback) {
                    script = document.createElement("script");
                    script.async = true;
                    if (s.scriptCharset) {
                        script.charset = s.scriptCharset;
                    }
                    script.src = s.url;
                    // Attach handlers for all browsers
                    script.onload = script.onreadystatechange = function(_, isAbort) {
                        if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {
                            // Handle memory leak in IE
                            script.onload = script.onreadystatechange = null;
                            // Remove the script
                            if (script.parentNode) {
                                script.parentNode.removeChild(script);
                            }
                            // Dereference the script
                            script = null;
                            // Callback if not abort
                            if (!isAbort) {
                                callback(200, "success");
                            }
                        }
                    };
                    // Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
                    // Use native DOM manipulation to avoid our domManip AJAX trickery
                    head.insertBefore(script, head.firstChild);
                },
                abort: function() {
                    if (script) {
                        script.onload(undefined, true);
                    }
                }
            };
        }
    });
    var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
    // Default jsonp settings
    jQuery.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
            var callback = oldCallbacks.pop() || jQuery.expando + "_" + ajax_nonce++;
            this[callback] = true;
            return callback;
        }
    });
    // Detect, normalize options and install callbacks for jsonp requests
    jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {
        var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && !(s.contentType || "").indexOf("application/x-www-form-urlencoded") && rjsonp.test(s.data) && "data");
        // Handle iff the expected data type is "jsonp" or we have a parameter to set
        if (jsonProp || s.dataTypes[0] === "jsonp") {
            // Get callback name, remembering preexisting value associated with it
            callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
            // Insert callback into url or form data
            if (jsonProp) {
                s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
            } else if (s.jsonp !== false) {
                s.url += (ajax_rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
            }
            // Use data converter to retrieve json after script execution
            s.converters["script json"] = function() {
                if (!responseContainer) {
                    jQuery.error(callbackName + " was not called");
                }
                return responseContainer[0];
            };
            // force json dataType
            s.dataTypes[0] = "json";
            // Install callback
            overwritten = window[callbackName];
            window[callbackName] = function() {
                responseContainer = arguments;
            };
            // Clean-up function (fires after converters)
            jqXHR.always(function() {
                // Restore preexisting value
                window[callbackName] = overwritten;
                // Save back as free
                if (s[callbackName]) {
                    // make sure that re-using the options doesn't screw things around
                    s.jsonpCallback = originalSettings.jsonpCallback;
                    // save the callback name for future use
                    oldCallbacks.push(callbackName);
                }
                // Call if it was a function and we have a response
                if (responseContainer && jQuery.isFunction(overwritten)) {
                    overwritten(responseContainer[0]);
                }
                responseContainer = overwritten = undefined;
            });
            // Delegate to script
            return "script";
        }
    });
    var xhrCallbacks, xhrSupported, xhrId = 0, // #5280: Internet Explorer will keep connections alive if we don't abort on unload
    xhrOnUnloadAbort = window.ActiveXObject && function() {
        // Abort all pending requests
        var key;
        for (key in xhrCallbacks) {
            xhrCallbacks[key](undefined, true);
        }
    };
    // Functions to create xhrs
    function createStandardXHR() {
        try {
            return new window.XMLHttpRequest();
        } catch (e) {}
    }
    function createActiveXHR() {
        try {
            return new window.ActiveXObject("Microsoft.XMLHTTP");
        } catch (e) {}
    }
    // Create the request object
    // (This is still attached to ajaxSettings for backward compatibility)
    jQuery.ajaxSettings.xhr = window.ActiveXObject ? /* Microsoft failed to properly
         * implement the XMLHttpRequest in IE7 (can't request local files),
         * so we use the ActiveXObject when it is available
         * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
         * we need a fallback.
         */
    function() {
        return !this.isLocal && createStandardXHR() || createActiveXHR();
    } : // For all other browsers, use the standard XMLHttpRequest object
    createStandardXHR;
    // Determine support properties
    xhrSupported = jQuery.ajaxSettings.xhr();
    jQuery.support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
    xhrSupported = jQuery.support.ajax = !!xhrSupported;
    // Create transport if the browser can provide an xhr
    if (xhrSupported) {
        jQuery.ajaxTransport(function(s) {
            // Cross domain only allowed if supported through XMLHttpRequest
            if (!s.crossDomain || jQuery.support.cors) {
                var callback;
                return {
                    send: function(headers, complete) {
                        // Get a new xhr
                        var handle, i, xhr = s.xhr();
                        // Open the socket
                        // Passing null username, generates a login popup on Opera (#2865)
                        if (s.username) {
                            xhr.open(s.type, s.url, s.async, s.username, s.password);
                        } else {
                            xhr.open(s.type, s.url, s.async);
                        }
                        // Apply custom fields if provided
                        if (s.xhrFields) {
                            for (i in s.xhrFields) {
                                xhr[i] = s.xhrFields[i];
                            }
                        }
                        // Override mime type if needed
                        if (s.mimeType && xhr.overrideMimeType) {
                            xhr.overrideMimeType(s.mimeType);
                        }
                        // X-Requested-With header
                        // For cross-domain requests, seeing as conditions for a preflight are
                        // akin to a jigsaw puzzle, we simply never set it to be sure.
                        // (it can always be set on a per-request basis or even using ajaxSetup)
                        // For same-domain requests, won't change header if already provided.
                        if (!s.crossDomain && !headers["X-Requested-With"]) {
                            headers["X-Requested-With"] = "XMLHttpRequest";
                        }
                        // Need an extra try/catch for cross domain requests in Firefox 3
                        try {
                            for (i in headers) {
                                xhr.setRequestHeader(i, headers[i]);
                            }
                        } catch (err) {}
                        // Do send the request
                        // This may raise an exception which is actually
                        // handled in jQuery.ajax (so no try/catch here)
                        xhr.send(s.hasContent && s.data || null);
                        // Listener
                        callback = function(_, isAbort) {
                            var status, responseHeaders, statusText, responses;
                            // Firefox throws exceptions when accessing properties
                            // of an xhr when a network error occurred
                            // http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
                            try {
                                // Was never called and is aborted or complete
                                if (callback && (isAbort || xhr.readyState === 4)) {
                                    // Only called once
                                    callback = undefined;
                                    // Do not keep as active anymore
                                    if (handle) {
                                        xhr.onreadystatechange = jQuery.noop;
                                        if (xhrOnUnloadAbort) {
                                            delete xhrCallbacks[handle];
                                        }
                                    }
                                    // If it's an abort
                                    if (isAbort) {
                                        // Abort it manually if needed
                                        if (xhr.readyState !== 4) {
                                            xhr.abort();
                                        }
                                    } else {
                                        responses = {};
                                        status = xhr.status;
                                        responseHeaders = xhr.getAllResponseHeaders();
                                        // When requesting binary data, IE6-9 will throw an exception
                                        // on any attempt to access responseText (#11426)
                                        if (typeof xhr.responseText === "string") {
                                            responses.text = xhr.responseText;
                                        }
                                        // Firefox throws an exception when accessing
                                        // statusText for faulty cross-domain requests
                                        try {
                                            statusText = xhr.statusText;
                                        } catch (e) {
                                            // We normalize with Webkit giving an empty statusText
                                            statusText = "";
                                        }
                                        // Filter status for non standard behaviors
                                        // If the request is local and we have data: assume a success
                                        // (success with no data won't get notified, that's the best we
                                        // can do given current implementations)
                                        if (!status && s.isLocal && !s.crossDomain) {
                                            status = responses.text ? 200 : 404;
                                        } else if (status === 1223) {
                                            status = 204;
                                        }
                                    }
                                }
                            } catch (firefoxAccessException) {
                                if (!isAbort) {
                                    complete(-1, firefoxAccessException);
                                }
                            }
                            // Call complete if needed
                            if (responses) {
                                complete(status, statusText, responses, responseHeaders);
                            }
                        };
                        if (!s.async) {
                            // if we're in sync mode we fire the callback
                            callback();
                        } else if (xhr.readyState === 4) {
                            // (IE6 & IE7) if it's in cache and has been
                            // retrieved directly we need to fire the callback
                            setTimeout(callback);
                        } else {
                            handle = ++xhrId;
                            if (xhrOnUnloadAbort) {
                                // Create the active xhrs callbacks list if needed
                                // and attach the unload handler
                                if (!xhrCallbacks) {
                                    xhrCallbacks = {};
                                    jQuery(window).unload(xhrOnUnloadAbort);
                                }
                                // Add to list of active xhrs callbacks
                                xhrCallbacks[handle] = callback;
                            }
                            xhr.onreadystatechange = callback;
                        }
                    },
                    abort: function() {
                        if (callback) {
                            callback(undefined, true);
                        }
                    }
                };
            }
        });
    }
    var fxNow, timerId, rfxtypes = /^(?:toggle|show|hide)$/, rfxnum = new RegExp("^(?:([+-])=|)(" + core_pnum + ")([a-z%]*)$", "i"), rrun = /queueHooks$/, animationPrefilters = [ defaultPrefilter ], tweeners = {
        "*": [ function(prop, value) {
            var tween = this.createTween(prop, value), target = tween.cur(), parts = rfxnum.exec(value), unit = parts && parts[3] || (jQuery.cssNumber[prop] ? "" : "px"), // Starting value computation is required for potential unit mismatches
            start = (jQuery.cssNumber[prop] || unit !== "px" && +target) && rfxnum.exec(jQuery.css(tween.elem, prop)), scale = 1, maxIterations = 20;
            if (start && start[3] !== unit) {
                // Trust units reported by jQuery.css
                unit = unit || start[3];
                // Make sure we update the tween properties later on
                parts = parts || [];
                // Iteratively approximate from a nonzero starting point
                start = +target || 1;
                do {
                    // If previous iteration zeroed out, double until we get *something*
                    // Use a string for doubling factor so we don't accidentally see scale as unchanged below
                    scale = scale || ".5";
                    // Adjust and apply
                    start = start / scale;
                    jQuery.style(tween.elem, prop, start + unit);
                } while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);
            }
            // Update tween properties
            if (parts) {
                start = tween.start = +start || +target || 0;
                tween.unit = unit;
                // If a +=/-= token was provided, we're doing a relative animation
                tween.end = parts[1] ? start + (parts[1] + 1) * parts[2] : +parts[2];
            }
            return tween;
        } ]
    };
    // Animations created synchronously will run synchronously
    function createFxNow() {
        setTimeout(function() {
            fxNow = undefined;
        });
        return fxNow = jQuery.now();
    }
    function createTween(value, prop, animation) {
        var tween, collection = (tweeners[prop] || []).concat(tweeners["*"]), index = 0, length = collection.length;
        for (;index < length; index++) {
            if (tween = collection[index].call(animation, prop, value)) {
                // we're done with this property
                return tween;
            }
        }
    }
    function Animation(elem, properties, options) {
        var result, stopped, index = 0, length = animationPrefilters.length, deferred = jQuery.Deferred().always(function() {
            // don't match elem in the :animated selector
            delete tick.elem;
        }), tick = function() {
            if (stopped) {
                return false;
            }
            var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime), // archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
            temp = remaining / animation.duration || 0, percent = 1 - temp, index = 0, length = animation.tweens.length;
            for (;index < length; index++) {
                animation.tweens[index].run(percent);
            }
            deferred.notifyWith(elem, [ animation, percent, remaining ]);
            if (percent < 1 && length) {
                return remaining;
            } else {
                deferred.resolveWith(elem, [ animation ]);
                return false;
            }
        }, animation = deferred.promise({
            elem: elem,
            props: jQuery.extend({}, properties),
            opts: jQuery.extend(true, {
                specialEasing: {}
            }, options),
            originalProperties: properties,
            originalOptions: options,
            startTime: fxNow || createFxNow(),
            duration: options.duration,
            tweens: [],
            createTween: function(prop, end) {
                var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
                animation.tweens.push(tween);
                return tween;
            },
            stop: function(gotoEnd) {
                var index = 0, // if we are going to the end, we want to run all the tweens
                // otherwise we skip this part
                length = gotoEnd ? animation.tweens.length : 0;
                if (stopped) {
                    return this;
                }
                stopped = true;
                for (;index < length; index++) {
                    animation.tweens[index].run(1);
                }
                // resolve when we played the last frame
                // otherwise, reject
                if (gotoEnd) {
                    deferred.resolveWith(elem, [ animation, gotoEnd ]);
                } else {
                    deferred.rejectWith(elem, [ animation, gotoEnd ]);
                }
                return this;
            }
        }), props = animation.props;
        propFilter(props, animation.opts.specialEasing);
        for (;index < length; index++) {
            result = animationPrefilters[index].call(animation, elem, props, animation.opts);
            if (result) {
                return result;
            }
        }
        jQuery.map(props, createTween, animation);
        if (jQuery.isFunction(animation.opts.start)) {
            animation.opts.start.call(elem, animation);
        }
        jQuery.fx.timer(jQuery.extend(tick, {
            elem: elem,
            anim: animation,
            queue: animation.opts.queue
        }));
        // attach callbacks from options
        return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
    }
    function propFilter(props, specialEasing) {
        var index, name, easing, value, hooks;
        // camelCase, specialEasing and expand cssHook pass
        for (index in props) {
            name = jQuery.camelCase(index);
            easing = specialEasing[name];
            value = props[index];
            if (jQuery.isArray(value)) {
                easing = value[1];
                value = props[index] = value[0];
            }
            if (index !== name) {
                props[name] = value;
                delete props[index];
            }
            hooks = jQuery.cssHooks[name];
            if (hooks && "expand" in hooks) {
                value = hooks.expand(value);
                delete props[name];
                // not quite $.extend, this wont overwrite keys already present.
                // also - reusing 'index' from above because we have the correct "name"
                for (index in value) {
                    if (!(index in props)) {
                        props[index] = value[index];
                        specialEasing[index] = easing;
                    }
                }
            } else {
                specialEasing[name] = easing;
            }
        }
    }
    jQuery.Animation = jQuery.extend(Animation, {
        tweener: function(props, callback) {
            if (jQuery.isFunction(props)) {
                callback = props;
                props = [ "*" ];
            } else {
                props = props.split(" ");
            }
            var prop, index = 0, length = props.length;
            for (;index < length; index++) {
                prop = props[index];
                tweeners[prop] = tweeners[prop] || [];
                tweeners[prop].unshift(callback);
            }
        },
        prefilter: function(callback, prepend) {
            if (prepend) {
                animationPrefilters.unshift(callback);
            } else {
                animationPrefilters.push(callback);
            }
        }
    });
    function defaultPrefilter(elem, props, opts) {
        /* jshint validthis: true */
        var prop, value, toggle, tween, hooks, oldfire, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHidden(elem), dataShow = jQuery._data(elem, "fxshow");
        // handle queue: false promises
        if (!opts.queue) {
            hooks = jQuery._queueHooks(elem, "fx");
            if (hooks.unqueued == null) {
                hooks.unqueued = 0;
                oldfire = hooks.empty.fire;
                hooks.empty.fire = function() {
                    if (!hooks.unqueued) {
                        oldfire();
                    }
                };
            }
            hooks.unqueued++;
            anim.always(function() {
                // doing this makes sure that the complete handler will be called
                // before this completes
                anim.always(function() {
                    hooks.unqueued--;
                    if (!jQuery.queue(elem, "fx").length) {
                        hooks.empty.fire();
                    }
                });
            });
        }
        // height/width overflow pass
        if (elem.nodeType === 1 && ("height" in props || "width" in props)) {
            // Make sure that nothing sneaks out
            // Record all 3 overflow attributes because IE does not
            // change the overflow attribute when overflowX and
            // overflowY are set to the same value
            opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];
            // Set display property to inline-block for height/width
            // animations on inline elements that are having width/height animated
            if (jQuery.css(elem, "display") === "inline" && jQuery.css(elem, "float") === "none") {
                // inline-level elements accept inline-block;
                // block-level elements need to be inline with layout
                if (!jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay(elem.nodeName) === "inline") {
                    style.display = "inline-block";
                } else {
                    style.zoom = 1;
                }
            }
        }
        if (opts.overflow) {
            style.overflow = "hidden";
            if (!jQuery.support.shrinkWrapBlocks) {
                anim.always(function() {
                    style.overflow = opts.overflow[0];
                    style.overflowX = opts.overflow[1];
                    style.overflowY = opts.overflow[2];
                });
            }
        }
        // show/hide pass
        for (prop in props) {
            value = props[prop];
            if (rfxtypes.exec(value)) {
                delete props[prop];
                toggle = toggle || value === "toggle";
                if (value === (hidden ? "hide" : "show")) {
                    continue;
                }
                orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
            }
        }
        if (!jQuery.isEmptyObject(orig)) {
            if (dataShow) {
                if ("hidden" in dataShow) {
                    hidden = dataShow.hidden;
                }
            } else {
                dataShow = jQuery._data(elem, "fxshow", {});
            }
            // store state if its toggle - enables .stop().toggle() to "reverse"
            if (toggle) {
                dataShow.hidden = !hidden;
            }
            if (hidden) {
                jQuery(elem).show();
            } else {
                anim.done(function() {
                    jQuery(elem).hide();
                });
            }
            anim.done(function() {
                var prop;
                jQuery._removeData(elem, "fxshow");
                for (prop in orig) {
                    jQuery.style(elem, prop, orig[prop]);
                }
            });
            for (prop in orig) {
                tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
                if (!(prop in dataShow)) {
                    dataShow[prop] = tween.start;
                    if (hidden) {
                        tween.end = tween.start;
                        tween.start = prop === "width" || prop === "height" ? 1 : 0;
                    }
                }
            }
        }
    }
    function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing);
    }
    jQuery.Tween = Tween;
    Tween.prototype = {
        constructor: Tween,
        init: function(elem, options, prop, end, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || "swing";
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
        },
        cur: function() {
            var hooks = Tween.propHooks[this.prop];
            return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
        },
        run: function(percent) {
            var eased, hooks = Tween.propHooks[this.prop];
            if (this.options.duration) {
                this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
            } else {
                this.pos = eased = percent;
            }
            this.now = (this.end - this.start) * eased + this.start;
            if (this.options.step) {
                this.options.step.call(this.elem, this.now, this);
            }
            if (hooks && hooks.set) {
                hooks.set(this);
            } else {
                Tween.propHooks._default.set(this);
            }
            return this;
        }
    };
    Tween.prototype.init.prototype = Tween.prototype;
    Tween.propHooks = {
        _default: {
            get: function(tween) {
                var result;
                if (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) {
                    return tween.elem[tween.prop];
                }
                // passing an empty string as a 3rd parameter to .css will automatically
                // attempt a parseFloat and fallback to a string if the parse fails
                // so, simple values such as "10px" are parsed to Float.
                // complex values such as "rotate(1rad)" are returned as is.
                result = jQuery.css(tween.elem, tween.prop, "");
                // Empty strings, null, undefined and "auto" are converted to 0.
                return !result || result === "auto" ? 0 : result;
            },
            set: function(tween) {
                // use step hook for back compat - use cssHook if its there - use .style if its
                // available and use plain properties where available
                if (jQuery.fx.step[tween.prop]) {
                    jQuery.fx.step[tween.prop](tween);
                } else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
                    jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
                } else {
                    tween.elem[tween.prop] = tween.now;
                }
            }
        }
    };
    // Support: IE <=9
    // Panic based approach to setting things on disconnected nodes
    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function(tween) {
            if (tween.elem.nodeType && tween.elem.parentNode) {
                tween.elem[tween.prop] = tween.now;
            }
        }
    };
    jQuery.each([ "toggle", "show", "hide" ], function(i, name) {
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function(speed, easing, callback) {
            return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
        };
    });
    jQuery.fn.extend({
        fadeTo: function(speed, to, easing, callback) {
            // show any hidden elements after setting opacity to 0
            return this.filter(isHidden).css("opacity", 0).show().end().animate({
                opacity: to
            }, speed, easing, callback);
        },
        animate: function(prop, speed, easing, callback) {
            var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function() {
                // Operate on a copy of prop so per-property easing won't be lost
                var anim = Animation(this, jQuery.extend({}, prop), optall);
                // Empty animations, or finishing resolves immediately
                if (empty || jQuery._data(this, "finish")) {
                    anim.stop(true);
                }
            };
            doAnimation.finish = doAnimation;
            return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
        },
        stop: function(type, clearQueue, gotoEnd) {
            var stopQueue = function(hooks) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop(gotoEnd);
            };
            if (typeof type !== "string") {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = undefined;
            }
            if (clearQueue && type !== false) {
                this.queue(type || "fx", []);
            }
            return this.each(function() {
                var dequeue = true, index = type != null && type + "queueHooks", timers = jQuery.timers, data = jQuery._data(this);
                if (index) {
                    if (data[index] && data[index].stop) {
                        stopQueue(data[index]);
                    }
                } else {
                    for (index in data) {
                        if (data[index] && data[index].stop && rrun.test(index)) {
                            stopQueue(data[index]);
                        }
                    }
                }
                for (index = timers.length; index--; ) {
                    if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                        timers[index].anim.stop(gotoEnd);
                        dequeue = false;
                        timers.splice(index, 1);
                    }
                }
                // start the next in the queue if the last step wasn't forced
                // timers currently will call their complete callbacks, which will dequeue
                // but only if they were gotoEnd
                if (dequeue || !gotoEnd) {
                    jQuery.dequeue(this, type);
                }
            });
        },
        finish: function(type) {
            if (type !== false) {
                type = type || "fx";
            }
            return this.each(function() {
                var index, data = jQuery._data(this), queue = data[type + "queue"], hooks = data[type + "queueHooks"], timers = jQuery.timers, length = queue ? queue.length : 0;
                // enable finishing flag on private data
                data.finish = true;
                // empty the queue first
                jQuery.queue(this, type, []);
                if (hooks && hooks.stop) {
                    hooks.stop.call(this, true);
                }
                // look for any active animations, and finish them
                for (index = timers.length; index--; ) {
                    if (timers[index].elem === this && timers[index].queue === type) {
                        timers[index].anim.stop(true);
                        timers.splice(index, 1);
                    }
                }
                // look for any animations in the old queue and finish them
                for (index = 0; index < length; index++) {
                    if (queue[index] && queue[index].finish) {
                        queue[index].finish.call(this);
                    }
                }
                // turn off finishing flag
                delete data.finish;
            });
        }
    });
    // Generate parameters to create a standard animation
    function genFx(type, includeWidth) {
        var which, attrs = {
            height: type
        }, i = 0;
        // if we include width, step value is 1 to do all cssExpand values,
        // if we don't include width, step value is 2 to skip over Left and Right
        includeWidth = includeWidth ? 1 : 0;
        for (;i < 4; i += 2 - includeWidth) {
            which = cssExpand[i];
            attrs["margin" + which] = attrs["padding" + which] = type;
        }
        if (includeWidth) {
            attrs.opacity = attrs.width = type;
        }
        return attrs;
    }
    // Generate shortcuts for custom animations
    jQuery.each({
        slideDown: genFx("show"),
        slideUp: genFx("hide"),
        slideToggle: genFx("toggle"),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        },
        fadeToggle: {
            opacity: "toggle"
        }
    }, function(name, props) {
        jQuery.fn[name] = function(speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
        };
    });
    jQuery.speed = function(speed, easing, fn) {
        var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
            complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
            duration: speed,
            easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
        };
        opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
        // normalize opt.queue - true/undefined/null -> "fx"
        if (opt.queue == null || opt.queue === true) {
            opt.queue = "fx";
        }
        // Queueing
        opt.old = opt.complete;
        opt.complete = function() {
            if (jQuery.isFunction(opt.old)) {
                opt.old.call(this);
            }
            if (opt.queue) {
                jQuery.dequeue(this, opt.queue);
            }
        };
        return opt;
    };
    jQuery.easing = {
        linear: function(p) {
            return p;
        },
        swing: function(p) {
            return .5 - Math.cos(p * Math.PI) / 2;
        }
    };
    jQuery.timers = [];
    jQuery.fx = Tween.prototype.init;
    jQuery.fx.tick = function() {
        var timer, timers = jQuery.timers, i = 0;
        fxNow = jQuery.now();
        for (;i < timers.length; i++) {
            timer = timers[i];
            // Checks the timer has not already been removed
            if (!timer() && timers[i] === timer) {
                timers.splice(i--, 1);
            }
        }
        if (!timers.length) {
            jQuery.fx.stop();
        }
        fxNow = undefined;
    };
    jQuery.fx.timer = function(timer) {
        if (timer() && jQuery.timers.push(timer)) {
            jQuery.fx.start();
        }
    };
    jQuery.fx.interval = 13;
    jQuery.fx.start = function() {
        if (!timerId) {
            timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);
        }
    };
    jQuery.fx.stop = function() {
        clearInterval(timerId);
        timerId = null;
    };
    jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        // Default speed
        _default: 400
    };
    // Back Compat <1.8 extension point
    jQuery.fx.step = {};
    if (jQuery.expr && jQuery.expr.filters) {
        jQuery.expr.filters.animated = function(elem) {
            return jQuery.grep(jQuery.timers, function(fn) {
                return elem === fn.elem;
            }).length;
        };
    }
    jQuery.fn.offset = function(options) {
        if (arguments.length) {
            return options === undefined ? this : this.each(function(i) {
                jQuery.offset.setOffset(this, options, i);
            });
        }
        var docElem, win, box = {
            top: 0,
            left: 0
        }, elem = this[0], doc = elem && elem.ownerDocument;
        if (!doc) {
            return;
        }
        docElem = doc.documentElement;
        // Make sure it's not a disconnected DOM node
        if (!jQuery.contains(docElem, elem)) {
            return box;
        }
        // If we don't have gBCR, just use 0,0 rather than error
        // BlackBerry 5, iOS 3 (original iPhone)
        if (typeof elem.getBoundingClientRect !== core_strundefined) {
            box = elem.getBoundingClientRect();
        }
        win = getWindow(doc);
        return {
            top: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),
            left: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)
        };
    };
    jQuery.offset = {
        setOffset: function(elem, options, i) {
            var position = jQuery.css(elem, "position");
            // set position first, in-case top/left are set even on static elem
            if (position === "static") {
                elem.style.position = "relative";
            }
            var curElem = jQuery(elem), curOffset = curElem.offset(), curCSSTop = jQuery.css(elem, "top"), curCSSLeft = jQuery.css(elem, "left"), calculatePosition = (position === "absolute" || position === "fixed") && jQuery.inArray("auto", [ curCSSTop, curCSSLeft ]) > -1, props = {}, curPosition = {}, curTop, curLeft;
            // need to be able to calculate position if either top or left is auto and position is either absolute or fixed
            if (calculatePosition) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;
            } else {
                curTop = parseFloat(curCSSTop) || 0;
                curLeft = parseFloat(curCSSLeft) || 0;
            }
            if (jQuery.isFunction(options)) {
                options = options.call(elem, i, curOffset);
            }
            if (options.top != null) {
                props.top = options.top - curOffset.top + curTop;
            }
            if (options.left != null) {
                props.left = options.left - curOffset.left + curLeft;
            }
            if ("using" in options) {
                options.using.call(elem, props);
            } else {
                curElem.css(props);
            }
        }
    };
    jQuery.fn.extend({
        position: function() {
            if (!this[0]) {
                return;
            }
            var offsetParent, offset, parentOffset = {
                top: 0,
                left: 0
            }, elem = this[0];
            // fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent
            if (jQuery.css(elem, "position") === "fixed") {
                // we assume that getBoundingClientRect is available when computed position is fixed
                offset = elem.getBoundingClientRect();
            } else {
                // Get *real* offsetParent
                offsetParent = this.offsetParent();
                // Get correct offsets
                offset = this.offset();
                if (!jQuery.nodeName(offsetParent[0], "html")) {
                    parentOffset = offsetParent.offset();
                }
                // Add offsetParent borders
                parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true);
                parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true);
            }
            // Subtract parent offsets and element margins
            // note: when an element has margin: auto the offsetLeft and marginLeft
            // are the same in Safari causing offset.left to incorrectly be 0
            return {
                top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
                left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
            };
        },
        offsetParent: function() {
            return this.map(function() {
                var offsetParent = this.offsetParent || docElem;
                while (offsetParent && !jQuery.nodeName(offsetParent, "html") && jQuery.css(offsetParent, "position") === "static") {
                    offsetParent = offsetParent.offsetParent;
                }
                return offsetParent || docElem;
            });
        }
    });
    // Create scrollLeft and scrollTop methods
    jQuery.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, function(method, prop) {
        var top = /Y/.test(prop);
        jQuery.fn[method] = function(val) {
            return jQuery.access(this, function(elem, method, val) {
                var win = getWindow(elem);
                if (val === undefined) {
                    return win ? prop in win ? win[prop] : win.document.documentElement[method] : elem[method];
                }
                if (win) {
                    win.scrollTo(!top ? val : jQuery(win).scrollLeft(), top ? val : jQuery(win).scrollTop());
                } else {
                    elem[method] = val;
                }
            }, method, val, arguments.length, null);
        };
    });
    function getWindow(elem) {
        return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 ? elem.defaultView || elem.parentWindow : false;
    }
    // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
    jQuery.each({
        Height: "height",
        Width: "width"
    }, function(name, type) {
        jQuery.each({
            padding: "inner" + name,
            content: type,
            "": "outer" + name
        }, function(defaultExtra, funcName) {
            // margin is only for outerHeight, outerWidth
            jQuery.fn[funcName] = function(margin, value) {
                var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"), extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
                return jQuery.access(this, function(elem, type, value) {
                    var doc;
                    if (jQuery.isWindow(elem)) {
                        // As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
                        // isn't a whole lot we can do. See pull request at this URL for discussion:
                        // https://github.com/jquery/jquery/pull/764
                        return elem.document.documentElement["client" + name];
                    }
                    // Get document width or height
                    if (elem.nodeType === 9) {
                        doc = elem.documentElement;
                        // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
                        // unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
                        return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
                    }
                    return value === undefined ? // Get width or height on the element, requesting but not forcing parseFloat
                    jQuery.css(elem, type, extra) : // Set width or height on the element
                    jQuery.style(elem, type, value, extra);
                }, type, chainable ? margin : undefined, chainable, null);
            };
        });
    });
    // Limit scope pollution from any deprecated API
    // (function() {
    // The number of elements contained in the matched element set
    jQuery.fn.size = function() {
        return this.length;
    };
    jQuery.fn.andSelf = jQuery.fn.addBack;
    // })();
    if (typeof module === "object" && module && typeof module.exports === "object") {
        // Expose jQuery as module.exports in loaders that implement the Node
        // module pattern (including browserify). Do not create the global, since
        // the user will be storing it themselves locally, and globals are frowned
        // upon in the Node module world.
        module.exports = jQuery;
    } else {
        // Otherwise expose jQuery to the global object as usual
        window.jQuery = window.$ = jQuery;
        // Register as a named AMD module, since jQuery can be concatenated with other
        // files that may use define, but not via a proper concatenation script that
        // understands anonymous AMD modules. A named AMD is safest and most robust
        // way to register. Lowercase jquery is used because AMD module names are
        // derived from file names, and jQuery is normally delivered in a lowercase
        // file name. Do this after creating the global so that if an AMD module wants
        // to call noConflict to hide this version of jQuery, it will work.
        if (typeof define === "function" && (define.amd || define.cmd)) {
            define("jquery", [], function() {
                return jQuery;
            });
        }
    }
})(window);
// AMD support
(function(factory) {
    "use strict";
    if (typeof define === "function" && (define.amd || define.cmd)) {
        // using AMD; register as anon module
        define("component/jquery.loading", [ "jquery" ], factory);
    } else {
        // no AMD; invoke directly
        factory(typeof jQuery != "undefined" ? jQuery : window.Zepto);
    }
})(function() {
    var config = {
        cls: null,
        text: "数据加载中..."
    };
    $.fn.loading = function(text, cls, hide) {
        var _loading = $(this).data("jquery-loading");
        if (!_loading) {
            _loading = $('<div class="think-loading"><span class="loading-inner"><i class="loading-image"></i><b class="loading-text"></b></span></div>');
            $(this).data("jquery-loading", _loading);
        }
        if (text == "hide") {
            _loading.removeClass("loading-active");
        } else {
            text = typeof text == "undefined" ? config.text : text;
            cls = cls || config.cls;
            _loading.find(".loading-text").html(text);
            _loading.addClass(cls);
            _loading.addClass("loading-active");
        }
        if (!$(this).find("." + cls).length) {
            $(this).append(_loading);
        }
        return $(this);
    };
    $.loading = function(text, cls) {};
    $.loading.setConfig = function() {
        return config[name] = data;
    };
});
// AMD support
(function(factory) {
    "use strict";
    if (typeof define === "function" && (define.amd || define.cmd)) {
        // using AMD; register as anon module
        define("component/jquery.tree", [ "jquery" ], factory);
    } else {
        // no AMD; invoke directly
        factory(typeof jQuery != "undefined" ? jQuery : window.Zepto);
    }
})(function() {
    var Event = {
        /**
         * 添加事件
         * @param name {String} 事件名称
         * @param data {Object} 事件数据
         * @param fun {Function} 回调函数
         * @return void
         */
        on: function(name, data, fun) {
            $(this).on(Event._getName(name), data || {}, fun);
            return this;
        },
        /**
         * 移除事件
         * @param name {String} 事件名称
         * @return void
         */
        off: function(name) {
            $(this).off(Event._getName(name));
            return this;
        },
        /**
         * 触发事件
         * @param name {String} 事件名称
         * @param data {Object} 事件数据
         * @return void
         */
        trigger: function(name, data) {
            var _n1 = Event._getName(name);
            var _n2 = Event._getName(name, true);
            $(this).trigger(_n2, data);
            $(this).trigger(_n1, data);
            return this;
        },
        /**
         * 事件名称
         * @param name {String} 事件名称
         * @param pr {String} 时间类型，私有或公有
         * @return void
         */
        _getName: function(name, pr) {
            return pr ? "__on" + name + "__" : "on" + name;
        }
    };
    var Extend = function(o1, o2) {
        for (var i in o2) {
            if (i in o1) {
                o1["__" + i] = o1[i];
            }
            o1[i] = o2[i];
        }
        o1.callParent = function(name, param) {
            name = "__" + name;
            if (name in o1 && $.isFunction(o1[name])) {
                o1[name].apply(o1, Array.prototype.slice.call(arguments, 1));
            }
        };
    };
    function node(options) {
        this._options = $.extend({
            id: null,
            pid: null,
            data: null
        }, options);
        this.id = this._options.id;
        this.pid = this._options.pid;
        //支持事件
        Extend(this, Event);
    }
    /**
     * 销毁节点
     * @param id {Number} 节点ID
     * @return void
     */
    node.prototype.destroy = function() {
        for (var i in this) {
            if (this[i] instanceof jQuery) {
                this[i].remove();
            }
            delete this[i];
        }
    };
    /**
     * 设置值
     * @param id {Number} 节点ID
     * @param data {Object} 节点数据信息
     * @return void
     */
    node.prototype.set = function(name, data) {
        if (typeof name == "string") {
            return this._options.data[name] = data;
        }
    };
    /**
     * 获取值
     * @param id {Number} 节点ID
     * @param data {Object} 节点数据信息
     * @return void
     */
    node.prototype.get = function(name) {
        if (typeof name == "string" && name in this._options.data) {
            return this._options.data[name];
        }
    };
    /**
     * 设置等级
     * @return void
     */
    node.prototype.setLevel = function(level) {
        if ($.isNumeric(level)) {
            this._level = level;
        }
    };
    /**
     * 获取等级
     * @return void
     */
    node.prototype.getLevel = function() {
        return this._level || 0;
    };
    /**
     * 是否含有子节点
     * @return void
     */
    node.prototype.hasChildren = function() {
        return this._children ? true : false;
    };
    /**
     * 获取子节点
     * @return void
     */
    node.prototype.getChildren = function() {
        return this._children || [];
    };
    /**
     * 节点管理构造类
     * @param data 待序列化成树形格式的数据
     * @param parentId 父级节点标识
     * @param childId 子级节点标识
     * @return Object
     */
    function nodeManage(data, options) {
        //合并配置项
        this._options = $.extend({}, {
            parentField: "pid",
            childField: "id",
            onCreateItem: null
        }, options);
        //记录节点是否更新过
        this._nodeUpdateStatus = true;
        //设置父节点字段标识
        this.setParentField(this._options.parentField);
        //设置子节点字段标识
        this.setChildField(this._options.childField);
        //序列化节点数据
        this._nodeData = nodeManage.serialize.call(this, data, this._parentField, this._childField, function(main, proxy) {
            this._proxyData = proxy;
        });
        //获取平行节点数据
        this._faceData = this.childrens();
    }
    /**
     * 获取节点总数
     * @return number
     */
    nodeManage.prototype.getTotal = function() {
        return this._faceData.length || 0;
    };
    /**
     * 获取节点位置
     * @return number
     */
    nodeManage.prototype.getIndex = function(node) {
        var _id = node.id;
        for (var i = 0; i < this._faceData.length; i++) {
            if (this._faceData[i].id == _id) {
                return i;
            }
        }
        return -1;
    };
    /**
     * 序列化节点数据
     * @return object
     */
    nodeManage.prototype.serializeNodeData = function(data) {
        var _nodes = nodeManage.serialize.call(this, data, this._parentField, this._childField, $.noop, this._proxyData, this._nodeData);
        this._nodeUpdateStatus = true;
        this._faceData = this.childrens();
        return _nodes;
    };
    /**
     * 更新节点数据
     * @return object
     */
    nodeManage.prototype.updateNodeData = function(data) {};
    /**
     * 获取节点数据
     * @return object
     */
    nodeManage.prototype.getData = function(data) {
        return this._nodeData || [];
    };
    /**
     * 导出节点数据
     * @return object
     */
    nodeManage.prototype.exportData = function() {
        var data = [], i = 0, l = this._faceData.length;
        for (;i < l; i++) {
            data.push(this._faceData[i]._options.data);
        }
        return data;
    };
    /**
     * 设置父节点字段标识
     * @return void
     */
    nodeManage.prototype.setParentField = function(field) {
        this._parentField = field || "pid";
        return this;
    };
    /**
     * 设置子节点字段标识
     * @return void
     */
    nodeManage.prototype.setChildField = function(field) {
        this._childField = field || "id";
        return this;
    };
    /**
     * 获取节点
     * @param id {Number} 节点ID
     * @return node
     */
    nodeManage.prototype.find = function(id) {
        var _length = this._faceData.length, _i = 0;
        for (;_i < _length; _i++) {
            if (this._faceData[_i].id == id) {
                return this._faceData[_i];
            }
        }
    };
    /**
     * 获取所有后代节点
     * @param id {Number} 父节点ID
     * @return node
     */
    nodeManage.prototype.childrens = function(node) {
        var _childrens = [], _self = this;
        if (nodeManage.isNode(node)) {
            recursion(node);
        } else {
            if (this._nodeUpdateStatus) {
                var _childs = this.children();
                for (var i = 0; i < _childs.length; i++) {
                    _childrens.push(_childs[i]);
                    recursion(_childs[i]);
                }
                this._nodeUpdateStatus = false;
            } else {
                _childrens = this._faceData;
            }
        }
        function recursion(node) {
            var _children = _self.children(node), _length = _children.length;
            for (var i = 0; i < _length; i++) {
                _childrens.push(_children[i]);
                arguments.callee(_children[i]);
            }
        }
        return _childrens;
    };
    /**
     * 获取子节点
     * @param id {Number} 父节点ID
     * @return node
     */
    nodeManage.prototype.children = function(node) {
        var _children = [], _proxy = {};
        if (nodeManage.isNode(node)) {
            _proxy = node._children || [];
        } else {
            _proxy = this._nodeData;
        }
        for (var i in _proxy) {
            _children.push(_proxy[i]);
        }
        return _children;
    };
    /**
     * 获取父节点
     * @param id {Number} 节点ID
     * @return node
     */
    nodeManage.prototype.parent = function(node) {
        var _parent;
        if (nodeManage.isNode(node)) {
            var _pid = node.pid;
            for (var i in this._faceData) {
                if (this._faceData[i].id == _pid) {
                    _parent = this._faceData[i];
                    break;
                }
            }
        }
        return _parent;
    };
    /**
     * 获取所有祖先节点
     * @param id {Number} 节点ID
     * @return node
     */
    nodeManage.prototype.parents = function(node) {
        var _parents = [];
        if (nodeManage.isNode(node)) {
            var _nodes = this._faceData;
            (function(_node, _nodes) {
                for (var i in _nodes) {
                    if (_node.pid && _node.pid == _nodes[i].id) {
                        _parents.push(_nodes[i]);
                        arguments.callee(_nodes[i], _nodes);
                        return;
                    }
                }
            })(node, _nodes);
        }
        return _parents;
    };
    /**
     * 获取所有同辈节点
     * @param id {Number} 节点ID
     * @return node
     */
    nodeManage.prototype.siblings = function(node, nodes) {
        var _siblings = [];
        if (nodeManage.isNode(node)) {
            var _parent = this.parent(node);
            if (_parent) {
                var _children = this.children(_parent);
                for (var i in _children) {
                    if (_children[i] !== node) {
                        _siblings.push(_children[i]);
                    }
                }
            }
        }
        return _siblings;
    };
    /**
     * 获取紧邻的后面同辈节点
     * @param id {Number} 节点ID
     * @return node
     */
    nodeManage.prototype.next = function(node, nodes) {
        var _next;
        if (nodeManage.isNode(node)) {
            var _parent = this.parent(node), _chldrens = nodes || this.children(_parent), _status = false;
            for (var i in _chldrens) {
                if (_status) {
                    _next = _chldrens[i];
                    break;
                }
                if (_chldrens[i] === node) {
                    _status = true;
                }
            }
        }
        return _next;
    };
    /**
     * 获取所有的后面同辈节点
     * @param id {Number} 节点ID
     * @return node
     */
    nodeManage.prototype.nextAll = function(id) {};
    /**
     * 获取紧邻的前面同辈节点
     * @param id {Number} 节点ID
     * @return node
     */
    nodeManage.prototype.prev = function(node, nodes) {
        var _prev, _node;
        if (nodeManage.isNode(node)) {
            var _parent = this.parent(node), _chldrens = nodes || this.children(_parent);
            for (var i in _chldrens) {
                if (_chldrens[i] === node) {
                    _prev = _node;
                    break;
                }
                _node = _chldrens[i];
            }
        }
        return _prev;
    };
    /**
     * 获取首个节点
     * @return node
     */
    nodeManage.prototype.first = function(node) {
        if (typeof node == "undefined") {
            return this._faceData[0];
        } else {
            if (nodeManage.isNode(node)) {
                return this.children(node)[0];
            }
        }
    };
    /**
     * 获取最后节点
     * @return node
     */
    nodeManage.prototype.last = function(node) {
        if (typeof node == "undefined") {
            return this._faceData[this._faceData.length - 1];
        } else {
            if (nodeManage.isNode(node)) {
                var _children = this.children(node);
                return _children[_children.length - 1];
            }
        }
    };
    /**
     * 获取所有的前面同辈节点
     * @param id {Number} 节点ID
     * @return node
     */
    nodeManage.prototype.prevAll = function(id) {};
    nodeManage.prototype.remove = function(node) {
        var _parent = this.parent(node);
        var _removes = this.childrens(node), _length = 0;
        _removes.push(node);
        _length = _removes.length;
        if (_parent) {
            var _children = _parent["_children"];
            for (var m in _children) {
                if (_children[m] === node) {
                    delete _children[m];
                }
            }
        } else {
            for (var i in this._nodeData) {
                if (this._nodeData[i] === node) {
                    delete this._nodeData[i];
                }
            }
        }
        if (_length) {
            node["_children"] = [];
            for (var i = 0; i < _length; i++) {
                for (var j = 0; j < this._faceData.length; j++) {
                    if (this._faceData[j] === node) {
                        this._faceData.slice(j, 1);
                        break;
                    }
                }
                _removes[i].destroy();
            }
        }
        this._nodeUpdateStatus = true;
        this._faceData = this.childrens();
        return;
    };
    /**
     * 检测是否为合法节点
     * @param id {Object} 待检测的节点
     * @return boolean
     */
    nodeManage.isNode = function(id) {
        return id instanceof node;
    };
    //标识前缀
    nodeManage.prefix = "tree-";
    /**
     * 序列化树形数据
     * @param data {Array|Object} 数据集
     * @param parentField {String} 父级字段标识
     * @param childField {String} 子级字段标识
     * @return data {1:{id:1,pid:0,text:'',children:{1:{id:2,pid:1,text:''},2:{..},3:{..}}}}
     */
    nodeManage.serialize = function(data, parentField, childField, callback, proxyData, rootData) {
        var _self = this, _data = $.isFunction(data) ? data() : data, _main = {}, _proxy = proxyData || {}, _proxyResult = {}, _parentField = $.type(parentField) == "string" ? parentField : "pid", _childField = $.type(childField) == "string" ? childField : "id", _length = 0;
        _data = $.isArray(_data) ? _data : [ _data ];
        _length = _data.length;
        for (var i = 0; i < _length; i++) {
            var _mask = nodeManage.prefix + _data[i][_childField].toString();
            _proxy[_mask] = new node({
                data: _data[i],
                id: _data[i][_childField],
                pid: _data[i][_parentField]
            });
            if (proxyData) {
                _proxyResult[_mask] = _proxy[_mask];
            }
        }
        for (var i = 0; i < _length; i++) {
            if (_proxy[nodeManage.prefix + _data[i][_parentField].toString()]) {
                if (!_proxy[nodeManage.prefix + _data[i][_parentField].toString()]["_children"]) {
                    _proxy[nodeManage.prefix + _data[i][_parentField].toString()]["_children"] = {};
                }
                _proxy[nodeManage.prefix + _data[i].pid.toString()]["_children"][nodeManage.prefix + _data[i].id.toString()] = _proxy[nodeManage.prefix + _data[i].id.toString()];
            } else {
                _main[nodeManage.prefix + _data[i][_childField].toString()] = _proxy[nodeManage.prefix + _data[i][_childField].toString()];
            }
        }
        if (proxyData) {
            for (var i in _proxyResult) {
                var _parent = this.parent(_proxyResult[i]);
                if (_parent) {
                    _proxyResult[i]["_level"] = _parent.getLevel() + 1;
                } else {
                    _proxyResult[i]["_level"] = 1;
                    rootData[i] = _proxyResult[i];
                }
                $.isFunction(_self._options.onCreateItem) && _self._options.onCreateItem.call(this, _proxyResult[i]);
            }
        } else {
            (function(data, level) {
                var _data = data, _level = level + 1;
                for (var i in _data) {
                    _data[i]["_level"] = _level;
                    if (_data[i]["_children"]) {
                        arguments.callee(_data[i]["_children"], _level);
                    }
                    $.isFunction(_self._options.onCreateItem) && _self._options.onCreateItem.call(this, _data[i]);
                }
            })(_main, 0);
        }
        $.isFunction(callback) && callback.call(this, _main, _proxy);
        if (proxyData) {
            return _proxyResult;
        }
        return _main;
    };
    function combobox(options) {
        var self = this;
        //合并配置参数
        this.options = $.extend({}, combobox.options, options);
        //记录打开状态
        this._isOpen = false;
        //重新包裸内容元素
        this.content = $('<div class="think-combobox"></div>');
        //重新包裸控制元素
        this.handler = $('<span class="think-handler"></span>');
        if (this.options.content instanceof jQuery) {
            this.options.content.after(this.content);
            this.content.append(this.options.content);
        }
        if (this.options.handler instanceof jQuery) {
            this.options.handler.after(this.handler);
            this.handler.append(this.options.handler);
        }
        this.handler.click(function() {
            self.open(!self._isOpen);
        });
        $.isFunction(this.options.onCreate) && this.options.onCreate.call(this);
    }
    combobox.prototype.open = function() {
        this._isOpen = true;
        this.content.addClass("combobox-open");
        this.handler.addClass("combobox-open");
    };
    combobox.prototype.close = function() {
        this._isOpen = false;
        this.content.removeClass("combobox-open");
        this.handler.removeClass("combobox-open");
    };
    combobox.prototype.setValue = function() {};
    combobox.prototype.getValue = function() {};
    combobox.prototype.disabled = function() {};
    combobox.prototype.focus = function() {};
    combobox.prototype.blur = function() {};
    combobox.createHtml = function() {};
    combobox.options = {
        handler: null,
        content: null,
        onOpen: null,
        onClose: null
    };
    /**
     * 树构造类
     * @param data 数据源
     * @param options 配置项
     * @return Object
     */
    function tree(data, options) {
        var self = this;
        //合并配置项
        this.options = $.extend({}, tree.options, options);
        //支持事件
        Extend(this, Event);
        //记录当前选中的节点列表
        this._selectedList = {};
        //设置选择模式
        this.setSelectMode(this.options.selectMode);
        //设置是否必须选中
        this.setSelectMust(this.options.selectMust);
        //创建节点对象
        this.nodes = new nodeManage(data, {
            parentField: this.options.parentField,
            childField: this.options.childField,
            onCreateItem: function(node) {
                node.tree = self;
            }
        });
        //扩展节点对象
        Extend(node.prototype, tree.node);
        //记录根节点
        this.root = new node();
        this.root["element"] = $("<ul></ul>");
        this.root["tree"] = this;
        this.root["isRoot"] = true;
        //设置解析节点模版函数
        this.setParseTemp(this.options.parseTemp);
        //生成树结构
        this.tree = tree.createHtml.call(this, this.nodes.getData(), this.root["element"]);
        //绑定选择节点事件
        this.on("onSelect", this.options.onSelect);
        //绑定展开关闭节点事件
        this.on("onSwitch", function(event, node) {
            node.isOpen() ? node.close() : node.open();
        });
        //添加样式名称
        this.tree.addClass(this.options.cls);
        this.options.combobox && this.tree.addClass("combobox-content");
        this.options.appendTo && this.options.appendTo.append(this.tree);
        //绑定组合选择
        this.options.combobox && (this.combobox = new combobox({
            handler: this.options.combobox,
            content: this.tree,
            onCreate: function() {}
        }));
        $.isFunction(this.options.onCreate) && this.options.onCreate.call(this);
    }
    //数据缓存标识
    tree.cacheMask = "THINKTREE";
    //包装node对象
    tree.node = {
        _isSelected: false,
        _isOpen: false,
        release: function(status, lockEvent, isOpen) {
            var tree = this.tree;
            var status = typeof status == "undefined" ? true : status ? true : false, name = this.id.toString(), isSelected = this._isSelected;
            if (tree._selectMode == "single") {
                for (var i in tree._selectedList) {
                    cancel(tree._selectedList[i], i);
                }
                status = tree._selectMust ? true : status;
                if (status) {
                    if (!this._isSelected && !(name in tree._selectedList)) {
                        define("component/jquery.tree", [ "jquery" ], name);
                    }
                }
            } else {
                if (status) {
                    if (!this._isSelected && !(name in tree._selectedList)) {
                        define("component/jquery.tree", [ "jquery" ], name);
                    }
                } else {
                    if (!this._isSelected && !(name in tree._selectedList)) {
                        cancel(this, name);
                    }
                }
            }
            if (isOpen !== false) {
                this._isOpen && isSelected ? this.close() : this.open();
            }
            if (!lockEvent) {
                this.trigger("onSelect", this);
                this.tree.trigger("onSelect", this);
            }
            function define(node, name) {
                node.element.addClass("tree-selected");
                node._isSelected = true;
                tree._selectedList[name] = node;
            }
            function cancel(node, name) {
                node.element.removeClass("tree-selected");
                node._isSelected = false;
                delete tree._selectedList[name];
            }
        },
        selected: function(status, lockEvent, isOpen) {
            var tree = this.tree;
            if (lockEvent !== true && $.isFunction(tree.options.onBeforeSelect) && tree.options.onBeforeSelect.call(this) === false) {
                return false;
            }
            this.release.apply(this, arguments);
        },
        isSelected: function() {
            return this._isSelected;
        },
        open: function() {
            var _parents = this.tree.nodes.parents(this);
            _parents.push(this);
            $.each(_parents, function(i, v) {
                if (!v._isOpen) {
                    v.element.parent().addClass("tree-open");
                    v._isOpen = true;
                    v.trigger("onOpen", node);
                }
            });
            return this;
        },
        close: function() {
            if (this._isOpen) {
                this.element.parent().removeClass("tree-open");
                this._isOpen = false;
                this.trigger("onClose", node);
            }
            return this;
        },
        isOpen: function() {
            return this._isOpen;
        },
        updateSwitch: function() {
            var _children = this.tree.nodes.children(this);
            if (_children.length) {
                this["element"].children(".tree-switch").addClass("tree-switch-active");
            } else {
                this["element"].children(".tree-switch").removeClass("tree-switch-active");
            }
            return this;
        },
        disabled: function() {},
        setText: function(text) {
            this.set("text", text);
            this["element"].children(".tree-text").html(text);
        },
        //移除节点
        remove: function() {
            var _parent = this.tree.nodes.parent(this);
            var _removes = this.tree.nodes.childrens(this);
            _removes.push(this);
            var _length = _removes.length;
            for (var i = 0; i < _length; i++) {
                var _id = _removes[i].id.toString();
                if (_id in this.tree._selectedList) {
                    delete this.tree._selectedList[_id];
                }
            }
            this.tree.nodes.remove(this);
            _parent && _parent.updateSwitch();
        }
    };
    /**
     * 获取节点对象
     * @param id 节点标识
     * @return
     */
    tree.prototype.getNode = function(selector) {
        var _type = $.type(selector);
        if ($.isNumeric(selector) || _type == "string") {
            return this.nodes.find(selector);
        }
        //if(_type == 'string'){
        //    return $(selector).data(tree.cacheMask);
        //}
        if (nodeManage.isNode(selector)) {
            return selector;
        }
        if (selector instanceof jQuery) {
            return selector.data(tree.cacheMask);
        }
        if (_type == "object" && "nodeName" in selector) {
            return $(selector).data(tree.cacheMask);
        }
    };
    /**
     * 创建节点
     * @return
     */
    tree.prototype.createNode = function(data, temp) {
        var _nodes = this.nodes.serializeNodeData(data) || {};
        for (var i in _nodes) {
            var _parent = this.nodes.parent(_nodes[i]) || this.root;
            tree.createHtml.call(this, _nodes[i], _parent, temp);
            _parent.updateSwitch();
        }
        return this;
    };
    /**
     * 展开树
     * @param id 节点标识
     * @return
     */
    tree.prototype.open = function(selector) {
        var node = this.getNode(node);
        if (nodeManage.isNode(node)) {
            node.open(status);
        }
        return this;
    };
    /**
     * 关闭树
     * @param id 节点标识
     * @return
     */
    tree.prototype.close = function(selector) {
        var node = this.getNode(node);
        if (nodeManage.isNode(node)) {
            node.close(status);
        }
        return this;
    };
    /**
     * 设置选择模式
     * @return
     */
    tree.prototype.setSelectMode = function(mode) {
        var _modes = [ "single", "multiple" ], _mode = $.inArray(mode, _modes) >= 0 ? mode : _modes[0];
        this._selectMode = _mode;
        return this;
    };
    /**
     * 获取选择模式
     * @return
     */
    tree.prototype.getSelectMode = function() {
        return this._selectMode;
    };
    /**
     * 设置选择是否必须
     * @return
     */
    tree.prototype.setSelectMust = function(status) {
        this._selectMust = typeof status == "undefined" ? true : status ? true : false;
        return this;
    };
    /**
     * 获取选择模式
     * @return
     */
    tree.prototype.getSelectMust = function() {
        return this._selectMust;
    };
    /**
     * 选择树节点
     * @param node 节点
     * @param status 选择状态 true选中，false取消选中
     * @return
     */
    tree.prototype.selected = function(node, status, lockEvent) {
        var node = this.getNode(node);
        if (nodeManage.isNode(node)) {
            node.selected(status, lockEvent);
        }
        return this;
    };
    /**
     * 获取当前选中的节点
     * @return
     */
    tree.prototype.getSelected = function() {
        var _selected = [];
        for (var i in this._selectedList) {
            _selected.push(this._selectedList[i]);
        }
        if (this._selectMode == "single") {
            return _selected[0];
        }
        return _selected;
    };
    tree.prototype.setParseTemp = function(temp) {
        var _temp = temp, _self = this;
        if (!$.isFunction(_temp)) {
            _temp = function(node) {
                return '<span class="tree-text">' + tree.HTMLEnCode(node.get(_self.options.displayField)) + "</span>";
            };
        }
        this._parseTemp = _temp;
    };
    tree.prototype.getParseTemp = function() {
        return this._parseTemp;
    };
    //实体转码
    tree.HTMLEnCode = function(str) {
        var s = "";
        if (str.length == 0) return "";
        s = str.replace(/&/g, "&gt;");
        s = s.replace(/</g, "&lt;");
        s = s.replace(/>/g, "&gt;");
        s = s.replace(/ /g, "&nbsp;");
        s = s.replace(/\'/g, "'");
        s = s.replace(/\"/g, "&quot;");
        return s;
    };
    //实体解码
    tree.HTMLDeCode = function(str) {
        var s = "";
        if (str.length == 0) return "";
        s = str.replace(/&gt;/g, "&");
        s = s.replace(/&lt;/g, " <");
        s = s.replace(/&gt;/g, ">");
        s = s.replace(/&nbsp;/g, "    ");
        s = s.replace(/'/g, "'");
        s = s.replace(/&quot;/g, '"');
        return s;
    };
    /**
     * 创建树结构
     * @param id 节点标识
     * @return
     */
    tree.createHtml = function(nodes, parent, temp) {
        var _nodes = nodes, _leng = nodes.length, _temp = $.isFunction(temp) ? temp : this.getParseTemp();
        if (nodeManage.isNode(nodes)) {
            var _li = createItem.call(this, nodes);
            if (parent.isRoot) {
                parent["childrenElement"] = parent["element"];
            } else {
                if (!parent["childrenElement"]) {
                    parent["childrenElement"] = $("<ul></ul>");
                    parent["element"].parent().append(parent["childrenElement"]);
                }
            }
            _li.appendTo(parent["childrenElement"]);
        } else {
            for (var i in _nodes) {
                var _li = _nodes[i]["element"];
                var _hasChildren = _nodes[i].hasChildren();
                if (!_li) {
                    _li = createItem.call(this, _nodes[i]);
                    if (_hasChildren) {
                        _nodes[i]["childrenElement"] = $("<ul></ul>");
                        _li.append(arguments.callee.call(this, _nodes[i].getChildren(), _nodes[i]["childrenElement"]));
                    }
                }
                _li.appendTo(parent);
            }
        }
        function createItem(node) {
            var _item = "";
            var _li = $("<li/>");
            _item += '<span class="tree-item">';
            for (var j = 0; j < node.getLevel(); j++) {
                _item += '<i class="tree-block"></i>';
            }
            _item += '<b class="tree-switch';
            _item += _hasChildren ? " tree-switch-active" : "";
            _item += '"><i>开关</i></b>';
            _item += "</span>";
            _item = $(_item);
            _item.append(_temp(node));
            _item.appendTo(_li);
            _item.data(tree.cacheMask, node);
            node["element"] = _item;
            (function(node, element) {
                element.click(function() {
                    node.selected();
                });
                element.find(".tree-switch").click(function(event) {
                    node.tree.trigger("onSwitch", node);
                    event.stopPropagation();
                });
            })(node, _item);
            return _li;
        }
        return parent;
    };
    tree.options = {
        cls: "think-tree",
        //样式名称
        combobox: null,
        //组合框元素
        selectMode: "single",
        //选择模式
        selectMust: false,
        //当存在选择时，至少保留选择一个(只对单选有效)
        parentField: "pid",
        //父级字段标识
        childField: "id",
        //子级字段标识
        displayField: "text",
        //内容显示字段
        appendTo: null,
        //添加到指定元素中，默认为$('body')元素
        onSelect: null,
        //选择节点时响应回调函数
        parseData: null,
        //解析数据源函数
        parseTemp: null,
        //返回模版函数
        onCreate: null
    };
    $.tree = function(data, options) {
        return new tree(data, options);
    };
    $.serializeTree = node.serialize;
});
/*! showdown 12-09-2016 */
(function() {
    function a(a) {
        "use strict";
        var b = {
            omitExtraWLInCodeBlocks: {
                "default": !1,
                describe: "Omit the default extra whiteline added to code blocks",
                type: "boolean"
            },
            noHeaderId: {
                "default": !1,
                describe: "Turn on/off generated header id",
                type: "boolean"
            },
            prefixHeaderId: {
                "default": !1,
                describe: "Specify a prefix to generated header ids",
                type: "string"
            },
            headerLevelStart: {
                "default": !1,
                describe: "The header blocks level start",
                type: "integer"
            },
            parseImgDimensions: {
                "default": !1,
                describe: "Turn on/off image dimension parsing",
                type: "boolean"
            },
            simplifiedAutoLink: {
                "default": !1,
                describe: "Turn on/off GFM autolink style",
                type: "boolean"
            },
            literalMidWordUnderscores: {
                "default": !1,
                describe: "Parse midword underscores as literal underscores",
                type: "boolean"
            },
            strikethrough: {
                "default": !1,
                describe: "Turn on/off strikethrough support",
                type: "boolean"
            },
            tables: {
                "default": !1,
                describe: "Turn on/off tables support",
                type: "boolean"
            },
            tablesHeaderId: {
                "default": !1,
                describe: "Add an id to table headers",
                type: "boolean"
            },
            ghCodeBlocks: {
                "default": !0,
                describe: "Turn on/off GFM fenced code blocks support",
                type: "boolean"
            },
            tasklists: {
                "default": !1,
                describe: "Turn on/off GFM tasklist support",
                type: "boolean"
            },
            catelists: {
                "default": !1,
                describe: "",
                type: "array"
            }
        };
        if (a === !1) return JSON.parse(JSON.stringify(b));
        var c = {};
        for (var d in b) b.hasOwnProperty(d) && (c[d] = b[d].default);
        return c;
    }
    function b(a, b) {
        "use strict";
        var c = b ? "Error in " + b + " extension->" : "Error in unnamed extension", e = {
            valid: !0,
            error: ""
        };
        d.helper.isArray(a) || (a = [ a ]);
        for (var f = 0; f < a.length; ++f) {
            var g = c + " sub-extension " + f + ": ", h = a[f];
            if ("object" != typeof h) return e.valid = !1, e.error = g + "must be an object, but " + typeof h + " given", 
            e;
            if (!d.helper.isString(h.type)) return e.valid = !1, e.error = g + 'property "type" must be a string, but ' + typeof h.type + " given", 
            e;
            var i = h.type = h.type.toLowerCase();
            if ("language" === i && (i = h.type = "lang"), "html" === i && (i = h.type = "output"), 
            "lang" !== i && "output" !== i && "line" !== i && "super" !== i) return e.valid = !1, 
            e.error = g + "type " + i + ' is not recognized. Valid values: "lang" or "output"', 
            e;
            if (h.filter) {
                if ("function" != typeof h.filter) return e.valid = !1, e.error = g + '"filter" must be a function, but ' + typeof h.filter + " given", 
                e;
            } else {
                if (!h.regex) return e.valid = !1, e.error = g + 'extensions must define either a "regex" property or a "filter" method', 
                e;
                if (d.helper.isString(h.regex) && (h.regex = new RegExp(h.regex, "g")), !h.regex instanceof RegExp) return e.valid = !1, 
                e.error = g + '"regex" property must either be a string or a RegExp object, but ' + typeof h.regex + " given", 
                e;
                if (d.helper.isUndefined(h.replace)) return e.valid = !1, e.error = g + '"regex" extensions must implement a replace string or function', 
                e;
            }
            if (d.helper.isUndefined(h.filter) && d.helper.isUndefined(h.regex)) return e.valid = !1, 
            e.error = g + "output extensions must define a filter property", e;
        }
        return e;
    }
    function c(a, b) {
        "use strict";
        var c = b.charCodeAt(0);
        return "~E" + c + "E";
    }
    var d = {}, e = {}, f = {}, g = a(!0), h = {
        github: {
            omitExtraWLInCodeBlocks: !0,
            prefixHeaderId: "user-content-",
            simplifiedAutoLink: !0,
            literalMidWordUnderscores: !0,
            strikethrough: !0,
            tables: !0,
            tablesHeaderId: !0,
            ghCodeBlocks: !0,
            tasklists: !0
        },
        vanilla: a(!0)
    };
    d.helper = {}, d.extensions = {}, d.setOption = function(a, b) {
        "use strict";
        return g[a] = b, this;
    }, d.getOption = function(a) {
        "use strict";
        return g[a];
    }, d.getOptions = function() {
        "use strict";
        return g;
    }, d.resetOptions = function() {
        "use strict";
        g = a(!0);
    }, d.setFlavor = function(a) {
        "use strict";
        if (h.hasOwnProperty(a)) {
            var b = h[a];
            for (var c in b) b.hasOwnProperty(c) && (g[c] = b[c]);
        }
    }, d.getDefaultOptions = function(b) {
        "use strict";
        return a(b);
    }, d.subParser = function(a, b) {
        "use strict";
        if (d.helper.isString(a)) {
            if ("undefined" == typeof b) {
                if (e.hasOwnProperty(a)) return e[a];
                throw Error("SubParser named " + a + " not registered!");
            }
            e[a] = b;
        }
    }, d.extension = function(a, c) {
        "use strict";
        if (!d.helper.isString(a)) throw Error("Extension 'name' must be a string");
        if (a = d.helper.stdExtName(a), d.helper.isUndefined(c)) {
            if (!f.hasOwnProperty(a)) throw Error("Extension named " + a + " is not registered!");
            return f[a];
        }
        "function" == typeof c && (c = c()), d.helper.isArray(c) || (c = [ c ]);
        var e = b(c, a);
        if (!e.valid) throw Error(e.error);
        f[a] = c;
    }, d.getAllExtensions = function() {
        "use strict";
        return f;
    }, d.removeExtension = function(a) {
        "use strict";
        delete f[a];
    }, d.resetExtensions = function() {
        "use strict";
        f = {};
    }, d.validateExtension = function(a) {
        "use strict";
        var c = b(a, null);
        return !!c.valid || (console.warn(c.error), !1);
    }, d.hasOwnProperty("helper") || (d.helper = {}), d.helper.isString = function(a) {
        "use strict";
        return "string" == typeof a || a instanceof String;
    }, d.helper.isFunction = function(a) {
        "use strict";
        var b = {};
        return a && "[object Function]" === b.toString.call(a);
    }, d.helper.forEach = function(a, b) {
        "use strict";
        if ("function" == typeof a.forEach) a.forEach(b); else for (var c = 0; c < a.length; c++) b(a[c], c, a);
    }, d.helper.isArray = function(a) {
        "use strict";
        return a.constructor === Array;
    }, d.helper.isUndefined = function(a) {
        "use strict";
        return "undefined" == typeof a;
    }, d.helper.stdExtName = function(a) {
        "use strict";
        return a.replace(/[_-]||\s/g, "").toLowerCase();
    }, d.helper.escapeCharactersCallback = c, d.helper.escapeCharacters = function(a, b, d) {
        "use strict";
        var e = "([" + b.replace(/([\[\]\\])/g, "\\$1") + "])";
        d && (e = "\\\\" + e);
        var f = new RegExp(e, "g");
        return a = a.replace(f, c);
    };
    var i = function(a, b, c, d) {
        "use strict";
        var e, f, g, h, i, j = d || "", k = j.indexOf("g") > -1, l = new RegExp(b + "|" + c, "g" + j.replace(/g/g, "")), m = new RegExp(b, j.replace(/g/g, "")), n = [];
        do for (e = 0; g = l.exec(a); ) if (m.test(g[0])) e++ || (f = l.lastIndex, h = f - g[0].length); else if (e && !--e) {
            i = g.index + g[0].length;
            var o = {
                left: {
                    start: h,
                    end: f
                },
                match: {
                    start: f,
                    end: g.index
                },
                right: {
                    start: g.index,
                    end: i
                },
                wholeMatch: {
                    start: h,
                    end: i
                }
            };
            if (n.push(o), !k) return n;
        } while (e && (l.lastIndex = f));
        return n;
    };
    d.helper.matchRecursiveRegExp = function(a, b, c, d) {
        "use strict";
        var e, f, g, h, i, j = d || "", k = j.indexOf("g") > -1, l = new RegExp(b + "|" + c, j), m = new RegExp(b, j.replace(/g/g, "")), n = [];
        do for (e = 0; g = l.exec(a); ) if (m.test(g[0])) e++ || (h = g[0], f = l.lastIndex); else if (e && !--e) {
            i = g[0];
            var o = a.slice(f, g.index);
            if (n.push([ h + o + i, o ]), !k) return n;
        } while (e && (l.lastIndex = f));
        return n;
    }, d.helper.replaceRecursiveRegExp = function(a, b, c, e, f) {
        "use strict";
        if (!d.helper.isFunction(b)) {
            var g = b;
            b = function() {
                return g;
            };
        }
        var h = i(a, c, e, f), j = a, k = h.length;
        if (k > 0) {
            var l = [];
            0 !== h[0].wholeMatch.start && l.push(a.slice(0, h[0].wholeMatch.start));
            for (var m = 0; m < k; ++m) l.push(b(a.slice(h[m].wholeMatch.start, h[m].wholeMatch.end), a.slice(h[m].match.start, h[m].match.end), a.slice(h[m].left.start, h[m].left.end), a.slice(h[m].right.start, h[m].right.end))), 
            m < k - 1 && l.push(a.slice(h[m].wholeMatch.end, h[m + 1].wholeMatch.start));
            h[k - 1].wholeMatch.end < a.length && l.push(a.slice(h[k - 1].wholeMatch.end)), 
            j = l.join("");
        }
        return j;
    }, d.helper.isUndefined(console) && (console = {
        warn: function(a) {
            "use strict";
            alert(a);
        },
        log: function(a) {
            "use strict";
            alert(a);
        }
    }), d.Converter = function(a) {
        "use strict";
        function c() {
            a = a || {};
            for (var b in g) g.hasOwnProperty(b) && (k[b] = g[b]);
            if ("object" != typeof a) throw Error("Converter expects the passed parameter to be an object, but " + typeof a + " was passed instead.");
            for (var c in a) a.hasOwnProperty(c) && (k[c] = a[c]);
            k.extensions && d.helper.forEach(k.extensions, i);
        }
        function i(a, c) {
            if (c = c || null, d.helper.isString(a)) {
                if (a = d.helper.stdExtName(a), c = a, d.extensions[a]) return console.warn("DEPRECATION WARNING: " + a + " is an old extension that uses a deprecated loading method.Please inform the developer that the extension should be updated!"), 
                void j(d.extensions[a], a);
                if (d.helper.isUndefined(f[a])) throw Error('Extension "' + a + '" could not be loaded. It was either not found or is not a valid extension.');
                a = f[a];
            }
            "function" == typeof a && (a = a()), d.helper.isArray(a) || (a = [ a ]);
            var e = b(a, c);
            if (!e.valid) throw Error(e.error);
            for (var g = 0; g < a.length; ++g) switch (a[g].type) {
              case "super":
                l.push(a[g]);
                break;

              case "line":
                m.push(a[g]);
                break;

              case "lang":
                n.push(a[g]);
                break;

              case "output":
                o.push(a[g]);
                break;

              default:
                throw Error("Extension loader error: Type unrecognized!!!");
            }
        }
        function j(a, c) {
            "function" == typeof a && (a = a(new d.Converter())), d.helper.isArray(a) || (a = [ a ]);
            var e = b(a, c);
            if (!e.valid) throw Error(e.error);
            for (var f = 0; f < a.length; ++f) switch (a[f].type) {
              case "super":
                l.push(a[f]);
                break;

              case "line":
                m.push(a[f]);
                break;

              case "lang":
                n.push(a[f]);
                break;

              case "output":
                o.push(a[f]);
                break;

              default:
                throw Error("Extension loader error: Type unrecognized!!!");
            }
        }
        var k = {}, l = [], m = [], n = [], o = [], p = [ "hashHTMLBlocks", "hashHTMLSpans", "stripLinkDefinitions", "blockGamut", "unhashHTMLSpans", "unescapeSpecialChars" ];
        c(), this.makeHtml = function(a) {
            if (!a) return a;
            var b = {
                gHtmlSpans: [],
                gHtmlBlocks: [],
                gUrls: {},
                gTitles: {},
                gDimensions: {},
                gListLevel: 0,
                hashLinkCounts: {},
                superExtensions: l,
                langExtensions: n,
                lineExtensions: m,
                outputModifiers: o,
                converter: this
            };
            d.helper.forEach(l, function(c) {
                a = d.subParser("runExtension")(c, a, k, b);
            }), a = a.replace(/~/g, "~T"), a = a.replace(/\$/g, "~D"), a = a.replace(/\r\n/g, "\n"), 
            a = a.replace(/\r/g, "\n"), a = "\n\n" + a + "\n\n", a = d.subParser("detab")(a, k, b), 
            a = d.subParser("stripBlankLines")(a, k, b), a = d.subParser("fencedCodeBlocks")(a, k, b), 
            a = d.subParser("githubCodeBlocks")(a, k, b), d.helper.forEach(n, function(c) {
                a = d.subParser("runExtension")(c, a, k, b);
            });
            for (var c = 0; c < p.length; ++c) {
                var f = p[c];
                a = e[f](a, k, b);
            }
            return a = a.replace(/~D/g, "$$"), a = a.replace(/~T/g, "~"), d.helper.forEach(o, function(c) {
                a = d.subParser("runExtension")(c, a, k, b);
            }), a = a.replace(/<br \/>(?=<\/?(p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math|style|section|slide|header|footer|nav|article|aside|address|audio|canvas|figure|hgroup|output|video|li)(\b|>))/g, "");
        }, this.setOption = function(a, b) {
            k[a] = b;
        }, this.getOption = function(a) {
            return k[a];
        }, this.getOptions = function() {
            return k;
        }, this.addExtension = function(a, b) {
            b = b || null, i(a, b);
        }, this.useExtension = function(a) {
            i(a);
        }, this.setFlavor = function(a) {
            if (h.hasOwnProperty(a)) {
                var b = h[a];
                for (var c in b) b.hasOwnProperty(c) && (k[c] = b[c]);
            }
        }, this.removeExtension = function(a) {
            d.helper.isArray(a) || (a = [ a ]);
            for (var b = 0; b < a.length; ++b) {
                for (var c = a[b], e = 0; e < superExtensions.length; ++e) superExtensions[e] === c && superExtensions[e].splice(e, 1);
                for (var f = 0; f < m.length; ++f) m[f] === c && m[f].splice(f, 1);
                for (var g = 0; g < n.length; ++g) n[g] === c && n[g].splice(g, 1);
                for (var h = 0; h < o.length; ++h) o[h] === c && o[h].splice(h, 1);
            }
        }, this.getAllExtensions = function() {
            return {
                "super": l,
                line: m,
                language: n,
                output: o
            };
        };
    }, d.subParser("anchors", function(a, b, c) {
        "use strict";
        var e = function(a, b, e, f, g, h, i, j) {
            d.helper.isUndefined(j) && (j = ""), a = b;
            var k = e, l = f.toLowerCase(), m = g, n = j;
            if (!m) if (l || (l = k.toLowerCase().replace(/ ?\n/g, " ")), m = "#" + l, d.helper.isUndefined(c.gUrls[l])) {
                if (!(a.search(/\(\s*\)$/m) > -1)) return a;
                m = "";
            } else m = c.gUrls[l], d.helper.isUndefined(c.gTitles[l]) || (n = c.gTitles[l]);
            m = d.helper.escapeCharacters(m, "*_", !1);
            var o = '<a href="' + m + '"';
            return "" !== n && null !== n && (n = n.replace(/"/g, "&quot;"), n = d.helper.escapeCharacters(n, "*_", !1), 
            o += ' title="' + n + '"'), o += ">" + k + "</a>";
        };
        return a = a.replace(/(\[((?:\[[^\]]*\]|[^\[\]])*)\][ ]?(?:\n[ ]*)?\[(.*?)\])()()()()/g, e), 
        a = a.replace(/(\[((?:\[[^\]]*\]|[^\[\]])*)\]\([ \t]*()<?(.*?(?:\(.*?\).*?)?)>?[ \t]*((['"])(.*?)\6[ \t]*)?\))/g, e), 
        a = a.replace(/(\[([^\[\]]+)\])()()()()()/g, e);
    }), d.subParser("autoLinks", function(a, b) {
        "use strict";
        function c(a, b) {
            var c = d.subParser("unescapeSpecialChars")(b);
            return d.subParser("encodeEmailAddress")(c);
        }
        var e = /\b(((https?|ftp|dict):\/\/|www\.)[^'">\s]+\.[^'">\s\]\)]+)(?=\)|]|\s|$)(?!["<>])/gi, f = /<(((https?|ftp|dict):\/\/|www\.)[^'">\s]+)>/gi, g = /\b(?:mailto:)?([-.\w]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)\b(?!["<>])/gi, h = /<(?:mailto:)?([-.\w]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)>/gi;
        return a = a.replace(f, '<a href="$1">$1</a>'), a = a.replace(h, c), b.simplifiedAutoLink && (a = a.replace(e, '<a href="$1">$1</a>'), 
        a = a.replace(g, c)), a;
    }), d.subParser("blockGamut", function(a, b, c) {
        "use strict";
        var e = d.subParser("hashBlock")("<hr />", b, c);
        return a = a.replace(/^[ ]{0,2}([ ]?\*[ ]?){3,}[ \t]*$/gm, e), a = a.replace(/^[ ]{0,2}([ ]?\-[ ]?){3,}[ \t]*$/gm, e), 
        a = a.replace(/^[ ]{0,2}([ ]?_[ ]?){3,}[ \t]*$/gm, e), a = d.subParser("lists")(a, b, c), 
        a = d.subParser("fencedCodeBlocks")(a, b, c), a = d.subParser("githubCodeBlocks")(a, b, c), 
        a = d.subParser("codeBlocks")(a, b, c), a = d.subParser("blockQuotes")(a, b, c), 
        a = d.subParser("tables")(a, b, c), a = d.subParser("headers")(a, b, c), a = d.subParser("hashHTMLBlocks")(a, b, c), 
        a = d.subParser("paragraphs")(a, b, c);
    }), d.subParser("blockQuotes", function(a, b, c) {
        "use strict";
        return a = a.replace(/((^[ \t]*>(?:\[(\S+?)\])?[ \t]?.+\n(.+\n)*\n*)+)/gm, function(a, e, f, g) {
            var h = e;
            return g = g || "default", h = h.replace(/^[ \t]*>(?:\[(\S+?)\])?[ \t]?/gm, "~0"), 
            h = h.replace(/~0/g, ""), h = h.replace(/^[ \t]+$/gm, ""), h = d.subParser("blockGamut")(h, b, c), 
            h = h.replace(/(^|\n)/g, "$1  "), h = h.replace(/(\s*<pre>[^\r]+?<\/pre>)/gm, function(a, b) {
                var c = b;
                return c = c.replace(/^  /gm, "~0"), c = c.replace(/~0/g, "");
            }), d.subParser("hashBlock")('<blockquote class="' + g + '">\n' + h + "\n</blockquote>", b, c);
        });
    }), d.subParser("catelog", function(a) {
        "use strict";
        return options.catelists ? a = a.replace(/!([a-z][a-z0-9-_]*)\s/g, function(a, b) {
            var c = null;
            return $.each(options.catelists, function(a, d) {
                if (d.name === b) return c = d, !1;
            }), c ? '<a href="' + c.name + '" title="' + c.title + '" >' + c.title + "</a>" : a;
        }) : a;
    }), d.subParser("codeBlocks", function(a, b, c) {
        "use strict";
        a += "~0";
        var e = /(?:\n\n|^)((?:(?:[ ]{4}|\t).*\n+)+)(\n*[ ]{0,3}[^ \t\n]|(?=~0))/g;
        return a = a.replace(e, function(a, e, f) {
            var g = e, h = f, i = "\n";
            return g = d.subParser("outdent")(g), g = d.subParser("encodeCode")(g), g = d.subParser("detab")(g), 
            g = g.replace(/^\n+/g, ""), g = g.replace(/\n+$/g, ""), b.omitExtraWLInCodeBlocks && (i = ""), 
            g = "<pre><code>" + g + i + "</code></pre>", d.subParser("hashBlock")(g, b, c) + h;
        }), a = a.replace(/~0/, "");
    }), d.subParser("codeSpans", function(a) {
        "use strict";
        return a = a.replace(/(^|[^\\])(`+)([^\r]*?[^`])\2(?!`)/gm, function(a, b, c, e) {
            var f = e;
            return f = f.replace(/^([ \t]*)/g, ""), f = f.replace(/[ \t]*$/g, ""), f = d.subParser("encodeCode")(f), 
            b + "<code>" + f + "</code>";
        });
    }), d.subParser("detab", function(a) {
        "use strict";
        return a = a.replace(/\t(?=\t)/g, "    "), a = a.replace(/\t/g, "~A~B"), a = a.replace(/~B(.+?)~A/g, function(a, b) {
            for (var c = b, d = 4 - c.length % 4, e = 0; e < d; e++) c += " ";
            return c;
        }), a = a.replace(/~A/g, "    "), a = a.replace(/~B/g, "");
    }), d.subParser("encodeAmpsAndAngles", function(a) {
        "use strict";
        return a = a.replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\w+);)/g, "&amp;"), a = a.replace(/<(?![a-z\/?\$!])/gi, "&lt;");
    }), d.subParser("encodeBackslashEscapes", function(a) {
        "use strict";
        return a = a.replace(/\\(\\)/g, d.helper.escapeCharactersCallback), a = a.replace(/\\([`*_{}\[\]()>#+-.!])/g, d.helper.escapeCharactersCallback);
    }), d.subParser("encodeCode", function(a) {
        "use strict";
        return a = a.replace(/&/g, "&amp;"), a = a.replace(/</g, "&lt;"), a = a.replace(/>/g, "&gt;"), 
        a = d.helper.escapeCharacters(a, "*_{}[]\\~", !1);
    }), d.subParser("encodeEmailAddress", function(a) {
        "use strict";
        var b = [ function(a) {
            return "&#" + a.charCodeAt(0) + ";";
        }, function(a) {
            return "&#x" + a.charCodeAt(0).toString(16) + ";";
        }, function(a) {
            return a;
        } ];
        return a = "mailto:" + a, a = a.replace(/./g, function(a) {
            if ("@" === a) a = b[Math.floor(2 * Math.random())](a); else if (":" !== a) {
                var c = Math.random();
                a = c > .9 ? b[2](a) : c > .45 ? b[1](a) : b[0](a);
            }
            return a;
        }), a = '<a href="' + a + '">' + a + "</a>", a = a.replace(/">.+:/g, '">');
    }), d.subParser("escapeSpecialCharsWithinTagAttributes", function(a) {
        "use strict";
        var b = /(<[a-z\/!$]("[^"]*"|'[^']*'|[^'">])*>|<!(--.*?--\s*)+>)/gi;
        return a = a.replace(b, function(a) {
            var b = a.replace(/(.)<\/?code>(?=.)/g, "$1`");
            return b = d.helper.escapeCharacters(b, "\\`*_", !1);
        });
    }), d.subParser("fencedCodeBlocks", function(a, b, c) {
        "use strict";
        return b.ghCodeBlocks ? (a += "~0", a = a.replace(/(?:^|\n)(?:~T){3}(.*)\n([\s\S]*?)\n(?:~T){3}/g, function(a, e, f) {
            var g = e, h = f, i = "\n";
            return b.omitExtraWLInCodeBlocks && (i = ""), h = d.subParser("encodeCode")(h), 
            h = d.subParser("detab")(h), h = h.replace(/^\n+/g, ""), h = h.replace(/\n+$/g, ""), 
            h = "<pre><code" + (g ? ' class="' + g + '"' : "") + ">" + h + i + "</code></pre>", 
            d.subParser("hashBlock")(h, b, c);
        }), a = a.replace(/~0/, "")) : a;
    }), d.subParser("githubCodeBlocks", function(a, b, c) {
        "use strict";
        return b.ghCodeBlocks ? (a += "~0", a = a.replace(/(?:^|\n)```(.*)\n([\s\S]*?)\n```/g, function(a, e, f) {
            var g = b.omitExtraWLInCodeBlocks ? "" : "\n";
            return f = d.subParser("encodeCode")(f), f = d.subParser("detab")(f), f = f.replace(/^\n+/g, ""), 
            f = f.replace(/\n+$/g, ""), f = "<pre><code" + (e ? ' class="' + e + " language-" + e + '"' : "") + ">" + f + g + "</code></pre>", 
            d.subParser("hashBlock")(f, b, c);
        }), a = a.replace(/~0/, "")) : a;
    }), d.subParser("hashBlock", function(a, b, c) {
        "use strict";
        return a = a.replace(/(^\n+|\n+$)/g, ""), "\n\n~K" + (c.gHtmlBlocks.push(a) - 1) + "K\n\n";
    }), d.subParser("hashElement", function(a, b, c) {
        "use strict";
        return function(a, b) {
            var d = b;
            return d = d.replace(/\n\n/g, "\n"), d = d.replace(/^\n/, ""), d = d.replace(/\n+$/g, ""), 
            d = "\n\n~K" + (c.gHtmlBlocks.push(d) - 1) + "K\n\n";
        };
    }), d.subParser("hashHTMLBlocks", function(a, b, c) {
        "use strict";
        for (var e = [ "pre", "div", "h1", "h2", "h3", "h4", "h5", "h6", "blockquote", "table", "dl", "ol", "ul", "slide", "script", "noscript", "form", "fieldset", "iframe", "math", "style", "section", "header", "footer", "nav", "article", "aside", "address", "audio", "canvas", "figure", "hgroup", "output", "video", "p" ], f = function(a, b, d, e) {
            var f = a;
            return d.search(/\bmarkdown\b/) !== -1 && (f = d + c.converter.makeHtml(b) + e), 
            "\n\n~K" + (c.gHtmlBlocks.push(f) - 1) + "K\n\n";
        }, g = 0; g < e.length; ++g) a = d.helper.replaceRecursiveRegExp(a, f, "^(?: |\\t){0,3}<" + e[g] + "\\b[^>]*>", "</" + e[g] + ">", "gim");
        return a = a.replace(/(\n[ ]{0,3}(<(hr)\b([^<>])*?\/?>)[ \t]*(?=\n{2,}))/g, d.subParser("hashElement")(a, b, c)), 
        a = a.replace(/(<!--[\s\S]*?-->)/g, d.subParser("hashElement")(a, b, c)), a = a.replace(/(?:\n\n)([ ]{0,3}(?:<([?%])[^\r]*?\2>)[ \t]*(?=\n{2,}))/g, d.subParser("hashElement")(a, b, c));
    }), d.subParser("hashHTMLSpans", function(a, b, c) {
        "use strict";
        for (var e = d.helper.matchRecursiveRegExp(a, "<code\\b[^>]*>", "</code>", "gi"), f = 0; f < e.length; ++f) a = a.replace(e[f][0], "~L" + (c.gHtmlSpans.push(e[f][0]) - 1) + "L");
        return a;
    }), d.subParser("unhashHTMLSpans", function(a, b, c) {
        "use strict";
        for (var d = 0; d < c.gHtmlSpans.length; ++d) a = a.replace("~L" + d + "L", c.gHtmlSpans[d]);
        return a;
    }), d.subParser("headers", function(a, b, c) {
        "use strict";
        function e(a) {
            var b = a.toLowerCase().replace(/[^\w]+/g, "-"), e = /^[\u4e00-\u9fa5]+$/.test(a), g = e ? escape(a).replace(/\%/g, "") : b;
            return c.hashLinkCounts[g] ? g = g + "-" + c.hashLinkCounts[g]++ : c.hashLinkCounts[g] = 1, 
            f === !0 && (f = "section"), d.helper.isString(f) && (g = f + g), g;
        }
        var f = b.prefixHeaderId, g = isNaN(parseInt(b.headerLevelStart)) ? 1 : parseInt(b.headerLevelStart);
        return a = a.replace(/^(.+)[ \t]*\n=+[ \t]*\n+/gm, function(a, f) {
            var h = d.subParser("spanGamut")(f, b, c), i = g, j = b.noHeaderId ? "" : ' id="' + e(h) + '"', k = "<h" + i + j + ">" + h + "</h" + i + ">";
            return d.subParser("hashBlock")(k, b, c);
        }), a = a.replace(/^(.+)[ \t]*\n-+[ \t]*\n+/gm, function(a, f) {
            var h = d.subParser("spanGamut")(f, b, c), i = g + 1, j = b.noHeaderId ? "" : ' id="' + e(h) + '"', k = "<h" + i + j + ">" + h + "</h" + i + ">";
            return d.subParser("hashBlock")(k, b, c);
        }), a = a.replace(/^(#{1,6})[ \t]*(.+?)[ \t]*#*\n+/gm, function(a, f, h) {
            var i = d.subParser("spanGamut")(h, b, c), j = g - 1 + f.length, k = b.noHeaderId ? "" : ' id="' + e(i) + '"', l = "<h" + j + k + ">" + i + "</h" + j + ">";
            return d.subParser("hashBlock")(l, b, c);
        });
    }), d.subParser("images", function(a, b, c) {
        "use strict";
        function e(a, e, f, g, h, i, j, k) {
            var l = c.gUrls, m = c.gTitles, n = c.gDimensions;
            if (f = f.toLowerCase(), k || (k = ""), "" === g || null === g) {
                if ("" !== f && null !== f || (f = e.toLowerCase().replace(/ ?\n/g, " ")), g = "#" + f, 
                d.helper.isUndefined(l[f])) return a;
                g = l[f], d.helper.isUndefined(m[f]) || (k = m[f]), d.helper.isUndefined(n[f]) || (h = n[f].width, 
                i = n[f].height);
            }
            if (b.book && !g.match(/^(https?)?:\/\//i)) {
                var o = decodeURIComponent(b.book.articleId), p = o.substring(0, o.lastIndexOf("/") + 1);
                0 === g.indexOf("/") ? g = g.substring(1) : 0 === g.indexOf("../") ? (p = p.split("/").slice(0, -g.match(/^(\.\.\/)+/g)[0].split("/").length).join("/") + "/", 
                g = p.replace(/^\//gi, "") + g.replace(/^(\.\.\/)+/g, "")) : g = 0 === g.indexOf("./") ? p + g.substring(2) : p + g, 
                g = g.replace(/\/\//gi, "/"), g = b.book.api + "/raw/" + b.book.ref + "/" + g + "?access-token=" + b.book.token;
            }
            e = e.replace(/"/g, "&quot;"), e = d.helper.escapeCharacters(e, "*_", !1), g = d.helper.escapeCharacters(g, "*_", !1);
            var q = '<img src="' + g + '" alt="' + e + '"';
            return k && (k = k.replace(/"/g, "&quot;"), k = d.helper.escapeCharacters(k, "*_", !1), 
            q += ' title="' + k + '"'), h && i && (h = "*" === h ? "auto" : h, i = "*" === i ? "auto" : i, 
            q += ' width="' + h + '"', q += ' height="' + i + '"'), q += " />";
        }
        var f = /!\[(.*?)]\s?\([ \t]*()<?(\S+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(['"])(.*?)\6[ \t]*)?\)/g, g = /!\[(.*?)][ ]?(?:\n[ ]*)?\[(.*?)]()()()()()/g;
        return a = a.replace(g, e), a = a.replace(f, e);
    }), d.subParser("italicsAndBold", function(a, b) {
        "use strict";
        return b.literalMidWordUnderscores ? (a = a.replace(/(^|\s|>|\b)__(?=\S)([^]+?)__(?=\b|<|\s|$)/gm, "$1<strong>$2</strong>"), 
        a = a.replace(/(^|\s|>|\b)_(?=\S)([^]+?)_(?=\b|<|\s|$)/gm, "$1<em>$2</em>"), a = a.replace(/(\*\*)(?=\S)([^\r]*?\S[*]*)\1/g, "<strong>$2</strong>"), 
        a = a.replace(/(\*)(?=\S)([^\r]*?\S)\1/g, "<em>$2</em>")) : (a = a.replace(/(\*\*|__)(?=\S)([^\r]*?\S[*_]*)\1/g, "<strong>$2</strong>"), 
        a = a.replace(/(\*|_)(?=\S)([^\r]*?\S)\1/g, "<em>$2</em>")), a;
    }), d.subParser("lists", function(a, b, c) {
        "use strict";
        function e(a, e) {
            c.gListLevel++, a = a.replace(/\n{2,}$/, "\n"), a += "~0";
            var f = /(\n)?(^[ \t]*)([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(~0|\2([*+-]|\d+[.])[ \t]+))/gm, g = /\n[ \t]*\n(?!~0)/.test(a);
            return a = a.replace(f, function(a, e, f, h, i, j, k) {
                k = k && "" !== k.trim();
                var l = d.subParser("outdent")(i, b, c), m = "";
                return j && b.tasklists && (m = ' class="task-list-item" style="list-style-type: none;"', 
                l = l.replace(/^[ \t]*\[(x| )?]/m, function() {
                    var a = '<input type="checkbox" disabled style="margin: 0px 0.35em 0.25em -1.6em; vertical-align: middle;"';
                    return k && (a += " checked"), a += ">";
                })), e || l.search(/\n{2,}/) > -1 || l.match("^#{1,6}") ? (l = d.subParser("blockGamut")(l, b, c), 
                l = d.subParser("hashBlock")(l, b, c)) : (l = d.subParser("lists")(l, b, c), l = l.replace(/\n$/, ""), 
                l = g ? d.subParser("paragraphs")(l, b, c) : d.subParser("spanGamut")(l, b, c)), 
                l = "<li" + m + ">" + l + "</li>";
            }), a = a.replace(/~0/g, ""), c.gListLevel--, e && (a = a.replace(/\s+$/, "")), 
            a;
        }
        function f(a, b, c) {
            var d = "ul" === b ? /^ {0,2}\d+\.[ \t]/gm : /^ {0,2}[*+-][ \t]/gm, f = [], g = "";
            if (a.search(d) !== -1) {
                !function a(f) {
                    var h = f.search(d);
                    h !== -1 ? (g += "\n\n<" + b + ">" + e(f.slice(0, h), !!c) + "</" + b + ">\n\n", 
                    b = "ul" === b ? "ol" : "ul", d = "ul" === b ? /^ {0,2}\d+\.[ \t]/gm : /^ {0,2}[*+-][ \t]/gm, 
                    a(f.slice(h))) : g += "\n\n<" + b + ">" + e(f, !!c) + "</" + b + ">\n\n";
                }(a);
                for (var h = 0; h < f.length; ++h) ;
            } else g = "\n\n<" + b + ">" + e(a, !!c) + "</" + b + ">\n\n";
            return g;
        }
        a += "~0";
        var g = /^(([ ]{0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(~0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm;
        return c.gListLevel ? a = a.replace(g, function(a, b, c) {
            var d = c.search(/[*+-]/g) > -1 ? "ul" : "ol";
            return f(b, d, !0);
        }) : (g = /(\n\n|^\n?)(([ ]{0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(~0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm, 
        a = a.replace(g, function(a, b, c, d) {
            var e = d.search(/[*+-]/g) > -1 ? "ul" : "ol";
            return f(c, e);
        })), a = a.replace(/~0/, "");
    }), d.subParser("outdent", function(a) {
        "use strict";
        return a = a.replace(/^(\t|[ ]{1,4})/gm, "~0"), a = a.replace(/~0/g, "");
    }), d.subParser("paragraphs", function(a, b, c) {
        "use strict";
        a = a.replace(/^\n+/g, ""), a = a.replace(/\n+$/g, "");
        for (var e = a.split(/\n{2,}/g), f = [], g = e.length, h = 0; h < g; h++) {
            var i = e[h];
            i.search(/~K(\d+)K/g) >= 0 ? f.push(i) : i.search(/\S/) >= 0 && (i = d.subParser("spanGamut")(i, b, c), 
            i = i.replace(/^([ \t]*)/g, "<p>"), i += "</p>", f.push(i));
        }
        for (g = f.length, h = 0; h < g; h++) for (;f[h].search(/~K(\d+)K/) >= 0; ) {
            var j = c.gHtmlBlocks[RegExp.$1];
            j = j.replace(/\$/g, "$$$$"), f[h] = f[h].replace(/~K\d+K/, j);
        }
        return f.join("\n\n");
    }), d.subParser("runExtension", function(a, b, c, d) {
        "use strict";
        if (a.filter) b = a.filter(b, d.converter, c); else if (a.regex) {
            var e = a.regex;
            !e instanceof RegExp && (e = new RegExp(e, "g")), b = b.replace(e, a.replace);
        }
        return b;
    }), d.subParser("spanGamut", function(a, b, c) {
        "use strict";
        return b.onlyLink || (a = d.subParser("codeSpans")(a, b, c), d.helper.forEach(c.lineExtensions, function(e) {
            a = d.subParser("runExtension")(e, a, b, c);
        }), a = d.subParser("escapeSpecialCharsWithinTagAttributes")(a, b, c), a = d.subParser("encodeBackslashEscapes")(a, b, c), 
        a = d.subParser("images")(a, b, c)), a = d.subParser("anchors")(a, b, c), b.onlyLink || (a = d.subParser("autoLinks")(a, b, c), 
        a = d.subParser("encodeAmpsAndAngles")(a, b, c), a = d.subParser("italicsAndBold")(a, b, c), 
        a = d.subParser("strikethrough")(a, b, c)), a = a.replace(/([^\>\n])\n+(?!$)/g, "$1<br />\n");
    }), d.subParser("strikethrough", function(a, b) {
        "use strict";
        return b.strikethrough && (a = a.replace(/(?:~T){2}([^~]+)(?:~T){2}/g, "<del>$1</del>")), 
        a;
    }), d.subParser("stripBlankLines", function(a) {
        "use strict";
        return a.replace(/^[ \t]+$/gm, "");
    }), d.subParser("stripLinkDefinitions", function(a, b, c) {
        "use strict";
        var e = /^ {0,3}\[(.+)]:[ \t]*\n?[ \t]*<?(\S+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n+|(?=~0))/gm;
        return a += "~0", a = a.replace(e, function(a, e, f, g, h, i, j) {
            return e = e.toLowerCase(), c.gUrls[e] = d.subParser("encodeAmpsAndAngles")(f), 
            i ? i + j : (j && (c.gTitles[e] = j.replace(/"|'/g, "&quot;")), b.parseImgDimensions && g && h && (c.gDimensions[e] = {
                width: g,
                height: h
            }), "");
        }), a = a.replace(/~0/, "");
    }), d.subParser("tables", function(a, b, c) {
        "use strict";
        var e = function() {
            var a, e = {};
            return e.th = function(a, e) {
                var f = "";
                return a = a.trim(), "" === a ? "" : (b.tableHeaderId && (f = ' id="' + a.replace(/ /g, "_").toLowerCase() + '"'), 
                a = d.subParser("spanGamut")(a, b, c), e = e && "" !== e.trim() ? ' style="' + e + '"' : "", 
                "<th" + f + e + ">" + a + "</th>");
            }, e.td = function(a, e) {
                var f = d.subParser("spanGamut")(a.trim(), b, c);
                return e = e && "" !== e.trim() ? ' style="' + e + '"' : "", "<td" + e + ">" + f + "</td>";
            }, e.ths = function() {
                var a = "", b = 0, c = [].slice.apply(arguments[0]), d = [].slice.apply(arguments[1]);
                for (b; b < c.length; b += 1) a += e.th(c[b], d[b]) + "\n";
                return a;
            }, e.tds = function() {
                var a = "", b = 0, c = [].slice.apply(arguments[0]), d = [].slice.apply(arguments[1]);
                for (b; b < c.length; b += 1) a += e.td(c[b], d[b]) + "\n";
                return a;
            }, e.thead = function() {
                var a, b = [].slice.apply(arguments[0]), c = [].slice.apply(arguments[1]);
                return a = "<thead>\n", a += "<tr>\n", a += e.ths.apply(this, [ b, c ]), a += "</tr>\n", 
                a += "</thead>\n";
            }, e.tr = function() {
                var a, b = [].slice.apply(arguments[0]), c = [].slice.apply(arguments[1]);
                return a = "<tr>\n", a += e.tds.apply(this, [ b, c ]), a += "</tr>\n";
            }, a = function(a) {
                var b, c, d = 0, f = a.split("\n"), g = [];
                for (d; d < f.length; d += 1) {
                    if (b = f[d], b.match(/^[|].*[|]\s*$/)) {
                        b = b.trim();
                        var h = [], i = f[d + 1].trim(), j = [], k = 0;
                        if (i.match(/^[|][-=|: ]+[|]$/)) for (j = i.substring(1, i.length - 1).split("|"), 
                        k = 0; k < j.length; ++k) j[k] = j[k].trim(), j[k].match(/^[:][-=| ]+[:]$/) ? j[k] = "text-align:center;" : j[k].match(/^[-=| ]+[:]$/) ? j[k] = "text-align:right;" : j[k].match(/^[:][-=| ]+$/) ? j[k] = "text-align:left;" : j[k] = "";
                        if (h.push("<table>"), c = b.substring(1, b.length - 1).split("|"), 0 === j.length) for (k = 0; k < c.length; ++k) j.push("text-align:left");
                        if (h.push(e.thead.apply(this, [ c, j ])), b = f[++d], b.trim().match(/^[|][-=|: ]+[|]$/)) {
                            for (b = f[++d], h.push("<tbody>"); b.trim().match(/^[|].*[|]$/); ) b = b.trim(), 
                            h.push(e.tr.apply(this, [ b.substring(1, b.length - 1).split("|"), j ])), b = f[++d];
                            h.push("</tbody>"), h.push("</table>\n"), g.push(h.join("\n"));
                            continue;
                        }
                        b = f[--d];
                    }
                    g.push(b);
                }
                return g.join("\n");
            }, {
                parse: a
            };
        };
        if (b.tables) {
            var f = e();
            return a = a.replace(/\\\|/g, "~S"), a = f.parse(a), a = a.replace(/~S/, "|");
        }
        return a;
    }), d.subParser("unescapeSpecialChars", function(a) {
        "use strict";
        return a = a.replace(/~E(\d+)E/g, function(a, b) {
            var c = parseInt(b);
            return String.fromCharCode(c);
        });
    });
    var j = this;
    "undefined" != typeof module && module.exports ? module.exports = d : "function" == typeof define && (define.amd || define.cmd) ? define("component/showdown/dist/showdown.min", [], function() {
        "use strict";
        return d;
    }) : j.showdown = d, function(a) {
        "use strict";
        function b(a, b, c) {
            var d, e, f, g = '<ul class="markdown-toc-list">', h = 0;
            b = b || 1;
            for (var i = 0, j = a.length; i < j; i++) e = a[i].text, f = parseInt(a[i].level), 
            d = a[i].id, f < b || f > c || (g += f > h ? new Array(f - h).join("<li><ul>") : f < h ? new Array(h - f + 2).join("</ul></li>") : "</ul></li>", 
            g += '<li><a class="toc-level-' + f + '" href="#' + d + '" level="' + f + '">' + e + "</a><ul>", 
            h = f);
            return g += new Array(h + 1).join("</ul></li>"), g += "</ul>", '<div class="markdown-toc">' + g.replace(/\r?\n?<ul><\/ul>/g, "") + "</div>";
        }
        var c = function() {
            return [ {
                type: "output",
                filter: function(a) {
                    var c = [];
                    return a.replace(/<h(\d)\s+id=(['"])([^'"]+)\2\s*>(.*?)<\/h\1>/gi, function(a, b, d, e, f) {
                        c.push({
                            text: f.replace(/<\/?.+?>/g, ""),
                            level: b,
                            id: e
                        });
                    }), a = a.replace(/^<p>\[toc(?:=(\d)(?:,(\d))?)?\]<\/p>$/gim, function(a, d, e) {
                        return d ? e || (e = d, d = 1) : (d = 1, e = 9), b(c, d, e);
                    });
                }
            } ];
        };
        "undefined" != typeof a && a.extension ? a.extension("toc", c) : "undefined" != typeof window && window.showdown && window.showdown.extension && window.showdown.extension("toc", c), 
        "undefined" != typeof module && (module.exports = c);
    }(d);
}).call(this);
/*!art-template - Template Engine | http://aui.github.com/artTemplate/*/
!function() {
    function a(a) {
        return a.replace(t, "").replace(u, ",").replace(v, "").replace(w, "").replace(x, "").split(/^$|,+/);
    }
    function b(a) {
        return "'" + a.replace(/('|\\)/g, "\\$1").replace(/\r/g, "\\r").replace(/\n/g, "\\n") + "'";
    }
    function c(c, d) {
        function e(a) {
            return m += a.split(/\n/).length - 1, k && (a = a.replace(/[\n\r\t\s]+/g, " ").replace(/<!--.*?-->/g, "")), 
            a && (a = s[1] + b(a) + s[2] + "\n"), a;
        }
        function f(b) {
            var c = m;
            if (j ? b = j(b, d) : g && (b = b.replace(/\n/g, function() {
                return m++, "$line=" + m + ";";
            })), 0 === b.indexOf("=")) {
                var e = l && !/^=[=#]/.test(b);
                if (b = b.replace(/^=[=#]?|[\s;]*$/g, ""), e) {
                    var f = b.replace(/\s*\([^\)]+\)/, "");
                    n[f] || /^(include|print)$/.test(f) || (b = "$escape(" + b + ")");
                } else b = "$string(" + b + ")";
                b = s[1] + b + s[2];
            }
            return g && (b = "$line=" + c + ";" + b), r(a(b), function(a) {
                if (a && !p[a]) {
                    var b;
                    b = "print" === a ? u : "include" === a ? v : n[a] ? "$utils." + a : o[a] ? "$helpers." + a : "$data." + a, 
                    w += a + "=" + b + ",", p[a] = !0;
                }
            }), b + "\n";
        }
        var g = d.debug, h = d.openTag, i = d.closeTag, j = d.parser, k = d.compress, l = d.escape, m = 1, p = {
            $data: 1,
            $filename: 1,
            $utils: 1,
            $helpers: 1,
            $out: 1,
            $line: 1
        }, q = "".trim, s = q ? [ "$out='';", "$out+=", ";", "$out" ] : [ "$out=[];", "$out.push(", ");", "$out.join('')" ], t = q ? "$out+=text;return $out;" : "$out.push(text);", u = "function(){var text=''.concat.apply('',arguments);" + t + "}", v = "function(filename,data){data=data||$data;var text=$utils.$include(filename,data,$filename);" + t + "}", w = "'use strict';var $utils=this,$helpers=$utils.$helpers," + (g ? "$line=0," : ""), x = s[0], y = "return new String(" + s[3] + ");";
        r(c.split(h), function(a) {
            a = a.split(i);
            var b = a[0], c = a[1];
            1 === a.length ? x += e(b) : (x += f(b), c && (x += e(c)));
        });
        var z = w + x + y;
        g && (z = "try{" + z + "}catch(e){throw {filename:$filename,name:'Render Error',message:e.message,line:$line,source:" + b(c) + ".split(/\\n/)[$line-1].replace(/^[\\s\\t]+/,'')};}");
        try {
            var A = new Function("$data", "$filename", z);
            return A.prototype = n, A;
        } catch (B) {
            throw B.temp = "function anonymous($data,$filename) {" + z + "}", B;
        }
    }
    var d = function(a, b) {
        return "string" == typeof b ? q(b, {
            filename: a
        }) : g(a, b);
    };
    d.version = "3.0.0", d.config = function(a, b) {
        e[a] = b;
    };
    var e = d.defaults = {
        openTag: "<%",
        closeTag: "%>",
        escape: !0,
        cache: !0,
        compress: !1,
        parser: null
    }, f = d.cache = {};
    d.render = function(a, b) {
        return q(a, b);
    };
    var g = d.renderFile = function(a, b) {
        var c = d.get(a) || p({
            filename: a,
            name: "Render Error",
            message: "Template not found"
        });
        return b ? c(b) : c;
    };
    d.get = function(a) {
        var b;
        if (f[a]) b = f[a]; else if ("object" == typeof document) {
            var c = document.getElementById(a);
            if (c) {
                var d = (c.value || c.innerHTML).replace(/^\s*|\s*$/g, "");
                b = q(d, {
                    filename: a
                });
            }
        }
        return b;
    };
    var h = function(a, b) {
        return "string" != typeof a && (b = typeof a, "number" === b ? a += "" : a = "function" === b ? h(a.call(a)) : ""), 
        a;
    }, i = {
        "<": "&#60;",
        ">": "&#62;",
        '"': "&#34;",
        "'": "&#39;",
        "&": "&#38;"
    }, j = function(a) {
        return i[a];
    }, k = function(a) {
        return h(a).replace(/&(?![\w#]+;)|[<>"']/g, j);
    }, l = Array.isArray || function(a) {
        return "[object Array]" === {}.toString.call(a);
    }, m = function(a, b) {
        var c, d;
        if (l(a)) for (c = 0, d = a.length; d > c; c++) b.call(a, a[c], c, a); else for (c in a) b.call(a, a[c], c);
    }, n = d.utils = {
        $helpers: {},
        $include: g,
        $string: h,
        $escape: k,
        $each: m
    };
    d.helper = function(a, b) {
        o[a] = b;
    };
    var o = d.helpers = n.$helpers;
    d.onerror = function(a) {
        var b = "Template Error\n\n";
        for (var c in a) b += "<" + c + ">\n" + a[c] + "\n\n";
        "object" == typeof console && console.error(b);
    };
    var p = function(a) {
        return d.onerror(a), function() {
            return "{Template Error}";
        };
    }, q = d.compile = function(a, b) {
        function d(c) {
            try {
                return new i(c, h) + "";
            } catch (d) {
                return b.debug ? p(d)() : (b.debug = !0, q(a, b)(c));
            }
        }
        b = b || {};
        for (var g in e) void 0 === b[g] && (b[g] = e[g]);
        var h = b.filename;
        try {
            var i = c(a, b);
        } catch (j) {
            return j.filename = h || "anonymous", j.name = "Syntax Error", p(j);
        }
        return d.prototype = i.prototype, d.toString = function() {
            return i.toString();
        }, h && b.cache && (f[h] = d), d;
    }, r = n.$each, s = "break,case,catch,continue,debugger,default,delete,do,else,false,finally,for,function,if,in,instanceof,new,null,return,switch,this,throw,true,try,typeof,var,void,while,with,abstract,boolean,byte,char,class,const,double,enum,export,extends,final,float,goto,implements,import,int,interface,long,native,package,private,protected,public,short,static,super,synchronized,throws,transient,volatile,arguments,let,yield,undefined", t = /\/\*[\w\W]*?\*\/|\/\/[^\n]*\n|\/\/[^\n]*$|"(?:[^"\\]|\\[\w\W])*"|'(?:[^'\\]|\\[\w\W])*'|[\s\t\n]*\.[\s\t\n]*[$\w\.]+/g, u = /[^\w$]+/g, v = new RegExp([ "\\b" + s.replace(/,/g, "\\b|\\b") + "\\b" ].join("|"), "g"), w = /^\d[^,]*|,\d[^,]*/g, x = /^,+|,+$/g;
    "function" == typeof define ? define("component/template/template", [], function() {
        return d;
    }) : "undefined" != typeof exports ? module.exports = d : this.template = d;
}();
(function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof require == "function" && require;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f;
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e);
            }, l, l.exports, e, t, n, r);
        }
        return n[o].exports;
    }
    var i = typeof require == "function" && require;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s;
})({
    1: [ function(require, module, exports) {
        /**
 * 默认配置
 *
 * @author 老雷<leizongmin@gmail.com>
 */
        var FilterCSS = require("cssfilter").FilterCSS;
        var _ = require("./util");
        // 默认白名单
        var whiteList = {
            a: [ "target", "href", "title" ],
            abbr: [ "title" ],
            address: [],
            area: [ "shape", "coords", "href", "alt" ],
            article: [],
            aside: [],
            audio: [ "autoplay", "controls", "loop", "preload", "src" ],
            b: [],
            bdi: [ "dir" ],
            bdo: [ "dir" ],
            big: [],
            blockquote: [ "cite" ],
            br: [],
            caption: [],
            center: [],
            cite: [],
            code: [],
            col: [ "align", "valign", "span", "width" ],
            colgroup: [ "align", "valign", "span", "width" ],
            dd: [],
            del: [ "datetime" ],
            details: [ "open" ],
            div: [],
            dl: [],
            dt: [],
            em: [],
            font: [ "color", "size", "face" ],
            footer: [],
            h1: [],
            h2: [],
            h3: [],
            h4: [],
            h5: [],
            h6: [],
            header: [],
            hr: [],
            i: [],
            img: [ "src", "alt", "title", "width", "height" ],
            ins: [ "datetime" ],
            li: [],
            mark: [],
            nav: [],
            ol: [],
            p: [],
            pre: [],
            s: [],
            section: [],
            small: [],
            span: [],
            sub: [],
            sup: [],
            strong: [],
            table: [ "width", "border", "align", "valign" ],
            tbody: [ "align", "valign" ],
            td: [ "width", "colspan", "align", "valign" ],
            tfoot: [ "align", "valign" ],
            th: [ "width", "colspan", "align", "valign" ],
            thead: [ "align", "valign" ],
            tr: [ "rowspan", "align", "valign" ],
            tt: [],
            u: [],
            ul: [],
            video: [ "autoplay", "controls", "loop", "preload", "src", "height", "width" ]
        };
        // 默认CSS Filter
        var defaultCSSFilter = new FilterCSS();
        /**
 * 匹配到标签时的处理方法
 *
 * @param {String} tag
 * @param {String} html
 * @param {Object} options
 * @return {String}
 */
        function onTag(tag, html, options) {}
        /**
 * 匹配到不在白名单上的标签时的处理方法
 *
 * @param {String} tag
 * @param {String} html
 * @param {Object} options
 * @return {String}
 */
        function onIgnoreTag(tag, html, options) {}
        /**
 * 匹配到标签属性时的处理方法
 *
 * @param {String} tag
 * @param {String} name
 * @param {String} value
 * @return {String}
 */
        function onTagAttr(tag, name, value) {}
        /**
 * 匹配到不在白名单上的标签属性时的处理方法
 *
 * @param {String} tag
 * @param {String} name
 * @param {String} value
 * @return {String}
 */
        function onIgnoreTagAttr(tag, name, value) {}
        /**
 * HTML转义
 *
 * @param {String} html
 */
        function escapeHtml(html) {
            return html.replace(REGEXP_LT, "&lt;").replace(REGEXP_GT, "&gt;");
        }
        /**
 * 安全的标签属性值
 *
 * @param {String} tag
 * @param {String} name
 * @param {String} value
 * @param {Object} cssFilter
 * @return {String}
 */
        function safeAttrValue(tag, name, value, cssFilter) {
            cssFilter = cssFilter || defaultCSSFilter;
            // 转换为友好的属性值，再做判断
            value = friendlyAttrValue(value);
            if (name === "href" || name === "src") {
                // 过滤 href 和 src 属性
                // 仅允许 http:// | https:// | mailto: | / 开头的地址
                value = _.trim(value);
                if (value === "#") return "#";
                if (!(value.substr(0, 7) === "http://" || value.substr(0, 8) === "https://" || value.substr(0, 7) === "mailto:" || !isNaN(value) || value[0] === "/")) {
                    return "";
                }
            } else if (name === "background") {
                // 过滤 background 属性 （这个xss漏洞较老了，可能已经不适用）
                // javascript:
                REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;
                if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {
                    return "";
                }
            } else if (name === "style") {
                // /*注释*/
                /*REGEXP_DEFAULT_ON_TAG_ATTR_3.lastIndex = 0;
    if (REGEXP_DEFAULT_ON_TAG_ATTR_3.test(value)) {
      return '';
    }*/
                // expression()
                REGEXP_DEFAULT_ON_TAG_ATTR_7.lastIndex = 0;
                if (REGEXP_DEFAULT_ON_TAG_ATTR_7.test(value)) {
                    return "";
                }
                // url()
                REGEXP_DEFAULT_ON_TAG_ATTR_8.lastIndex = 0;
                if (REGEXP_DEFAULT_ON_TAG_ATTR_8.test(value)) {
                    REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;
                    if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {
                        return "";
                    }
                }
                value = cssFilter.process(value);
            }
            // 输出时需要转义<>"
            value = escapeAttrValue(value);
            return value;
        }
        // 正则表达式
        var REGEXP_LT = /</g;
        var REGEXP_GT = />/g;
        var REGEXP_QUOTE = /"/g;
        var REGEXP_QUOTE_2 = /&quot;/g;
        var REGEXP_ATTR_VALUE_1 = /&#([a-zA-Z0-9]*);?/gim;
        var REGEXP_ATTR_VALUE_COLON = /&colon;?/gim;
        var REGEXP_ATTR_VALUE_NEWLINE = /&newline;?/gim;
        var REGEXP_DEFAULT_ON_TAG_ATTR_3 = /\/\*|\*\//gm;
        var REGEXP_DEFAULT_ON_TAG_ATTR_4 = /((j\s*a\s*v\s*a|v\s*b|l\s*i\s*v\s*e)\s*s\s*c\s*r\s*i\s*p\s*t\s*|m\s*o\s*c\s*h\s*a)\:/gi;
        var REGEXP_DEFAULT_ON_TAG_ATTR_5 = /^[\s"'`]*(d\s*a\s*t\s*a\s*)\:/gi;
        var REGEXP_DEFAULT_ON_TAG_ATTR_6 = /^[\s"'`]*(d\s*a\s*t\s*a\s*)\:\s*image\//gi;
        var REGEXP_DEFAULT_ON_TAG_ATTR_7 = /e\s*x\s*p\s*r\s*e\s*s\s*s\s*i\s*o\s*n\s*\(.*/gi;
        var REGEXP_DEFAULT_ON_TAG_ATTR_8 = /u\s*r\s*l\s*\(.*/gi;
        /**
 * 对双引号进行转义
 *
 * @param {String} str
 * @return {String} str
 */
        function escapeQuote(str) {
            return str.replace(REGEXP_QUOTE, "&quot;");
        }
        /**
 * 对双引号进行转义
 *
 * @param {String} str
 * @return {String} str
 */
        function unescapeQuote(str) {
            return str.replace(REGEXP_QUOTE_2, '"');
        }
        /**
 * 对html实体编码进行转义
 *
 * @param {String} str
 * @return {String}
 */
        function escapeHtmlEntities(str) {
            return str.replace(REGEXP_ATTR_VALUE_1, function replaceUnicode(str, code) {
                return code[0] === "x" || code[0] === "X" ? String.fromCharCode(parseInt(code.substr(1), 16)) : String.fromCharCode(parseInt(code, 10));
            });
        }
        /**
 * 对html5新增的危险实体编码进行转义
 *
 * @param {String} str
 * @return {String}
 */
        function escapeDangerHtml5Entities(str) {
            return str.replace(REGEXP_ATTR_VALUE_COLON, ":").replace(REGEXP_ATTR_VALUE_NEWLINE, " ");
        }
        /**
 * 清除不可见字符
 *
 * @param {String} str
 * @return {String}
 */
        function clearNonPrintableCharacter(str) {
            var str2 = "";
            for (var i = 0, len = str.length; i < len; i++) {
                str2 += str.charCodeAt(i) < 32 ? " " : str.charAt(i);
            }
            return _.trim(str2);
        }
        /**
 * 将标签的属性值转换成一般字符，便于分析
 *
 * @param {String} str
 * @return {String}
 */
        function friendlyAttrValue(str) {
            str = unescapeQuote(str);
            // 双引号
            str = escapeHtmlEntities(str);
            // 转换HTML实体编码
            str = escapeDangerHtml5Entities(str);
            // 转换危险的HTML5新增实体编码
            str = clearNonPrintableCharacter(str);
            // 清除不可见字符
            return str;
        }
        /**
 * 转义用于输出的标签属性值
 *
 * @param {String} str
 * @return {String}
 */
        function escapeAttrValue(str) {
            str = escapeQuote(str);
            str = escapeHtml(str);
            return str;
        }
        /**
 * 去掉不在白名单中的标签onIgnoreTag处理方法
 */
        function onIgnoreTagStripAll() {
            return "";
        }
        /**
 * 删除标签体
 *
 * @param {array} tags 要删除的标签列表
 * @param {function} next 对不在列表中的标签的处理函数，可选
 */
        function StripTagBody(tags, next) {
            if (typeof next !== "function") {
                next = function() {};
            }
            var isRemoveAllTag = !Array.isArray(tags);
            function isRemoveTag(tag) {
                if (isRemoveAllTag) return true;
                return _.indexOf(tags, tag) !== -1;
            }
            var removeList = [];
            // 要删除的位置范围列表
            var posStart = false;
            // 当前标签开始位置
            return {
                onIgnoreTag: function(tag, html, options) {
                    if (isRemoveTag(tag)) {
                        if (options.isClosing) {
                            var ret = "[/removed]";
                            var end = options.position + ret.length;
                            removeList.push([ posStart !== false ? posStart : options.position, end ]);
                            posStart = false;
                            return ret;
                        } else {
                            if (!posStart) {
                                posStart = options.position;
                            }
                            return "[removed]";
                        }
                    } else {
                        return next(tag, html, options);
                    }
                },
                remove: function(html) {
                    var rethtml = "";
                    var lastPos = 0;
                    _.forEach(removeList, function(pos) {
                        rethtml += html.slice(lastPos, pos[0]);
                        lastPos = pos[1];
                    });
                    rethtml += html.slice(lastPos);
                    return rethtml;
                }
            };
        }
        /**
 * 去除备注标签
 *
 * @param {String} html
 * @return {String}
 */
        function stripCommentTag(html) {
            return html.replace(STRIP_COMMENT_TAG_REGEXP, "");
        }
        var STRIP_COMMENT_TAG_REGEXP = /<!--[\s\S]*?-->/g;
        /**
 * 去除不可见字符
 *
 * @param {String} html
 * @return {String}
 */
        function stripBlankChar(html) {
            var chars = html.split("");
            chars = chars.filter(function(char) {
                var c = char.charCodeAt(0);
                if (c === 127) return false;
                if (c <= 31) {
                    if (c === 10 || c === 13) return true;
                    return false;
                }
                return true;
            });
            return chars.join("");
        }
        exports.whiteList = whiteList;
        exports.onTag = onTag;
        exports.onIgnoreTag = onIgnoreTag;
        exports.onTagAttr = onTagAttr;
        exports.onIgnoreTagAttr = onIgnoreTagAttr;
        exports.safeAttrValue = safeAttrValue;
        exports.escapeHtml = escapeHtml;
        exports.escapeQuote = escapeQuote;
        exports.unescapeQuote = unescapeQuote;
        exports.escapeHtmlEntities = escapeHtmlEntities;
        exports.escapeDangerHtml5Entities = escapeDangerHtml5Entities;
        exports.clearNonPrintableCharacter = clearNonPrintableCharacter;
        exports.friendlyAttrValue = friendlyAttrValue;
        exports.escapeAttrValue = escapeAttrValue;
        exports.onIgnoreTagStripAll = onIgnoreTagStripAll;
        exports.StripTagBody = StripTagBody;
        exports.stripCommentTag = stripCommentTag;
        exports.stripBlankChar = stripBlankChar;
        exports.cssFilter = defaultCSSFilter;
    }, {
        "./util": 4,
        cssfilter: 8
    } ],
    2: [ function(require, module, exports) {
        /**
 * 模块入口
 *
 * @author 老雷<leizongmin@gmail.com>
 */
        var DEFAULT = require("./default");
        var parser = require("./parser");
        var FilterXSS = require("./xss");
        /**
 * XSS过滤
 *
 * @param {String} html 要过滤的HTML代码
 * @param {Object} options 选项：whiteList, onTag, onTagAttr, onIgnoreTag, onIgnoreTagAttr, safeAttrValue, escapeHtml
 * @return {String}
 */
        function filterXSS(html, options) {
            var xss = new FilterXSS(options);
            return xss.process(html);
        }
        // 输出
        exports = module.exports = filterXSS;
        exports.FilterXSS = FilterXSS;
        for (var i in DEFAULT) exports[i] = DEFAULT[i];
        for (var i in parser) exports[i] = parser[i];
        // 在AMD下使用
        if (typeof define === "function" && (define.amd || define.cmd)) {
            define("component/xss/dist/xss", [], function() {
                return module.exports;
            });
        }
        // 在浏览器端使用
        if (typeof window !== "undefined") {
            window.filterXSS = module.exports;
        }
    }, {
        "./default": 1,
        "./parser": 3,
        "./xss": 5
    } ],
    3: [ function(require, module, exports) {
        /**
 * 简单 HTML Parser
 *
 * @author 老雷<leizongmin@gmail.com>
 */
        var _ = require("./util");
        /**
 * 获取标签的名称
 *
 * @param {String} html 如：'<a hef="#">'
 * @return {String}
 */
        function getTagName(html) {
            var i = html.indexOf(" ");
            if (i === -1) {
                var tagName = html.slice(1, -1);
            } else {
                var tagName = html.slice(1, i + 1);
            }
            tagName = _.trim(tagName).toLowerCase();
            if (tagName.slice(0, 1) === "/") tagName = tagName.slice(1);
            if (tagName.slice(-1) === "/") tagName = tagName.slice(0, -1);
            return tagName;
        }
        /**
 * 是否为闭合标签
 *
 * @param {String} html 如：'<a hef="#">'
 * @return {Boolean}
 */
        function isClosing(html) {
            return html.slice(0, 2) === "</";
        }
        /**
 * 分析HTML代码，调用相应的函数处理，返回处理后的HTML
 *
 * @param {String} html
 * @param {Function} onTag 处理标签的函数
 *   参数格式： function (sourcePosition, position, tag, html, isClosing)
 * @param {Function} escapeHtml 对HTML进行转义的函数
 * @return {String}
 */
        function parseTag(html, onTag, escapeHtml) {
            "user strict";
            var rethtml = "";
            // 待返回的HTML
            var lastPos = 0;
            // 上一个标签结束位置
            var tagStart = false;
            // 当前标签开始位置
            var quoteStart = false;
            // 引号开始位置
            var currentPos = 0;
            // 当前位置
            var len = html.length;
            // HTML长度
            var currentHtml = "";
            // 当前标签的HTML代码
            var currentTagName = "";
            // 当前标签的名称
            // 逐个分析字符
            for (currentPos = 0; currentPos < len; currentPos++) {
                var c = html.charAt(currentPos);
                if (tagStart === false) {
                    if (c === "<") {
                        tagStart = currentPos;
                        continue;
                    }
                } else {
                    if (quoteStart === false) {
                        if (c === "<") {
                            rethtml += escapeHtml(html.slice(lastPos, currentPos));
                            tagStart = currentPos;
                            lastPos = currentPos;
                            continue;
                        }
                        if (c === ">") {
                            rethtml += escapeHtml(html.slice(lastPos, tagStart));
                            currentHtml = html.slice(tagStart, currentPos + 1);
                            currentTagName = getTagName(currentHtml);
                            rethtml += onTag(tagStart, rethtml.length, currentTagName, currentHtml, isClosing(currentHtml));
                            lastPos = currentPos + 1;
                            tagStart = false;
                            continue;
                        }
                        // HTML标签内的引号仅当前一个字符是等于号时才有效
                        if ((c === '"' || c === "'") && html.charAt(currentPos - 1) === "=") {
                            quoteStart = c;
                            continue;
                        }
                    } else {
                        if (c === quoteStart) {
                            quoteStart = false;
                            continue;
                        }
                    }
                }
            }
            if (lastPos < html.length) {
                rethtml += escapeHtml(html.substr(lastPos));
            }
            return rethtml;
        }
        // 不符合属性名称规则的正则表达式
        var REGEXP_ATTR_NAME = /[^a-zA-Z0-9_:\.\-]/gim;
        /**
 * 分析标签HTML代码，调用相应的函数处理，返回HTML
 *
 * @param {String} html 如标签'<a href="#" target="_blank">' 则为 'href="#" target="_blank"'
 * @param {Function} onAttr 处理属性值的函数
 *   函数格式： function (name, value)
 * @return {String}
 */
        function parseAttr(html, onAttr) {
            "user strict";
            var lastPos = 0;
            // 当前位置
            var retAttrs = [];
            // 待返回的属性列表
            var tmpName = false;
            // 临时属性名称
            var len = html.length;
            // HTML代码长度
            function addAttr(name, value) {
                name = _.trim(name);
                name = name.replace(REGEXP_ATTR_NAME, "").toLowerCase();
                if (name.length < 1) return;
                var ret = onAttr(name, value || "");
                if (ret) retAttrs.push(ret);
            }
            // 逐个分析字符
            for (var i = 0; i < len; i++) {
                var c = html.charAt(i);
                var v, j;
                if (tmpName === false && c === "=") {
                    tmpName = html.slice(lastPos, i);
                    lastPos = i + 1;
                    continue;
                }
                if (tmpName !== false) {
                    // HTML标签内的引号仅当前一个字符是等于号时才有效
                    if (i === lastPos && (c === '"' || c === "'") && html.charAt(i - 1) === "=") {
                        j = html.indexOf(c, i + 1);
                        if (j === -1) {
                            break;
                        } else {
                            v = _.trim(html.slice(lastPos + 1, j));
                            addAttr(tmpName, v);
                            tmpName = false;
                            i = j;
                            lastPos = i + 1;
                            continue;
                        }
                    }
                }
                if (c === " ") {
                    if (tmpName === false) {
                        j = findNextEqual(html, i);
                        if (j === -1) {
                            v = _.trim(html.slice(lastPos, i));
                            addAttr(v);
                            tmpName = false;
                            lastPos = i + 1;
                            continue;
                        } else {
                            i = j - 1;
                            continue;
                        }
                    } else {
                        j = findBeforeEqual(html, i - 1);
                        if (j === -1) {
                            v = _.trim(html.slice(lastPos, i));
                            v = stripQuoteWrap(v);
                            addAttr(tmpName, v);
                            tmpName = false;
                            lastPos = i + 1;
                            continue;
                        } else {
                            continue;
                        }
                    }
                }
            }
            if (lastPos < html.length) {
                if (tmpName === false) {
                    addAttr(html.slice(lastPos));
                } else {
                    addAttr(tmpName, stripQuoteWrap(_.trim(html.slice(lastPos))));
                }
            }
            return _.trim(retAttrs.join(" "));
        }
        function findNextEqual(str, i) {
            for (;i < str.length; i++) {
                var c = str[i];
                if (c === " ") continue;
                if (c === "=") return i;
                return -1;
            }
        }
        function findBeforeEqual(str, i) {
            for (;i > 0; i--) {
                var c = str[i];
                if (c === " ") continue;
                if (c === "=") return i;
                return -1;
            }
        }
        function isQuoteWrapString(text) {
            if (text[0] === '"' && text[text.length - 1] === '"' || text[0] === "'" && text[text.length - 1] === "'") {
                return true;
            } else {
                return false;
            }
        }
        function stripQuoteWrap(text) {
            if (isQuoteWrapString(text)) {
                return text.substr(1, text.length - 2);
            } else {
                return text;
            }
        }
        exports.parseTag = parseTag;
        exports.parseAttr = parseAttr;
    }, {
        "./util": 4
    } ],
    4: [ function(require, module, exports) {
        module.exports = {
            indexOf: function(arr, item) {
                var i, j;
                if (Array.prototype.indexOf) {
                    return arr.indexOf(item);
                }
                for (i = 0, j = arr.length; i < j; i++) {
                    if (arr[i] === item) {
                        return i;
                    }
                }
                return -1;
            },
            forEach: function(arr, fn, scope) {
                var i, j;
                if (Array.prototype.forEach) {
                    return arr.forEach(fn, scope);
                }
                for (i = 0, j = arr.length; i < j; i++) {
                    fn.call(scope, arr[i], i, arr);
                }
            },
            trim: function(str) {
                if (String.prototype.trim) {
                    return str.trim();
                }
                return str.replace(/(^\s*)|(\s*$)/g, "");
            }
        };
    }, {} ],
    5: [ function(require, module, exports) {
        /**
 * 过滤XSS
 *
 * @author 老雷<leizongmin@gmail.com>
 */
        var FilterCSS = require("cssfilter").FilterCSS;
        var DEFAULT = require("./default");
        var parser = require("./parser");
        var parseTag = parser.parseTag;
        var parseAttr = parser.parseAttr;
        var _ = require("./util");
        /**
 * 返回值是否为空
 *
 * @param {Object} obj
 * @return {Boolean}
 */
        function isNull(obj) {
            return obj === undefined || obj === null;
        }
        /**
 * 取标签内的属性列表字符串
 *
 * @param {String} html
 * @return {Object}
 *   - {String} html
 *   - {Boolean} closing
 */
        function getAttrs(html) {
            var i = html.indexOf(" ");
            if (i === -1) {
                return {
                    html: "",
                    closing: html[html.length - 2] === "/"
                };
            }
            html = _.trim(html.slice(i + 1, -1));
            var isClosing = html[html.length - 1] === "/";
            if (isClosing) html = _.trim(html.slice(0, -1));
            return {
                html: html,
                closing: isClosing
            };
        }
        /**
 * XSS过滤对象
 *
 * @param {Object} options
 *   选项：whiteList, onTag, onTagAttr, onIgnoreTag,
 *        onIgnoreTagAttr, safeAttrValue, escapeHtml
 *        stripIgnoreTagBody, allowCommentTag, stripBlankChar
 *        css{whiteList, onAttr, onIgnoreAttr}
 */
        function FilterXSS(options) {
            options = options || {};
            if (options.stripIgnoreTag) {
                if (options.onIgnoreTag) {
                    console.error('Notes: cannot use these two options "stripIgnoreTag" and "onIgnoreTag" at the same time');
                }
                options.onIgnoreTag = DEFAULT.onIgnoreTagStripAll;
            }
            options.whiteList = options.whiteList || DEFAULT.whiteList;
            options.onTag = options.onTag || DEFAULT.onTag;
            options.onTagAttr = options.onTagAttr || DEFAULT.onTagAttr;
            options.onIgnoreTag = options.onIgnoreTag || DEFAULT.onIgnoreTag;
            options.onIgnoreTagAttr = options.onIgnoreTagAttr || DEFAULT.onIgnoreTagAttr;
            options.safeAttrValue = options.safeAttrValue || DEFAULT.safeAttrValue;
            options.escapeHtml = options.escapeHtml || DEFAULT.escapeHtml;
            options.css = options.css || {};
            this.options = options;
            this.cssFilter = new FilterCSS(options.css);
        }
        /**
 * 开始处理
 *
 * @param {String} html
 * @return {String}
 */
        FilterXSS.prototype.process = function(html) {
            // 兼容各种奇葩输入
            html = html || "";
            html = html.toString();
            if (!html) return "";
            var me = this;
            var options = me.options;
            var whiteList = options.whiteList;
            var onTag = options.onTag;
            var onIgnoreTag = options.onIgnoreTag;
            var onTagAttr = options.onTagAttr;
            var onIgnoreTagAttr = options.onIgnoreTagAttr;
            var safeAttrValue = options.safeAttrValue;
            var escapeHtml = options.escapeHtml;
            var cssFilter = me.cssFilter;
            // 是否清除不可见字符
            if (options.stripBlankChar) {
                html = DEFAULT.stripBlankChar(html);
            }
            // 是否禁止备注标签
            if (!options.allowCommentTag) {
                html = DEFAULT.stripCommentTag(html);
            }
            // 如果开启了stripIgnoreTagBody
            if (options.stripIgnoreTagBody) {
                var stripIgnoreTagBody = DEFAULT.StripTagBody(options.stripIgnoreTagBody, onIgnoreTag);
                onIgnoreTag = stripIgnoreTagBody.onIgnoreTag;
            } else {
                stripIgnoreTagBody = false;
            }
            var retHtml = parseTag(html, function(sourcePosition, position, tag, html, isClosing) {
                var info = {
                    sourcePosition: sourcePosition,
                    position: position,
                    isClosing: isClosing,
                    isWhite: tag in whiteList
                };
                // 调用onTag处理
                var ret = onTag(tag, html, info);
                if (!isNull(ret)) return ret;
                // 默认标签处理方法
                if (info.isWhite) {
                    // 白名单标签，解析标签属性
                    // 如果是闭合标签，则不需要解析属性
                    if (info.isClosing) {
                        return "</" + tag + ">";
                    }
                    var attrs = getAttrs(html);
                    var whiteAttrList = whiteList[tag];
                    var attrsHtml = parseAttr(attrs.html, function(name, value) {
                        // 调用onTagAttr处理
                        var isWhiteAttr = _.indexOf(whiteAttrList, name) !== -1;
                        var ret = onTagAttr(tag, name, value, isWhiteAttr);
                        if (!isNull(ret)) return ret;
                        // 默认的属性处理方法
                        if (isWhiteAttr) {
                            // 白名单属性，调用safeAttrValue过滤属性值
                            value = safeAttrValue(tag, name, value, cssFilter);
                            if (value) {
                                return name + '="' + value + '"';
                            } else {
                                return name;
                            }
                        } else {
                            // 非白名单属性，调用onIgnoreTagAttr处理
                            var ret = onIgnoreTagAttr(tag, name, value, isWhiteAttr);
                            if (!isNull(ret)) return ret;
                            return;
                        }
                    });
                    // 构造新的标签代码
                    var html = "<" + tag;
                    if (attrsHtml) html += " " + attrsHtml;
                    if (attrs.closing) html += " /";
                    html += ">";
                    return html;
                } else {
                    // 非白名单标签，调用onIgnoreTag处理
                    var ret = onIgnoreTag(tag, html, info);
                    if (!isNull(ret)) return ret;
                    return escapeHtml(html);
                }
            }, escapeHtml);
            // 如果开启了stripIgnoreTagBody，需要对结果再进行处理
            if (stripIgnoreTagBody) {
                retHtml = stripIgnoreTagBody.remove(retHtml);
            }
            return retHtml;
        };
        module.exports = FilterXSS;
    }, {
        "./default": 1,
        "./parser": 3,
        "./util": 4,
        cssfilter: 8
    } ],
    6: [ function(require, module, exports) {
        /**
 * cssfilter
 *
 * @author 老雷<leizongmin@gmail.com>
 */
        var DEFAULT = require("./default");
        var parseStyle = require("./parser");
        var _ = require("./util");
        /**
 * 返回值是否为空
 *
 * @param {Object} obj
 * @return {Boolean}
 */
        function isNull(obj) {
            return obj === undefined || obj === null;
        }
        /**
 * 创建CSS过滤器
 *
 * @param {Object} options
 *   - {Object} whiteList
 *   - {Object} onAttr
 *   - {Object} onIgnoreAttr
 */
        function FilterCSS(options) {
            options = options || {};
            options.whiteList = options.whiteList || DEFAULT.whiteList;
            options.onAttr = options.onAttr || DEFAULT.onAttr;
            options.onIgnoreAttr = options.onIgnoreAttr || DEFAULT.onIgnoreAttr;
            this.options = options;
        }
        FilterCSS.prototype.process = function(css) {
            // 兼容各种奇葩输入
            css = css || "";
            css = css.toString();
            if (!css) return "";
            var me = this;
            var options = me.options;
            var whiteList = options.whiteList;
            var onAttr = options.onAttr;
            var onIgnoreAttr = options.onIgnoreAttr;
            var retCSS = parseStyle(css, function(sourcePosition, position, name, value, source) {
                var check = whiteList[name];
                var isWhite = false;
                if (check === true) isWhite = check; else if (typeof check === "function") isWhite = check(value); else if (check instanceof RegExp) isWhite = check.test(value);
                if (isWhite !== true) isWhite = false;
                var opts = {
                    position: position,
                    sourcePosition: sourcePosition,
                    source: source,
                    isWhite: isWhite
                };
                if (isWhite) {
                    var ret = onAttr(name, value, opts);
                    if (isNull(ret)) {
                        return name + ":" + value;
                    } else {
                        return ret;
                    }
                } else {
                    var ret = onIgnoreAttr(name, value, opts);
                    if (!isNull(ret)) {
                        return ret;
                    }
                }
            });
            return retCSS;
        };
        module.exports = FilterCSS;
    }, {
        "./default": 7,
        "./parser": 9,
        "./util": 10
    } ],
    7: [ function(require, module, exports) {
        /**
 * cssfilter
 *
 * @author 老雷<leizongmin@gmail.com>
 */
        // 白名单值说明：
        // true: 允许该属性
        // Function: function (val) { } 返回true表示允许该属性，其他值均表示不允许
        // RegExp: regexp.test(val) 返回true表示允许该属性，其他值均表示不允许
        // 除上面列出的值外均表示不允许
        var whiteList = {};
        whiteList["align-content"] = false;
        // default: auto
        whiteList["align-items"] = false;
        // default: auto
        whiteList["align-self"] = false;
        // default: auto
        whiteList["alignment-adjust"] = false;
        // default: auto
        whiteList["alignment-baseline"] = false;
        // default: baseline
        whiteList["all"] = false;
        // default: depending on individual properties
        whiteList["anchor-point"] = false;
        // default: none
        whiteList["animation"] = false;
        // default: depending on individual properties
        whiteList["animation-delay"] = false;
        // default: 0
        whiteList["animation-direction"] = false;
        // default: normal
        whiteList["animation-duration"] = false;
        // default: 0
        whiteList["animation-fill-mode"] = false;
        // default: none
        whiteList["animation-iteration-count"] = false;
        // default: 1
        whiteList["animation-name"] = false;
        // default: none
        whiteList["animation-play-state"] = false;
        // default: running
        whiteList["animation-timing-function"] = false;
        // default: ease
        whiteList["azimuth"] = false;
        // default: center
        whiteList["backface-visibility"] = false;
        // default: visible
        whiteList["background"] = true;
        // default: depending on individual properties
        whiteList["background-attachment"] = true;
        // default: scroll
        whiteList["background-clip"] = true;
        // default: border-box
        whiteList["background-color"] = true;
        // default: transparent
        whiteList["background-image"] = true;
        // default: none
        whiteList["background-origin"] = true;
        // default: padding-box
        whiteList["background-position"] = true;
        // default: 0% 0%
        whiteList["background-repeat"] = true;
        // default: repeat
        whiteList["background-size"] = true;
        // default: auto
        whiteList["baseline-shift"] = false;
        // default: baseline
        whiteList["binding"] = false;
        // default: none
        whiteList["bleed"] = false;
        // default: 6pt
        whiteList["bookmark-label"] = false;
        // default: content()
        whiteList["bookmark-level"] = false;
        // default: none
        whiteList["bookmark-state"] = false;
        // default: open
        whiteList["border"] = true;
        // default: depending on individual properties
        whiteList["border-bottom"] = true;
        // default: depending on individual properties
        whiteList["border-bottom-color"] = true;
        // default: current color
        whiteList["border-bottom-left-radius"] = true;
        // default: 0
        whiteList["border-bottom-right-radius"] = true;
        // default: 0
        whiteList["border-bottom-style"] = true;
        // default: none
        whiteList["border-bottom-width"] = true;
        // default: medium
        whiteList["border-collapse"] = true;
        // default: separate
        whiteList["border-color"] = true;
        // default: depending on individual properties
        whiteList["border-image"] = true;
        // default: none
        whiteList["border-image-outset"] = true;
        // default: 0
        whiteList["border-image-repeat"] = true;
        // default: stretch
        whiteList["border-image-slice"] = true;
        // default: 100%
        whiteList["border-image-source"] = true;
        // default: none
        whiteList["border-image-width"] = true;
        // default: 1
        whiteList["border-left"] = true;
        // default: depending on individual properties
        whiteList["border-left-color"] = true;
        // default: current color
        whiteList["border-left-style"] = true;
        // default: none
        whiteList["border-left-width"] = true;
        // default: medium
        whiteList["border-radius"] = true;
        // default: 0
        whiteList["border-right"] = true;
        // default: depending on individual properties
        whiteList["border-right-color"] = true;
        // default: current color
        whiteList["border-right-style"] = true;
        // default: none
        whiteList["border-right-width"] = true;
        // default: medium
        whiteList["border-spacing"] = true;
        // default: 0
        whiteList["border-style"] = true;
        // default: depending on individual properties
        whiteList["border-top"] = true;
        // default: depending on individual properties
        whiteList["border-top-color"] = true;
        // default: current color
        whiteList["border-top-left-radius"] = true;
        // default: 0
        whiteList["border-top-right-radius"] = true;
        // default: 0
        whiteList["border-top-style"] = true;
        // default: none
        whiteList["border-top-width"] = true;
        // default: medium
        whiteList["border-width"] = true;
        // default: depending on individual properties
        whiteList["bottom"] = false;
        // default: auto
        whiteList["box-decoration-break"] = true;
        // default: slice
        whiteList["box-shadow"] = true;
        // default: none
        whiteList["box-sizing"] = true;
        // default: content-box
        whiteList["box-snap"] = true;
        // default: none
        whiteList["box-suppress"] = true;
        // default: show
        whiteList["break-after"] = true;
        // default: auto
        whiteList["break-before"] = true;
        // default: auto
        whiteList["break-inside"] = true;
        // default: auto
        whiteList["caption-side"] = false;
        // default: top
        whiteList["chains"] = false;
        // default: none
        whiteList["clear"] = true;
        // default: none
        whiteList["clip"] = false;
        // default: auto
        whiteList["clip-path"] = false;
        // default: none
        whiteList["clip-rule"] = false;
        // default: nonzero
        whiteList["color"] = true;
        // default: implementation dependent
        whiteList["color-interpolation-filters"] = true;
        // default: auto
        whiteList["column-count"] = false;
        // default: auto
        whiteList["column-fill"] = false;
        // default: balance
        whiteList["column-gap"] = false;
        // default: normal
        whiteList["column-rule"] = false;
        // default: depending on individual properties
        whiteList["column-rule-color"] = false;
        // default: current color
        whiteList["column-rule-style"] = false;
        // default: medium
        whiteList["column-rule-width"] = false;
        // default: medium
        whiteList["column-span"] = false;
        // default: none
        whiteList["column-width"] = false;
        // default: auto
        whiteList["columns"] = false;
        // default: depending on individual properties
        whiteList["contain"] = false;
        // default: none
        whiteList["content"] = false;
        // default: normal
        whiteList["counter-increment"] = false;
        // default: none
        whiteList["counter-reset"] = false;
        // default: none
        whiteList["counter-set"] = false;
        // default: none
        whiteList["crop"] = false;
        // default: auto
        whiteList["cue"] = false;
        // default: depending on individual properties
        whiteList["cue-after"] = false;
        // default: none
        whiteList["cue-before"] = false;
        // default: none
        whiteList["cursor"] = false;
        // default: auto
        whiteList["direction"] = false;
        // default: ltr
        whiteList["display"] = true;
        // default: depending on individual properties
        whiteList["display-inside"] = true;
        // default: auto
        whiteList["display-list"] = true;
        // default: none
        whiteList["display-outside"] = true;
        // default: inline-level
        whiteList["dominant-baseline"] = false;
        // default: auto
        whiteList["elevation"] = false;
        // default: level
        whiteList["empty-cells"] = false;
        // default: show
        whiteList["filter"] = false;
        // default: none
        whiteList["flex"] = false;
        // default: depending on individual properties
        whiteList["flex-basis"] = false;
        // default: auto
        whiteList["flex-direction"] = false;
        // default: row
        whiteList["flex-flow"] = false;
        // default: depending on individual properties
        whiteList["flex-grow"] = false;
        // default: 0
        whiteList["flex-shrink"] = false;
        // default: 1
        whiteList["flex-wrap"] = false;
        // default: nowrap
        whiteList["float"] = false;
        // default: none
        whiteList["float-offset"] = false;
        // default: 0 0
        whiteList["flood-color"] = false;
        // default: black
        whiteList["flood-opacity"] = false;
        // default: 1
        whiteList["flow-from"] = false;
        // default: none
        whiteList["flow-into"] = false;
        // default: none
        whiteList["font"] = true;
        // default: depending on individual properties
        whiteList["font-family"] = true;
        // default: implementation dependent
        whiteList["font-feature-settings"] = true;
        // default: normal
        whiteList["font-kerning"] = true;
        // default: auto
        whiteList["font-language-override"] = true;
        // default: normal
        whiteList["font-size"] = true;
        // default: medium
        whiteList["font-size-adjust"] = true;
        // default: none
        whiteList["font-stretch"] = true;
        // default: normal
        whiteList["font-style"] = true;
        // default: normal
        whiteList["font-synthesis"] = true;
        // default: weight style
        whiteList["font-variant"] = true;
        // default: normal
        whiteList["font-variant-alternates"] = true;
        // default: normal
        whiteList["font-variant-caps"] = true;
        // default: normal
        whiteList["font-variant-east-asian"] = true;
        // default: normal
        whiteList["font-variant-ligatures"] = true;
        // default: normal
        whiteList["font-variant-numeric"] = true;
        // default: normal
        whiteList["font-variant-position"] = true;
        // default: normal
        whiteList["font-weight"] = true;
        // default: normal
        whiteList["grid"] = false;
        // default: depending on individual properties
        whiteList["grid-area"] = false;
        // default: depending on individual properties
        whiteList["grid-auto-columns"] = false;
        // default: auto
        whiteList["grid-auto-flow"] = false;
        // default: none
        whiteList["grid-auto-rows"] = false;
        // default: auto
        whiteList["grid-column"] = false;
        // default: depending on individual properties
        whiteList["grid-column-end"] = false;
        // default: auto
        whiteList["grid-column-start"] = false;
        // default: auto
        whiteList["grid-row"] = false;
        // default: depending on individual properties
        whiteList["grid-row-end"] = false;
        // default: auto
        whiteList["grid-row-start"] = false;
        // default: auto
        whiteList["grid-template"] = false;
        // default: depending on individual properties
        whiteList["grid-template-areas"] = false;
        // default: none
        whiteList["grid-template-columns"] = false;
        // default: none
        whiteList["grid-template-rows"] = false;
        // default: none
        whiteList["hanging-punctuation"] = false;
        // default: none
        whiteList["height"] = true;
        // default: auto
        whiteList["hyphens"] = false;
        // default: manual
        whiteList["icon"] = false;
        // default: auto
        whiteList["image-orientation"] = false;
        // default: auto
        whiteList["image-resolution"] = false;
        // default: normal
        whiteList["ime-mode"] = false;
        // default: auto
        whiteList["initial-letters"] = false;
        // default: normal
        whiteList["inline-box-align"] = false;
        // default: last
        whiteList["justify-content"] = false;
        // default: auto
        whiteList["justify-items"] = false;
        // default: auto
        whiteList["justify-self"] = false;
        // default: auto
        whiteList["left"] = false;
        // default: auto
        whiteList["letter-spacing"] = true;
        // default: normal
        whiteList["lighting-color"] = true;
        // default: white
        whiteList["line-box-contain"] = false;
        // default: block inline replaced
        whiteList["line-break"] = false;
        // default: auto
        whiteList["line-grid"] = false;
        // default: match-parent
        whiteList["line-height"] = false;
        // default: normal
        whiteList["line-snap"] = false;
        // default: none
        whiteList["line-stacking"] = false;
        // default: depending on individual properties
        whiteList["line-stacking-ruby"] = false;
        // default: exclude-ruby
        whiteList["line-stacking-shift"] = false;
        // default: consider-shifts
        whiteList["line-stacking-strategy"] = false;
        // default: inline-line-height
        whiteList["list-style"] = true;
        // default: depending on individual properties
        whiteList["list-style-image"] = true;
        // default: none
        whiteList["list-style-position"] = true;
        // default: outside
        whiteList["list-style-type"] = true;
        // default: disc
        whiteList["margin"] = true;
        // default: depending on individual properties
        whiteList["margin-bottom"] = true;
        // default: 0
        whiteList["margin-left"] = true;
        // default: 0
        whiteList["margin-right"] = true;
        // default: 0
        whiteList["margin-top"] = true;
        // default: 0
        whiteList["marker-offset"] = false;
        // default: auto
        whiteList["marker-side"] = false;
        // default: list-item
        whiteList["marks"] = false;
        // default: none
        whiteList["mask"] = false;
        // default: border-box
        whiteList["mask-box"] = false;
        // default: see individual properties
        whiteList["mask-box-outset"] = false;
        // default: 0
        whiteList["mask-box-repeat"] = false;
        // default: stretch
        whiteList["mask-box-slice"] = false;
        // default: 0 fill
        whiteList["mask-box-source"] = false;
        // default: none
        whiteList["mask-box-width"] = false;
        // default: auto
        whiteList["mask-clip"] = false;
        // default: border-box
        whiteList["mask-image"] = false;
        // default: none
        whiteList["mask-origin"] = false;
        // default: border-box
        whiteList["mask-position"] = false;
        // default: center
        whiteList["mask-repeat"] = false;
        // default: no-repeat
        whiteList["mask-size"] = false;
        // default: border-box
        whiteList["mask-source-type"] = false;
        // default: auto
        whiteList["mask-type"] = false;
        // default: luminance
        whiteList["max-height"] = true;
        // default: none
        whiteList["max-lines"] = false;
        // default: none
        whiteList["max-width"] = true;
        // default: none
        whiteList["min-height"] = true;
        // default: 0
        whiteList["min-width"] = true;
        // default: 0
        whiteList["move-to"] = false;
        // default: normal
        whiteList["nav-down"] = false;
        // default: auto
        whiteList["nav-index"] = false;
        // default: auto
        whiteList["nav-left"] = false;
        // default: auto
        whiteList["nav-right"] = false;
        // default: auto
        whiteList["nav-up"] = false;
        // default: auto
        whiteList["object-fit"] = false;
        // default: fill
        whiteList["object-position"] = false;
        // default: 50% 50%
        whiteList["opacity"] = false;
        // default: 1
        whiteList["order"] = false;
        // default: 0
        whiteList["orphans"] = false;
        // default: 2
        whiteList["outline"] = false;
        // default: depending on individual properties
        whiteList["outline-color"] = false;
        // default: invert
        whiteList["outline-offset"] = false;
        // default: 0
        whiteList["outline-style"] = false;
        // default: none
        whiteList["outline-width"] = false;
        // default: medium
        whiteList["overflow"] = false;
        // default: depending on individual properties
        whiteList["overflow-wrap"] = false;
        // default: normal
        whiteList["overflow-x"] = false;
        // default: visible
        whiteList["overflow-y"] = false;
        // default: visible
        whiteList["padding"] = true;
        // default: depending on individual properties
        whiteList["padding-bottom"] = true;
        // default: 0
        whiteList["padding-left"] = true;
        // default: 0
        whiteList["padding-right"] = true;
        // default: 0
        whiteList["padding-top"] = true;
        // default: 0
        whiteList["page"] = false;
        // default: auto
        whiteList["page-break-after"] = false;
        // default: auto
        whiteList["page-break-before"] = false;
        // default: auto
        whiteList["page-break-inside"] = false;
        // default: auto
        whiteList["page-policy"] = false;
        // default: start
        whiteList["pause"] = false;
        // default: implementation dependent
        whiteList["pause-after"] = false;
        // default: implementation dependent
        whiteList["pause-before"] = false;
        // default: implementation dependent
        whiteList["perspective"] = false;
        // default: none
        whiteList["perspective-origin"] = false;
        // default: 50% 50%
        whiteList["pitch"] = false;
        // default: medium
        whiteList["pitch-range"] = false;
        // default: 50
        whiteList["play-during"] = false;
        // default: auto
        whiteList["position"] = false;
        // default: static
        whiteList["presentation-level"] = false;
        // default: 0
        whiteList["quotes"] = false;
        // default: text
        whiteList["region-fragment"] = false;
        // default: auto
        whiteList["resize"] = false;
        // default: none
        whiteList["rest"] = false;
        // default: depending on individual properties
        whiteList["rest-after"] = false;
        // default: none
        whiteList["rest-before"] = false;
        // default: none
        whiteList["richness"] = false;
        // default: 50
        whiteList["right"] = false;
        // default: auto
        whiteList["rotation"] = false;
        // default: 0
        whiteList["rotation-point"] = false;
        // default: 50% 50%
        whiteList["ruby-align"] = false;
        // default: auto
        whiteList["ruby-merge"] = false;
        // default: separate
        whiteList["ruby-position"] = false;
        // default: before
        whiteList["shape-image-threshold"] = false;
        // default: 0.0
        whiteList["shape-outside"] = false;
        // default: none
        whiteList["shape-margin"] = false;
        // default: 0
        whiteList["size"] = false;
        // default: auto
        whiteList["speak"] = false;
        // default: auto
        whiteList["speak-as"] = false;
        // default: normal
        whiteList["speak-header"] = false;
        // default: once
        whiteList["speak-numeral"] = false;
        // default: continuous
        whiteList["speak-punctuation"] = false;
        // default: none
        whiteList["speech-rate"] = false;
        // default: medium
        whiteList["stress"] = false;
        // default: 50
        whiteList["string-set"] = false;
        // default: none
        whiteList["tab-size"] = false;
        // default: 8
        whiteList["table-layout"] = false;
        // default: auto
        whiteList["text-align"] = true;
        // default: start
        whiteList["text-align-last"] = true;
        // default: auto
        whiteList["text-combine-upright"] = true;
        // default: none
        whiteList["text-decoration"] = true;
        // default: none
        whiteList["text-decoration-color"] = true;
        // default: currentColor
        whiteList["text-decoration-line"] = true;
        // default: none
        whiteList["text-decoration-skip"] = true;
        // default: objects
        whiteList["text-decoration-style"] = true;
        // default: solid
        whiteList["text-emphasis"] = true;
        // default: depending on individual properties
        whiteList["text-emphasis-color"] = true;
        // default: currentColor
        whiteList["text-emphasis-position"] = true;
        // default: over right
        whiteList["text-emphasis-style"] = true;
        // default: none
        whiteList["text-height"] = true;
        // default: auto
        whiteList["text-indent"] = true;
        // default: 0
        whiteList["text-justify"] = true;
        // default: auto
        whiteList["text-orientation"] = true;
        // default: mixed
        whiteList["text-overflow"] = true;
        // default: clip
        whiteList["text-shadow"] = true;
        // default: none
        whiteList["text-space-collapse"] = true;
        // default: collapse
        whiteList["text-transform"] = true;
        // default: none
        whiteList["text-underline-position"] = true;
        // default: auto
        whiteList["text-wrap"] = true;
        // default: normal
        whiteList["top"] = false;
        // default: auto
        whiteList["transform"] = false;
        // default: none
        whiteList["transform-origin"] = false;
        // default: 50% 50% 0
        whiteList["transform-style"] = false;
        // default: flat
        whiteList["transition"] = false;
        // default: depending on individual properties
        whiteList["transition-delay"] = false;
        // default: 0s
        whiteList["transition-duration"] = false;
        // default: 0s
        whiteList["transition-property"] = false;
        // default: all
        whiteList["transition-timing-function"] = false;
        // default: ease
        whiteList["unicode-bidi"] = false;
        // default: normal
        whiteList["vertical-align"] = false;
        // default: baseline
        whiteList["visibility"] = false;
        // default: visible
        whiteList["voice-balance"] = false;
        // default: center
        whiteList["voice-duration"] = false;
        // default: auto
        whiteList["voice-family"] = false;
        // default: implementation dependent
        whiteList["voice-pitch"] = false;
        // default: medium
        whiteList["voice-range"] = false;
        // default: medium
        whiteList["voice-rate"] = false;
        // default: normal
        whiteList["voice-stress"] = false;
        // default: normal
        whiteList["voice-volume"] = false;
        // default: medium
        whiteList["volume"] = false;
        // default: medium
        whiteList["white-space"] = false;
        // default: normal
        whiteList["widows"] = false;
        // default: 2
        whiteList["width"] = true;
        // default: auto
        whiteList["will-change"] = false;
        // default: auto
        whiteList["word-break"] = true;
        // default: normal
        whiteList["word-spacing"] = true;
        // default: normal
        whiteList["word-wrap"] = true;
        // default: normal
        whiteList["wrap-flow"] = false;
        // default: auto
        whiteList["wrap-through"] = false;
        // default: wrap
        whiteList["writing-mode"] = false;
        // default: horizontal-tb
        whiteList["z-index"] = false;
        // default: auto
        /**
 * 匹配到白名单上的一个属性时
 *
 * @param {String} name
 * @param {String} value
 * @param {Object} options
 * @return {String}
 */
        function onAttr(name, value, options) {}
        /**
 * 匹配到不在白名单上的一个属性时
 *
 * @param {String} name
 * @param {String} value
 * @param {Object} options
 * @return {String}
 */
        function onIgnoreAttr(name, value, options) {}
        exports.whiteList = whiteList;
        exports.onAttr = onAttr;
        exports.onIgnoreAttr = onIgnoreAttr;
    }, {} ],
    8: [ function(require, module, exports) {
        /**
 * cssfilter
 *
 * @author 老雷<leizongmin@gmail.com>
 */
        var DEFAULT = require("./default");
        var FilterCSS = require("./css");
        /**
 * XSS过滤
 *
 * @param {String} css 要过滤的CSS代码
 * @param {Object} options 选项：whiteList, onAttr, onIgnoreAttr
 * @return {String}
 */
        function filterCSS(html, options) {
            var xss = new FilterCSS(options);
            return xss.process(html);
        }
        // 输出
        exports = module.exports = filterCSS;
        exports.FilterCSS = FilterCSS;
        for (var i in DEFAULT) exports[i] = DEFAULT[i];
        // 在AMD下使用
        if (typeof define === "function" && define.amd) {
            define("component/xss/dist/xss", [], function() {
                return module.exports;
            });
        }
        // 在浏览器端使用
        if (typeof window !== "undefined") {
            window.filterCSS = module.exports;
        }
    }, {
        "./css": 6,
        "./default": 7
    } ],
    9: [ function(require, module, exports) {
        /**
 * cssfilter
 *
 * @author 老雷<leizongmin@gmail.com>
 */
        var _ = require("./util");
        /**
 * 解析style
 *
 * @param {String} css
 * @param {Function} onAttr 处理属性的函数
 *   参数格式： function (sourcePosition, position, name, value, source)
 * @return {String}
 */
        function parseStyle(css, onAttr) {
            css = _.trimRight(css);
            if (css[css.length - 1] !== ";") css += ";";
            var cssLength = css.length;
            var isParenthesisOpen = false;
            var lastPos = 0;
            var i = 0;
            var retCSS = "";
            function addNewAttr() {
                // 如果没有正常的闭合圆括号，则直接忽略当前属性
                if (!isParenthesisOpen) {
                    var source = _.trim(css.slice(lastPos, i));
                    var j = source.indexOf(":");
                    if (j !== -1) {
                        var name = _.trim(source.slice(0, j));
                        var value = _.trim(source.slice(j + 1));
                        // 必须有属性名称
                        if (name) {
                            var ret = onAttr(lastPos, retCSS.length, name, value, source);
                            if (ret) retCSS += ret + "; ";
                        }
                    }
                }
                lastPos = i + 1;
            }
            for (;i < cssLength; i++) {
                var c = css[i];
                if (c === "/" && css[i + 1] === "*") {
                    // 备注开始
                    var j = css.indexOf("*/", i + 2);
                    // 如果没有正常的备注结束，则后面的部分全部跳过
                    if (j === -1) break;
                    // 直接将当前位置调到备注结尾，并且初始化状态
                    i = j + 1;
                    lastPos = i + 1;
                    isParenthesisOpen = false;
                } else if (c === "(") {
                    isParenthesisOpen = true;
                } else if (c === ")") {
                    isParenthesisOpen = false;
                } else if (c === ";") {
                    if (isParenthesisOpen) {} else {
                        addNewAttr();
                    }
                } else if (c === "\n") {
                    addNewAttr();
                }
            }
            return _.trim(retCSS);
        }
        module.exports = parseStyle;
    }, {
        "./util": 10
    } ],
    10: [ function(require, module, exports) {
        module.exports = {
            indexOf: function(arr, item) {
                var i, j;
                if (Array.prototype.indexOf) {
                    return arr.indexOf(item);
                }
                for (i = 0, j = arr.length; i < j; i++) {
                    if (arr[i] === item) {
                        return i;
                    }
                }
                return -1;
            },
            forEach: function(arr, fn, scope) {
                var i, j;
                if (Array.prototype.forEach) {
                    return arr.forEach(fn, scope);
                }
                for (i = 0, j = arr.length; i < j; i++) {
                    fn.call(scope, arr[i], i, arr);
                }
            },
            trim: function(str) {
                if (String.prototype.trim) {
                    return str.trim();
                }
                return str.replace(/(^\s*)|(\s*$)/g, "");
            },
            trimRight: function(str) {
                if (String.prototype.trimRight) {
                    return str.trimRight();
                }
                return str.replace(/(\s*$)/g, "");
            }
        };
    }, {} ]
}, {}, [ 2 ]);
define('home/auth/bind',function(require,exports,module){
    //载入提交表单插件
    require('common/extend/validator/validator');
    Class({
        //绑定认证元素
        authBindEle : $('#authBind'),
        //登录表单元素
        loginFormEle : $('#loginForm'),
        //注册表单元素
        registerFormEle : $('#registerForm'),
        //注册协议元素
        registerAgreementEle: $('#registerAgreement'),
        //绑定选项卡元素
        bindTabEle : $('#bindTab'),
        initial: function(){
            var self = this;
            //绑定选项卡切换操作
            this.bindTabEle.find('.tab-navg .navg-item').click(function(){
                var _item = self.bindTabEle.find('.tab-item').eq($(this).index());
                $(this).addClass('active').siblings().removeClass('active');
                _item.addClass('active').siblings().removeClass('active');
                _item.find('form').clearValidate();
                _item.find('input:first').focus();
                if($(this).index()){
                    self.authBindEle.removeClass('auth-bind-login').addClass('auth-bind-register');
                }else{
                    self.authBindEle.removeClass('auth-bind-register').addClass('auth-bind-login');
                }
            }).eq(0).click();
            //记录登录验证码图片元素
            this.loginVerifyImageEle = this.loginFormEle.find('.verity-code .code-image');
            //记录登录验证输入框元素
            this.loginVerifyTextEle = this.loginFormEle.find('.verity-code .code-input :text');
            //绑定提交登录表单操作
            this.loginFormEle.submitForm({
                autoValidate: false,
                onAfter: function(data){
                    if(data.status){
                        $.dialog.success(data.info);
                        self.synchroLogin(data.code, function(){
                            location.replace(data.url);
                        });
                    }else{
                        if(typeof data.info == 'string'){
                            $.dialog.error(data.info);
                        }
                        self.loginVerifyImageEle.click();
                        self.loginVerifyTextEle.val('');
                    }
                }
            });
            //记录注册验证码图片元素
            this.registerVerifyImageEle = this.registerFormEle.find('.verity-code .code-image');
            //记录注册验证输入框元素
            this.registerVerifyTextEle = this.registerFormEle.find('.verity-code .code-input :text');

            //绑定提交注册表单操作
            this.registerFormEle.submitForm({
                autoValidate: false,
                onAfter: function(data){
                    if(data.status){
                        $.dialog.success(data.info,function(){
                            if(data.url){
                                location.href = data.url;
                            }
                        });
                    }else{
                        if(typeof data.info == 'string'){
                            $.dialog.error(data.info);
                        }
                        self.registerVerifyImageEle.click();
                        self.registerVerifyTextEle.val('');
                    }
                }
            });
        },
        //同步登录
        synchroLogin: function(urls, callback){
            var _urls = $.isArray(urls) ? urls : [urls];
            var _funs  = [];
            var _mask  = 0;
            $.each(_urls, function(_index, _value){
                if(typeof _value == 'string'){
                    _funs.push(function(){
                        $.ajax({
                            url: _value,
                            dataType: 'jsonp',
                            complete: function(){
                                ++_mask;
                                if(_mask < _funs.length){
                                    _funs[_mask]();
                                }else{
                                    $.isFunction(callback) && callback();
                                }
                            }
                        });
                    });
                }
            });
            if(_funs.length){
                _funs[_mask] && _funs[_mask]();
            }else{
                $.isFunction(callback) && callback();
            }
        }
    });
})

define('home/auth/complete',function(require,exports,module){
    Class({
        //完成表单元素
        completeFormEle: $('#completeForm'),
        initial: function(){
            //绑定表单提交操作
            this.completeFormEle.submitForm({
                onAfter: function(data){
                    if(data.status){
                        if(data.url){
                            location.replace(data.url);
                        }else{
                            location.reload();
                        }
                    }else{
                        if(typeof data.info == 'string'){
                            $.dialog.error(data.info);
                        }
                    }
                }
            });
        }
    });
})

define('home/auth/forgot',function(require,exports,module){
    //载入提交表单插件
    require('common/extend/validator/validator');
    Class({
        //找回密码表单元素
        forgotFormEle : $('#forgotForm'),
        initial: function(){
            var self = this;
            //记录验证码图片元素
            this.verifyImageEle = this.forgotFormEle.find('.verity-code .code-image');
            //记录验证码输入框元素
            this.verifyTextEle = this.forgotFormEle.find('.verity-code .code-input :text');
            //绑定提交登录表单操作
            this.forgotFormEle.submitForm({
                autoValidate: false,
                onAfter: function(data){
                    if(data.status){
                        $.dialog.success(data.info, {
                            time: 3000,
                            onClose: function(){
                                location.replace(data.url);
                            }
                        });
                    }else{
                        if(typeof data.info == 'string'){
                            $.dialog.error(data.info);
                        }
                        self.verifyImageEle.click();
                        self.verifyTextEle.val('');
                    }
                }
            });
            //首个表单元素获取焦点
            this.forgotFormEle.find('input:first').focus();
        }
    });
})

define('home/auth/login',function(require,exports,module){
    //载入提交表单插件
    require('common/extend/validator/validator');
    Class({
        //登录表单元素
        loginFormEle : $('#loginForm'),
        //保持登录状态元素
        keepLoginEle : $(':checkbox[name="is_auto"]'),
        //第三方登录元素
        cooperateEle: $('.auth-cooperate .cooperate-list a'),
        initial: function(){
            var self = this;
            //记录验证码图片元素
            this.verifyImageEle = this.loginFormEle.find('.verity-code .code-image');
            //记录验证码输入框元素
            this.verifyTextEle = this.loginFormEle.find('.verity-code .code-input :text');
            //绑定提交登录表单操作
            this.loginFormEle.submitForm({
                autoValidate: false,
                onAfter: function(data){
                    if(data.status){
                        $.dialog.success(data.info);
                        self.synchroLogin(data.code, function(){
                            location.replace(data.url);
                        });
                    }else{
                        if(typeof data.info == 'string'){
                            $.dialog.error(data.info);
                        }
                        self.verifyImageEle.click();
                        self.verifyTextEle.val('');
                    }
                }
            });
            //首个表单元素获取焦点
            this.loginFormEle.find('input:first').focus();
            //绑定发送激活邮件操作
            this.loginFormEle.delegate('.field-msg a','click', function(){
                var _ele = $(this), _text = _ele.text(), _input = _ele.closest('.form-item').find(':text');
                if(!_ele.hasClass('loading')){
                    _ele.addClass('loading');
                    _ele.text('邮件发送中...');
                    _input.click();
                    $.dialog.loading('正在发送帐号激活邮件');
                    $.get(_ele.data('href'), function(data){
                        if(data.status){
                            $.dialog.success(data.info,{
                                time: 3000
                            });
                        }else{
                            $.dialog.error(data.info);
                        }
                        $.dialog.get('loading').close();
                        _ele.removeClass('loading');
                        _ele.text(_text);
                    });
                }
            });
            //记录第三方登陆元素原始链接地址
            $.each(this.cooperateEle, function(){
                if(!$(this).data('href')){
                    $(this).data('href', $(this).attr('href'));
                }
            });
            //检查是否记住保持登陆状态
            this.keepLoginEle.click(function(){
                self.findKeepLogin($(this).is(':checked'));
            });
            this.findKeepLogin(this.keepLoginEle.is(':checked'));
        },
        //同步登录
        synchroLogin: function(urls, callback){
            var _urls = $.isArray(urls) ? urls : [urls];
            var _funs  = [];
            var _mask  = 0;
            $.each(_urls, function(_index, _value){
                if(typeof _value == 'string'){
                    _funs.push(function(){
                        $.ajax({
                            url: _value,
                            dataType: 'jsonp',
                            complete: function(){
                                ++_mask;
                                if(_mask < _funs.length){
                                    _funs[_mask]();
                                }else{
                                    $.isFunction(callback) && callback();
                                }
                            }
                        });
                    });
                }
            });
            if(_funs.length){
                _funs[_mask] && _funs[_mask]();
            }else{
                $.isFunction(callback) && callback();
            }
        },
        //检查保持登陆
        findKeepLogin: function(status){
            var _value = this.keepLoginEle.val();
            $.each(this.cooperateEle, function(){
                var _href = $(this).data('href');
                if(status){
                    $(this).attr('href', _href + (_href.indexOf('?') >= 0 ? '&' : '?')+'is_auto='+_value);
                }else{
                    $(this).attr('href', _href);
                }
            });
        }
    });
})

define('home/auth/register', function (require, exports, module) {
    //载入提交表单插件
    require('common/extend/validator/validator');
    Class({
        //注册表单元素
        registerFormEle: $('#registerForm'),

        initial: function () {
            var self = this;
            //记录验证码图片元素
            this.verifyImageEle = this.registerFormEle.find('.verity-code .code-image');
            //记录验证码输入框元素
            this.verifyTextEle = this.registerFormEle.find('.verity-code .code-input :text');

            //绑定提交注册表单操作
            this.registerFormEle.submitForm({
                autoValidate: false,
                onAfter     : function (data) {
                    if (data.status) {
                        $.dialog.success(data.info, function () {
                            if (data.url) {
                                location.href = data.url;
                            }
                        });
                    } else {
                        if (typeof data.info == 'string') {
                            $.dialog.error(data.info);
                        }
                        self.verifyImageEle.click();
                        self.verifyTextEle.val('');
                    }
                }
            });
            //首个表单元素获取焦点
            this.registerFormEle.find('input:first').focus();
        }
    });
})

define('home/auth/reset',function(require,exports,module){
    //载入提交表单插件
    require('common/extend/validator/validator');
    Class({
        //重置表单元素
        resetFormEle : $('#resetForm'),
        initial: function(){
            var self = this;
            //记录验证码图片元素
            this.verifyImageEle = this.resetFormEle.find('.verity-code .code-image');
            //记录验证码输入框元素
            this.verifyTextEle = this.resetFormEle.find('.verity-code .code-input :text');
            //绑定提交登录表单操作
            this.resetFormEle.submitForm({
                autoValidate: false,
                onAfter: function(data){
                    if(data.status){
                        $.dialog.success(data.info, function(){
                            location.replace(data.url);
                        });
                    }else{
                        if(typeof data.info == 'string'){
                            $.dialog.error(data.info);
                        }
                        self.verifyImageEle.click();
                        self.verifyTextEle.val('');
                    }
                }
            });
            //首个表单元素获取焦点
            this.resetFormEle.find('input:first').focus();
        }
    });
})

define('home/book/create/api', function (require, exports, module) {

    //载入提交表单插件
    require('common/extend/validator/validator');
    //载入表单提交插件
    require('component/jquery.form');

    require('component/select2/dist/css/select2.css');
    require('component/select2/dist/js/select2.full.min');

    //载入模版引擎
    var Template = require('common/extend/template');

    //手册创建表单元素
    var headerTpl = '<div class="api-header">' +
        '<div class="w-group">' +
        '<div class="w-text"><input name="config[headers][<%=index%>][key]" class="text-input" placeholder="Key"></div>' +
        '<div class="w-group-addon w-group-addon-middle">:</div>' +
        '<div class="w-text"><input name="config[headers][<%=index%>][value]" class="text-input" placeholder="Value"></div>' +
        '</div>' +
        '<a href="javascript:;"><i class="icon icon-trash-o"></i></a>' +
        '</div>';

    return {

        init: function () {
            var manualCreateFormEle = $('#manualCreateForm');
            var namespaceEle = $('#namespace');
            var addHeaderEle = $('#addHeader');
            var apiHeadersEle = $('#apiHeaders');
            var namespaceSelectEle = $('#namespaceSelect');

            if (Config.get('namespace')) {
                namespaceSelectEle.val(Config.get('namespace'));
                namespaceEle.text(Config.get('namespace'));
            }

            namespaceSelectEle.select2({
                minimumResultsForSearch: Infinity,
                templateResult         : function (state) {
                    if (!state.id) {
                        return state.text;
                    }
                    return $(
                        '<div style="line-height: 20px;white-space:nowrap;overflow: hidden;text-overflow: ellipsis;"><img style="border-radius: 3px;" src="' + $(state.element).data('logo') + '" width="20" height="20" /> ' + state.text + '</div>'
                    );
                },
                templateSelection      : function (state) {
                    if (!state.id) {
                        return state.text;
                    }
                    return $(
                        '<div style="line-height: 30px;"><img style="vertical-align: middle;border-radius: 3px;" src="' + $(state.element).data('logo') + '" width="20" height="20" /> ' + state.text + '</div>'
                    );
                }
            }).on('select2:select', function (e) {
                namespaceEle.text(e.params.data.id);
            });
            var header_index = 0;
            addHeaderEle.on('click', function () {
                apiHeadersEle.append(Template.parseTemp(headerTpl, {index: header_index}));
                header_index++;
            });

            apiHeadersEle.on('click', '.api-header>a', function () {
                $(this).parent().remove();
            });

            //绑定提交登录表单操作
            manualCreateFormEle.submitForm({
                autoValidate: false,
                onAfter     : function (data, options) {
                    if (data.status) {
                        if (data.url) {
                            location.replace(data.url);
                        }
                    } else {
                        if (typeof data.info == 'string') {
                            $.dialog.error(data.info);
                        }
                    }
                }
            });
        }
    };
});

define('home/book/create/default', function (require, exports, module) {

    //载入提交表单插件
    require('common/extend/validator/validator');
    //载入表单提交插件
    require('component/jquery.form');
    //载入上传组件
    require('component/webuploader/css/webuploader.css');
    require('component/webuploader/dist/webuploader');

    require('component/select2/dist/css/select2.css');
    require('component/select2/dist/js/select2.full.min');


    var createUploader = function (type) {
        var self = this;
        var _selectUploadChmElement = $('#selectUpload' + type);
        var _pickerElement = $('#picker' + type);
        var _listElement = $('#upload' + type + 'List');
        var _hiddenInputElement = $('#upload' + type + 'Hidden');
        var uploader = null;
        _selectUploadChmElement.click(function () {
            if ($(this).is(':checked') && !uploader) {
                uploader = WebUploader.create({
                    runtimeOrder: false,
                    auto        : true,
                    width       : 86,
                    height      : 34,
                    server      : Config.get('uploadImportSourceUrl'),
                    fileNumLimit: 1,
                    pick        : '#picker' + type,
                    accept      : {
                        title     : type,
                        extensions: type.toLowerCase(),
                        mimeTypes : '*'
                    },
                    formData    : {
                        ajax       : 1,
                        import_type: type.toLowerCase()
                    }
                });
                uploader.on('uploadSuccess', function (file, data) {
                    if (!data.status) {
                        $.dialog.error(data.info);
                    } else {
                        _hiddenInputElement.val(data.data.source);
                        $('#' + file.id).find('.state').text('上传成功！');
                        $.dialog.success(data.info);
                    }
                });
                uploader.on('fileQueued', function (file) {
                    _listElement.append('<div id="' + file.id + '" class="upload-item">' +
                        '<h4 class="info">' + file.name + '</h4>' +
                        '<p class="state">等待上传...</p>' +
                        '<b class="delete" title="删除">x</b>',
                        '</div>');
                    _pickerElement.hide();
                });
                _listElement.on('click', '.delete', function () {
                    uploader.stop(true);
                    uploader.reset();
                    _hiddenInputElement.val('');
                    $(this).closest('.upload-item').remove();
                    _pickerElement.show();
                });
                uploader.on('uploadProgress', function (file, percentage) {
                    var $li = $('#' + file.id),
                        $percent = $li.find('.progress .progress-bar');
                    // 避免重复创建
                    if (!$percent.length) {
                        $percent = $('<div class="progress progress-striped active">' +
                            '<div class="progress-bar" role="progressbar" style="width: 0%">' +
                            '</div>' +
                            '</div>').appendTo($li).find('.progress-bar');
                    }
                    $li.find('p.state').text('上传中');
                    $percent.css('width', percentage * 100 + '%');
                });
            }
        });
        _selectUploadChmElement.click(function () {
            if (!$(this).is(':checked') && uploader) {
                uploader.stop(true);
                uploader.reset();
                _hiddenInputElement.val('');
                _listElement.find('.upload-item').remove();
                _pickerElement.show();
            }
        });
    };

    return {
        //手册创建表单元素

        init: function () {
            var manualCreateFormEle = $('#manualCreateForm'),
                importDocumentEle = $('#importDocument'),
                namespaceSelectEle = $('#namespaceSelect'),
                namespaceEle = $('#namespace');

            if (Config.get('namespace')) {
                namespaceSelectEle.val(Config.get('namespace'));
                namespaceEle.text(Config.get('namespace'));
            }

            namespaceSelectEle.select2({
                minimumResultsForSearch: Infinity,
                templateResult         : function (state) {
                    if (!state.id) {
                        return state.text;
                    }
                    return $(
                        '<div style="line-height: 20px;white-space:nowrap;overflow: hidden;text-overflow: ellipsis;"><img style="border-radius: 3px;" src="' + $(state.element).data('logo') + '" width="20" height="20" /> ' + state.text + '</div>'
                    );
                },
                templateSelection      : function (state) {
                    if (!state.id) {
                        return state.text;
                    }
                    return $(
                        '<div style="line-height: 30px;"><img style="vertical-align: middle;border-radius: 3px;" src="' + $(state.element).data('logo') + '" width="20" height="20" /> ' + state.text + '</div>'
                    );
                }
            }).on('select2:select', function (e) {
                namespaceEle.text(e.params.data.id);
            });

            //绑定导入文档操作
            importDocumentEle.each(function () {
                var _documentType = $(this).find('.document-type :checkbox');
                var _documentSelect = $(this).find('.document-select');
                var _documentItem = _documentSelect.find('.item');
                var _isImport = $(this).find(':hidden[name=is_import]');
                //选择文档
                _documentType.click(function () {
                    _documentType.not($(this)).prop('checked', false);
                    _isImport.prop('disabled', true);
                    _documentItem.hide().find('input').prop('disabled', true);
                    //根据上传类型显示上传空间以及控件类型
                    if (!_documentType.filter(':checked').length) {
                        _documentSelect.hide();
                    } else {
                        _documentSelect.show();
                        _documentItem.eq($(this).closest('.w-btn').index()).show().find('input').prop('disabled', false);
                        _isImport.prop('disabled', false);
                    }
                });
            });
            //绑定上传组件
            createUploader('Epub');
            createUploader('Chm');
            //绑定提交登录表单操作
            manualCreateFormEle.submitForm({
                autoValidate: false,
                uploadFile  : true,
                onAfter     : function (data, options) {
                    if (data.status) {
                        if (data.url) {
                            location.replace(data.url);
                        }
                    } else {
                        if (typeof data.info == 'string') {
                            $.dialog.error(data.info);
                        }
                    }
                }
            });
        }
    };
});

define('home/book/create/index', function (require, exports, module) {
    //载入弹出层
    require('component/dialog/jquery.dialog');
    return Class({
        initial: function () {
            $('.book-creator').click(function () {
                var dialog = $.dialog.load('/book/create', {
                    title     : '请选择你要创建的文档类型',
                    style     : 'think-dialog think-dialog-load',
                    width     : 790,
                    onComplete: function () {
                        this.bodyElement.find('[data-type]').click(function () {
                            var type = $(this).data('type');
                            dialog.destroy();
                            dialog = $.dialog.open('/book/create/' + type, {
                                title     : '创建文档',
                                style     : 'think-dialog think-dialog-load',
                                onComplete: function () {
                                    this.bodyElement.find('form').data('submitButton', this.okBtn);
                                },
                                onOk      : function () {
                                    this.bodyElement.find('form').submit();
                                }
                            })
                        });
                    }
                });
            });
        }
    });
});

define('home/book/dashboard', function (require, exports, module) {

    var Order = require('common/module/order');

    return Class({
        //手册发布元素
        manualRetryEle  : $('#manualRetry'),
        manualDeleteEle : $('#manualDelete'),

        checkImportComplete: function () {
            var _self = this;
            $.ajax({
                url    : Config.get('checkManualStatusUrl'),
                type   : 'get',
                data   : {book_id: Config.get('manualId')},
                success: function (data) {
                    if (data.status == 1) {
                        window.location.reload();
                    } else if (data.status == 2) {
                        setTimeout(function () {
                            _self.checkImportComplete.apply(_self);
                        }, 1000 * 6);
                    } else {
                        $.dialog.error('文档导入失败，请删除或者重试', {
                            time   : 3000,
                            onClose: function () {
                                window.location.reload();
                            }
                        });
                    }
                }
            });
        },


        initial: function () {
            switch (Config.get('manualStatus')) {
                case 2:
                    this.checkImportComplete();
                    break;
                case 3:
                    this.manualDeleteEle.click(function () {
                        var _ele = $(this), _id = $(this).data('id');
                        $.dialog.confirm('确定删除吗', function (action) {
                            if (action == 1) {
                                $.ajax({
                                    url    : _ele.data('href'),
                                    data   : {book_id: _id},
                                    type   : 'post',
                                    success: function (data) {
                                        if (data.status) {
                                            location.href = data.url;
                                        } else {
                                            $.dialog.error(data.info);
                                        }
                                    }
                                })
                            }
                        });
                        return false;
                    });
                    this.manualRetryEle.click(function () {
                        var _ele = $(this), _id = $(this).data('id');
                        $.ajax({
                            url    : _ele.data('href'),
                            data   : {book_id: _id},
                            type   : 'post',
                            success: function (data) {
                                if (data.status) {
                                    location.reload();
                                } else {
                                    $.dialog.error(data.info);
                                }
                            }
                        });
                        return false;
                    });
                    break;
            }

            //绑定生成[重新生成]阅读令牌操作
            $('.token-set').click(function () {
                var _ele = $(this), _id = $(this).data('id'), _tips = $(this).data('tips');
                $.dialog.confirm(_tips, function (action) {
                    if (action == 1) {
                        $.ajax({
                            url    : _ele.data('href'),
                            data   : {book_id: _id},
                            type   : 'post',
                            success: function (data) {
                                if (data.status) {
                                    window.location.reload();
                                } else {
                                    $.dialog.error(data.info);
                                }
                            }
                        })
                    }
                });
                return false;
            });
            //绑定删除阅读令牌操作
            $('.token-del').click(function () {
                var _ele = $(this), _id = $(this).data('id'), _tips = $(this).data('tips');
                $.dialog.confirm(_tips, function (action) {
                    if (action == 1) {
                        $.ajax({
                            url    : _ele.data('href'),
                            data   : {book_id: _id},
                            type   : 'post',
                            success: function (data) {
                                if (data.status) {
                                    window.location.reload();
                                } else {
                                    $.dialog.error(data.info);
                                }
                            }
                        })
                    }
                });
                return false;
            });

            $('.focus-input').click(function () {
                $(this).focus().select();
            });


            // 扩容按钮
            $('.size-upgrade').click(function () {
                new Order({
                    title    : '欢迎购买文档空间',
                    type     : 'BookSizeProduct',
                    infoTpl  : [
                        '<div class="form-item">',
                        '<span class="form-label">购买大小：</span>',
                        '<div class="form-target">',
                        '<a class="btn-default w-btn minus"><span class="btn-input "> - </span></a>&nbsp;',
                        '<label class="w-text" style="width: 82px;">',
                        '<input type="text" name="size" style="width: 60px;" class="text-input" data-num="1" value="50 M" readonly="readonly" />',
                        '</label>',
                        '&nbsp;<a class="btn-default w-btn plus"><span class="btn-input">+</span></a>',
                        '</div>',
                        '</div>',
                    ].join(''),
                    coupon   : true,
                    coin     : Config.get('userCoin'),
                    price    : function () {
                        return parseInt(this.wrapEle.find('[name=size]').data('num') * 1000);
                    },
                    data     : function () {
                        return {
                            num    : parseInt(this.wrapEle.find('[name=size]').data('num')),
                            book_id: Config.get('manualId')
                        };
                    },
                    onInit   : function () {
                        var self = this;
                        this.wrapEle.find('.minus').click(function () {
                            var num = self.wrapEle.find('[name=size]').data('num');
                            if (num > 1) {
                                num--;
                                self.wrapEle.find('[name=size]').data('num', num);
                                self.wrapEle.find('[name=size]').val((50 * num) + " M");
                                self.freshPrice();
                            }
                        });
                        this.wrapEle.find('.plus').click(function () {
                            var num = self.wrapEle.find('[name=size]').data('num');
                            num++;
                            self.wrapEle.find('[name=size]').data('num', num);
                            self.wrapEle.find('[name=size]').val((50 * num) + " M");
                            self.freshPrice();
                        });
                    },
                    onSuccess: function () {
                        location.reload();
                    }
                });
            });
        }
    });
});

define('home/book/domain/update', function (require, exports, module) {
    //载入提交表单插件
    require('common/extend/validator/validator');
    //载入表单提交插件
    require('component/jquery.form');
    return Class({

        //手册创建表单元素
        manualUpdateFormEle: $('#manualUpdateForm'),

        initial: function () {
            var self = this;
            //记录验证码输入框元素
            this.verifyTextEle = this.manualUpdateFormEle.find('.verity-code .code-input :text');
            //绑定提交登录表单操作
            this.manualUpdateFormEle.submitForm({
                autoValidate: false,
                onAfter     : function (data) {
                    if (data.status) {
                        $.dialog.success(data.info, function () {
                            location.reload();
                        });
                    } else {
                        $.dialog.error(data.info);
                        self.verifyTextEle.val('');
                    }
                }
            });
        }
    });
});

define('home/book/editor/article', function (require) {

    var events = require('./events');
    var state  = require('./state');
    var editor = require('./editor');
    var base64 = require('common/library/base64');

    var loadContentAjax, saveContentAjax, currentArticleHash;
    //获取文章数据
    var load = function (id, callback) {
        $.dialog.loading('数据加载中!');
        loadContentAjax && loadContentAjax.abort();
        loadContentAjax = $.ajax({
            url     : state.api + '/content/' + decodeURIComponent(id),
            type    : 'get',
            success : function (data) {
                callback(data);
            },
            error   : function (data) {
                callback({
                    content: '',
                    sha    : ''
                });
            },
            complete: function () {
                $.dialog.get('loading').close();
            }
        });
    };

    var open = function (node) {
        load(node.id, function (data) {
            state.articleId    = node.id;
            state.articleTitle = node.text;
            currentArticleHash = data.sha;

            var type    = node.ext || node.original.ext;
            var mode;
            var $editor = editor.getEditor();
            switch (type) {
                case 'md':
                    mode = {name: 'kancloud', fencedCodeBlocks: true};
                    break;
                case 'json':
                    mode = {name: "javascript", json: true};
                    break;
                case 'css':
                    mode = 'css';
                    break;
                case 'htm':
                case 'xhtml':
                case 'html':
                    mode = "html";
                    break;
                default:
                    mode = "text";
                    break;
            }

            $editor.setMode(mode);
            $editor.setValue(data.content);
            $editor.reset();
            $editor.$codemirror.scrollTo(0, 0);

            events.trigger('article.open', {content: data.content, node: node});
        });
    };

    var save = function () {
        if (!saveContentAjax) {
            saveContentAjax = true;
            $.dialog.loading('文章保存中...');
            var data = {
                content: base64.encode(editor.getEditor().getValue()),
                message: '编辑文档'
            };
            var type = 'POST';
            var url  = state.api + '/content';
            if (currentArticleHash) {
                data.sha = currentArticleHash;
                type     = 'PUT';
                url += '/' + decodeURIComponent(state.articleId)
            } else {
                data.path = decodeURIComponent(state.articleId);
            }

            $.ajax({
                url     : url,
                type    : type,
                data    : data,
                success : function (data) {
                    //删除编辑器初始数据
                    editor.getEditor().reset();
                    currentArticleHash = data.content.sha;
                    events.trigger('article.save');
                },
                error   : function (xhr) {
                    if (xhr.status == 409) {
                        $.dialog.confirm('本文件在你打开之后已经被其他人修改过了，直接覆盖吗？', function (action) {
                            if (action == 1) {
                                currentArticleHash = xhr.responseJSON.message;
                                save();
                            }
                        });
                    } else if (xhr.status == 413) {
                        $.dialog.error('文档存储空间已达上限，请先升级');
                    } else {
                        $.dialog.error(xhr.responseText);
                    }
                },
                complete: function () {
                    saveContentAjax = false;
                    $.dialog.get('loading').close();
                }
            });
        }
    };

    return {
        init: function () {

            events.on('catalog.select', function (event, node) {
                open(node);
            });

            events.on('editor.save', function () {
                save();
            });
        }
    };
});
define('home/book/editor/backup', function (require) {

    var events = require('./events');
    var editor = require('./editor');
    var state = require('./state');

    var lastContent, lastId, cacheTiper;

    //保存内容到本地
    var saveId = function (id) {
        if (window.localStorage) {
            localStorage.setItem('kancloud-manual-' + state.id + '-id', id);
        }
    };
    var saveContent = function (content) {
        if (window.localStorage) {
            if (content === null) {
                localStorage.removeItem('kancloud-manual-' + state.id + '-content');
            } else {
                localStorage.setItem('kancloud-manual-' + state.id + '-content', content);
            }
        }
    };
    //从本地获取内容
    var getContent = function () {
        if (window.localStorage) {
            return localStorage.getItem('kancloud-manual-' + state.id + '-content');
        }
    };
    var getId = function () {
        if (window.localStorage) {
            return localStorage.getItem('kancloud-manual-' + state.id + '-id');
        }
    };

    var removeCacheTiper = function () {
        if (cacheTiper) {
            cacheTiper.remove();
            cacheTiper = null;
        }
    };

    return {
        init: function () {
            var $editor = editor.getEditor();
            lastContent = getContent();
            lastId = getId();
            if (lastId) {
                state.articleId = lastId;
            }

            events.on('editor.change', function () {
                setTimeout(function () {
                    if ($editor.isChanged()) {
                        saveContent($editor.getValue());
                    } else {
                        saveContent(null);
                    }
                }, 0);
            });

            events.on('catalog.not_found', function () {
                saveContent(null);
                lastContent = null;
            });

            events.on('article.open', function (event, data) {
                if (lastContent) {
                    if (lastContent != data.content) {
                        $editor.setValue(lastContent);
                        //创建提示信息
                        cacheTiper = $([
                            '<div class="manual-cache-tiper">',
                            '<div class="tiper-content">这是你上次未保存的数据，<a class="revoke">[撤销]</a></div>',
                            '</div>',
                        ].join(''));
                        cacheTiper.appendTo(state.$book.find('.manual-editor')).find('.revoke').click(function () {
                            $editor.setValue(data.content);
                        });

                        events.one('article.save editor.change', function () {
                            removeCacheTiper();
                        });
                    }
                    lastContent = null;
                }
                saveId(data.node.id);
            });

            events.on('catalog.update', function () {
                saveId(state.articleId);
            });
        }
    };
});
define('home/book/editor/catalog', function (require) {
    //载入树插件
    require('component/jstree/dist/jstree.js');
    require('component/jstree/dist/themes/default/style.min.css');

    var state   = require('./state');
    var events  = require('./events');
    var editor  = require('./editor');
    var Summary = require('common/library/summary');
    var base64  = require('common/library/base64');

    var treeCatalog,
        catalogElement       = state.$book.find('.manual-left .manual-tab .tab-wrap .catalog-list'),
        addCatalogBtnElement = state.$book.find('.manual-left .manual-tab .tab-util .setting-edit'),
        catalogHash, catalogContent;
    //获取目录操作对话框元素
    var getCatalogEditTemp   = function () {
        var _catalogEditTemp = $([
            '<div class="m-manual-add">',
            '<form class="w-form form-horizon dialog-form" method="post">',
            '<div class="form-item">',
            '<span class="form-label"><i class="form-must">*</i>目录标题</span>',
            '<div class="form-target">',
            '<label class="w-text text-m text-full">',
            '<input class="text-input" type="text" name="title" />',
            '</label>',
            '</div>',
            '</div>',
            '<div class="form-item">',
            '<span class="form-label"><i class="form-must">*</i>对应文件</span>',
            '<div class="form-target">',
            '<label class="w-text text-m text-full">',
            '<input class="text-input" type="text" name="file" />',
            '</label>',
            '<p class="field-msg w-fragment fragment-s fragment-tip">输入路径创建一个新目录和任何必要的子目录<br />例如："test/myfile.md"<br /><strong>文件后缀代表文件类型</strong><br />目前仅支持md(MarkDown),html类型的解析，其他类型原样输出</p>',
            '</div>',
            '</div>',
            '<input type="submit" style="display: none;" />',
            '</form>',
            '</div>'
        ].join(''));
        return _catalogEditTemp;
    };

    //安全过滤文件名
    var checkFilenameSafe = function (filename) {
        return !filename.match(/[\\:*?"<>|]/g);
    };

    //过滤文件名
    var filterFilename = function (filename) {
        var length = filename.length;

        filename = filename.replace("\b", "");

        if (filename.length < length) {
            return filterFilename(filename);
        }
        return filename;
    };

    var setCatalogError = function (msg) {
        catalogElement.hide();
        catalogElement.next('.catalog-error').text(msg).show();
    };

    //打开更新目录对话框
    var openUpdateCatalogDialog = function (node) {
        if (!node) {
            return false;
        }
        var dialog = $.dialog.form(getCatalogEditTemp(), {
            title   : '更新目录',
            onCreate: function () {
                var _form = this.bodyElement.find('form');
                _form.find(':text[name=title]').val(node.text).focus();
                _form.find(':text[name=file]').val(decodeURIComponent(node.id));
                _form.submitForm({
                    onBefore: function (options) {
                        options.data.file  = filterFilename(options.data.file);
                        options.data.title = filterFilename(options.data.title);
                        var file           = options.data.file.trim().replace(/\/\s+/g, '\/');

                        if (!checkFilenameSafe(file)) {
                            $.dialog.error('文件名不能包含任何以下字符 \\ : * ? " < > |');
                            return false;
                        }

                        var pathinfo = Util.pathinfo(file);
                        var data     = {
                            id  : encodeURIComponent(file),
                            text: options.data.title,
                            name: pathinfo.name,
                            ext : pathinfo.ext
                        };

                        if (data.id === '' || data.name === '' || data.text === '') {
                            $.dialog.error('目录标题和对应文件均不能为空');
                            return false;
                        }

                        if (data.id !== node.id) {
                            var _node = treeCatalog.get_node(data.id);
                            if (_node) {
                                $.dialog.error('文件名称已存在');
                                return false;
                            }
                        }
                        if (data.id === node.id && data.text === node.text) {
                            dialog.close();
                            return false;
                        }

                        options.id     = node.id;
                        options.new_id = data.id;

                        //更新本地目录
                        node.original = data;
                        treeCatalog.rename_node(node, data.text);
                        treeCatalog.set_id(node, data.id);


                        options.url         = state.api + '/git/tree';
                        options.type        = 'post';
                        options.contentType = 'application/json; charset=utf-8';
                        return $.get(state.api + '/git/tree/master?recursive=1').done(function (result) {
                            var tree = result.tree;
                            for (var i = 0; i < tree.length; i++) {
                                if (tree[i].path == 'SUMMARY.md') {
                                    if (tree[i].sha != catalogHash) {
                                        setCatalogError('文档目录已在其他地方修改过，请先刷新页面！');
                                        dialog.close();
                                        return false;
                                    }
                                    delete tree[i].sha;
                                    tree[i].content = base64.encode(Summary.generate(treeCatalog.get_json(null, {
                                        no_state: true,
                                        no_data : true
                                    }), 0));
                                } else if (data.id != options.id && tree[i].path == decodeURIComponent(options.id)) {
                                    tree[i].path = decodeURIComponent(data.id);
                                }
                            }
                            options.data = JSON.stringify({
                                tree: tree
                            });
                        })

                    },
                    onAfter : function (data, options) {
                        var tree = data.tree;
                        for (var i = 0; i < tree.length; i++) {
                            if (tree[i].path == 'SUMMARY.md') {
                                catalogHash = tree[i].sha;
                                break;
                            }
                        }

                        $.get(state.api + '/git/ref/heads/master').done(function (result) {

                            $.post(state.api + '/git/commit', {
                                message: '编辑目录',
                                tree   : data.sha,
                                parents: [result.object.sha]
                            }).done(function (result) {
                                $.ajax({
                                    url : state.api + '/git/ref/heads/master',
                                    type: 'put',
                                    data: {
                                        sha: result.sha
                                    }
                                }).done(function () {
                                    if (state.articleId == options.id) {
                                        state.articleId = options.new_id;
                                    }

                                    $.dialog.success('更新成功');
                                    events.trigger('catalog.update');

                                    dialog.close();
                                });
                            });
                        })
                    },
                    error   : function (xhr) {
                        var message = xhr.responseText;
                        if (xhr.status == 413) {
                            message = '文档存储空间已达上限，请先升级';
                        }

                        setCatalogError(message);
                        $.dialog.error(message);
                    }
                });
            }
        });
    };
    //打开创建目录对话框
    var openCreateCatalogDialog = function (node) {
        var id = node ? node.id : 0;

        var dialog = $.dialog.form(getCatalogEditTemp(), {
            title   : '创建目录',
            onCreate: function () {
                var _form = this.bodyElement.find('form');
                _form.find(':text[name=title]').on('keyup', function () {
                    var filename = $(this).val().trim().replace(/\//g, '-');
                    filename     = filename.replace(/[\\:*?"<>|]/g, '');
                    _form.find(':text[name=file]').val(filename + '.md');
                });
                _form.find(':text[name=title]').focus();
                _form.submitForm({
                    onBefore: function (options) {
                        options.data.file  = filterFilename(options.data.file);
                        options.data.title = filterFilename(options.data.title);

                        var file = options.data.file.trim().replace(/\/\s+/g, '\/');

                        if (!checkFilenameSafe(file)) {
                            $.dialog.error('文件名不能包含任何以下字符 \\ : * ? " < > |');
                            return false;
                        }

                        var pathinfo = Util.pathinfo(file);
                        var data     = {
                            id  : encodeURIComponent(file),
                            text: options.data.title,
                            name: pathinfo.name,
                            ext : pathinfo.ext
                        };

                        if (data.id === '' || data.name === '' || data.text === '') {
                            $.dialog.error('目录标题和对应文件均不能为空');
                            return false;
                        }

                        var node = treeCatalog.get_node(data.id);
                        if (node) {
                            $.dialog.error('文件名称已存在');
                            return false;
                        }

                        //创建本地目录
                        treeCatalog.create_node(id == 0 ? '#' : '#' + id, data, 'last');
                        var type  = 'post';
                        var url   = state.api + '/content';
                        var sdata = {
                            content: base64.encode(Summary.generate(treeCatalog.get_json(null, {
                                no_state: true,
                                no_data : true
                            }), 0)),
                            message: '创建目录'
                        };
                        if (catalogHash) {
                            type      = 'put';
                            url += '/SUMMARY.md';
                            sdata.sha = catalogHash;
                        } else {
                            sdata.path = 'SUMMARY.md';
                        }

                        options.type = type;
                        options.url  = url;
                        options.data = sdata;
                        options.id   = data.id;

                    },
                    error   : function (xhr) {
                        if (xhr.status == 422) {
                            $.dialog.error(xhr.responseJSON.message);
                        } else if (xhr.status == 409) {
                            setCatalogError('文档目录已在其他地方修改过，请先刷新页面！');
                            dialog.close();
                        } else if (xhr.status == 413) {

                            setCatalogError('文档存储空间已达上限，请先升级');
                            dialog.close();
                        } else {
                            $.dialog.error(xhr.responseText);
                        }
                    },
                    onAfter : function (data, options) {

                        var node = treeCatalog.get_node(options.id);

                        $.dialog.success('创建成功');
                        catalogHash = data.content.sha;
                        events.trigger('catalog.create');
                        if (node) {
                            if (editor.getEditor().isChanged()) {
                                $.dialog.confirm('编辑区域有尚未保存的内容,确定要离开吗？', function (action) {
                                    if (action == 1) {
                                        //选中当前节点
                                        treeCatalog.deselect_all(true);
                                        treeCatalog.select_node(node);
                                    }
                                });
                            } else {
                                treeCatalog.deselect_all(true);
                                treeCatalog.select_node(node);
                            }
                        }
                        dialog.close();
                    }
                });
            }
        });
    };

    //删除目录
    var deleteCatalog = function (node) {

        $.dialog.loading('目录删除中...');
        var nodes = treeCatalog.get_json(node, {
            no_state: true,
            no_data : true
        });
        if (node) {
            var _targetDom  = treeCatalog.get_next_dom(node);
            var _targetNode = null;
            if (!_targetDom.length) {
                _targetDom = treeCatalog.get_prev_dom(node);
            }
            treeCatalog.delete_node(node);
            if (_targetDom.length && state.articleId == node.id) {
                _targetNode = treeCatalog.get_node(_targetDom);
                treeCatalog.select_node(_targetNode);
            }
        }

        var wantToDeletePaths = [];

        wantToDeletePaths.push(decodeURIComponent(nodes.id));

        var addToDeletePaths = function (nodes) {
            for (var i = 0; i < nodes.length; i++) {
                wantToDeletePaths.push(decodeURIComponent(nodes[i].id));
                if (nodes[i].children.length > 0) {
                    addToDeletePaths(nodes[i].children);
                }
            }
        };

        if (nodes.children.length > 0) {
            addToDeletePaths(nodes.children);
        }

        $.get(state.api + '/git/tree/master?recursive=1').done(function (result) {
            var tree = result.tree;

            for (var i = 0; i < tree.length; i++) {
                if (tree[i].path == 'SUMMARY.md') {
                    if (tree[i].sha != catalogHash) {
                        setCatalogError('文档目录已在其他地方修改过，请先刷新页面！');
                        return false;
                    }
                    delete tree[i].sha;
                    tree[i].content = base64.encode(Summary.generate(treeCatalog.get_json(null, {
                        no_state: true,
                        no_data : true
                    }), 0));
                } else if ($.inArray(tree[i].path, wantToDeletePaths) > -1) {
                    tree.splice(i, 1);
                    i = i - 1;
                }
            }
            $.ajax({
                url        : state.api + '/git/tree',
                type       : 'post',
                contentType: 'application/json; charset=utf-8',
                data       : JSON.stringify({
                    tree: tree
                })
            }).done(function (data) {
                var tree = data.tree;
                for (var i = 0; i < tree.length; i++) {
                    if (tree[i].path == 'SUMMARY.md') {
                        catalogHash = tree[i].sha;
                        break;
                    }
                }

                $.get(state.api + '/git/ref/heads/master').done(function (result) {

                    $.post(state.api + '/git/commit', {
                        message: '删除目录',
                        tree   : data.sha,
                        parents: [result.object.sha]
                    }).done(function (result) {
                        $.ajax({
                            url : state.api + '/git/ref/heads/master',
                            type: 'put',
                            data: {
                                sha: result.sha
                            }
                        }).done(function () {
                            if (state.articleId == options.id) {
                                state.articleId = options.new_id;
                            }
                            $.dialog.get('loading').close();
                            $.dialog.success('删除成功');
                            events.trigger('catalog.delete');
                        });
                    });
                })
            }).fail(function (xhr) {
                if (xhr.status == 409) {
                    setCatalogError('文档目录已在其他地方修改过，请先刷新页面！');
                } else if (xhr.status == 413) {
                    setCatalogError('文档存储空间已达上限，请先升级');
                } else {
                    setCatalogError(xhr.responseText);
                }
            });

        });
    };

    var saveCatalogSort = function () {

        $.dialog.loading('保存排序中...');

        $.ajax({
            url     : state.api + '/content/SUMMARY.md',
            data    : {
                content: base64.encode(Summary.generate(treeCatalog.get_json(null, {
                    no_state: true,
                    no_data : true
                }), 0)),
                sha    : catalogHash,
                message: "目录排序"
            },
            type    : 'put',
            success : function (result) {
                $.dialog.get('loading').close();
                catalogHash = result.content.sha;
                $.dialog.success('排序成功');
            },
            error   : function (xhr) {
                $.dialog.get('loading').close();
                if (xhr.status == 409) {
                    setCatalogError('文档目录已在其他地方修改过，请先刷新页面！');
                } else if (xhr.status == 413) {
                    setCatalogError('文档存储空间已达上限，请先升级');
                } else {
                    setCatalogError(xhr.responseText);
                }
            },
            complete: function () {
                catalogContent = null;
            }
        })
    };

    //检查文章数量是否为空
    var isEmpty = function () {
        var _status = false;
        if (treeCatalog) {
            _status = treeCatalog.get_json().length ? false : true;
        }
        events.trigger('catalog.empty', _status);
        return _status;
    };

    var checkOnEditor = function (point) {
        var container = $(editor.getEditor().$codemirror.getWrapperElement());

        var range = [container.offset().left, container.offset().top, container.width(), container.height()];
        return point.left > range[0] && point.left < range[0] + range[2] && point.top > range[1] && point.top < range[1] + range[3]
    };

    return {
        init: function (config) {
            catalogHash = config.catalogHash;

            //绑定树插件初始化完成事件
            catalogElement.bind('loaded.jstree', function () {
                var treeCatalog = $(this).jstree();
                //绑定新增目录按钮操作
                addCatalogBtnElement.click(function () {
                    openCreateCatalogDialog(null);
                });
                //检查文章数量是否为空
                if (!isEmpty()) {
                    //根据显示的文章ID打开并选中节点
                    var _mask  = '#' + (state.articleId || '').toString();
                    var _node  = treeCatalog.get_node(_mask);
                    var _child = null;
                    if (!_node || _node.parent === null) {
                        events.trigger('catalog.not_found');
                        _child = treeCatalog.get_children_dom('#');
                        if (_child[0]) {
                            _node = treeCatalog.get_node(_child[0]);
                        }
                    }
                    if (_node) {
                        treeCatalog.select_node(_node);
                    }
                }

            });
            //绑定重绘树事件
            catalogElement.bind('redraw.jstree', function () {
                var treeCatalog = $(this).jstree();
                //自定义选择节点之前动作
                treeCatalog.get_container_ul().delegate('.jstree-anchor', 'click', function (event) {
                    treeCatalog.trigger('before_select_node.jstree', {
                        event    : event,
                        reference: $(this).closest('.jstree-node')
                    });
                });
            });

            //绑定选中节点事件
            catalogElement.bind('select_node.jstree', function (event, data) {
                events.trigger('catalog.select', data.node);
            });

            //绑定选择节点之前检查动作
            catalogElement.bind('before_select_node.jstree', function (event, data) {
                if (editor.getEditor().isChanged()) {
                    data.event.stopPropagation();
                    $.dialog.confirm('编辑区域有尚未保存的内容,确定要离开吗？', function (action) {
                        if (action == 1) {
                            //选中当前节点
                            var _node = treeCatalog.get_node(data.reference);
                            if (_node) {
                                treeCatalog.deselect_all(true);
                                treeCatalog.select_node(_node);
                            }
                        }
                    });
                }
            });
            //绑定移动节点事件
            $(document).bind('dnd_start.vakata', function (event, data) {
                catalogContent = base64.encode(Summary.generate(treeCatalog.get_json(null, {
                    no_state: true,
                    no_data : true
                }), 0));
            });

            $(document).bind('dnd_move.vakata', function (event, data) {
                if (checkOnEditor(data.helper.offset())) {
                    data.helper.find('.jstree-icon').first().removeClass('jstree-er').addClass('jstree-ok');
                }
            });

            $(document).bind('dnd_stop.vakata', function (event, data) {
                if (checkOnEditor(data.helper.offset())) {

                    $.each(data.data.nodes, function (k, id) {
                        var node = treeCatalog.get_node(id);

                        var path        = decodeURIComponent(id);
                        var currentPath = decodeURIComponent(state.articleId);
                        if (path == currentPath) {
                            editor.getEditor().insert('[' + node.text + '](' + Util.pathinfo(currentPath).basename + ')');
                            return;
                        }

                        //去除相同的目录
                        var pathArr        = path.split('/');
                        var currentPathArr = currentPath.split('/');

                        $.each(pathArr, function (k, v) {
                            if (v == currentPathArr[k]) {
                                delete currentPathArr[k];
                                delete  pathArr[k];
                            } else {
                                return false;
                            }
                        });

                        currentPath = currentPathArr.join('/').replace(/^\/*/, '');

                        path = pathArr.join('/').replace(/^\/*/, '');

                        var pathinfo = Util.pathinfo(currentPath);
                        var basepath = pathinfo.dirname;

                        if (basepath == '.') {
                            basepath = "";
                        } else {
                            basepath = new Array(basepath.split('/').length + 1).join('../');
                        }

                        editor.getEditor().insert('[' + node.text + '](' + basepath + path + ')');
                    });

                    catalogContent = null;
                } else {
                    if (catalogContent && base64.encode(Summary.generate(treeCatalog.get_json(null, {
                            no_state: true,
                            no_data : true
                        }), 0)) != catalogContent) {
                        saveCatalogSort();
                    } else {
                        catalogContent = null;
                    }
                }
            });

            events.on('catalog.delete catalog.create', function () {
                isEmpty();
            });

            //实例化树组件
            treeCatalog = catalogElement.jstree({
                core       : {
                    check_callback: true,
                    data          : config.catalogData,
                    force_text    : true
                },
                plugins    : ["wholerow", "dnd", "contextmenu"],
                dnd        : {
                    inside_pos       : 'last',
                    large_drag_target: true, large_drop_target: true, copy: false,
                    is_draggable     : function () {
                        return !catalogContent
                    }
                },
                contextmenu: {
                    show_at_node: false,
                    select_node : false,
                    items       : {
                        create: {
                            "separator_before": false,
                            "separator_after" : true,
                            "_disabled"       : false,
                            "label"           : "新建章节",
                            "action"          : function (data) {
                                var inst = $.jstree.reference(data.reference),
                                    node = inst.get_node(data.reference);
                                openCreateCatalogDialog(node);
                            },
                            "icon"            : 'icon icon-plus2'
                        },
                        edit  : {
                            "separator_before": false,
                            "separator_after" : true,
                            "_disabled"       : false,
                            "label"           : "编辑",
                            "action"          : function (data) {
                                var inst = $.jstree.reference(data.reference),
                                    node = inst.get_node(data.reference);
                                openUpdateCatalogDialog(node);
                            },
                            "icon"            : 'icon icon-mode-edit'
                        },
                        remove: {
                            "separator_before": false,
                            "separator_after" : true,
                            "_disabled"       : false,
                            "label"           : "删除",
                            "action"          : function (data) {
                                var inst = $.jstree.reference(data.reference),
                                    node = inst.get_node(data.reference);
                                $.dialog.confirm('确定删除目录吗？', function (action) {
                                    if (action == 1) {
                                        deleteCatalog(node);
                                    }
                                });
                            },
                            "icon"            : 'icon icon-trash-o'
                        }
                    }
                }
            }).jstree();

        }
    };
});
define('home/book/editor/editor', function (require) {

    var events     = require('./events');
    var editor     = require('common/module/editor');
    var state      = require('./state');
    var history    = require('./tools/history');
    var htmlpaste  = require('./tools/htmlpaste');
    var more       = require('./tools/more');
    var save       = require('./tools/save');
    var sidebar    = require('./tools/sidebar');
    var toc        = require('./tools/toc');
    var previewAll = require('./tools/previewAll');
    var release    = require('./tools/release');
    var $editor;

    var extensions = [];

    return {
        init        : function () {
            //动态创建基础结构
            var _editorHtml = $([
                    '<div class="manual-editor">',
                    '<textarea></textarea>',
                    '</div>',
                    '<div class="manual-editor-status"><div class="filename"></div><div class="pull-right"></div></div>'
                ].join('')),
                _textarea   = _editorHtml.find('textarea');

            state.$book.find('.manual-body .manual-right').append(_editorHtml);

            var options = {
                items     : ["save,-,undo,redo,-,h1,h2,h3,h4,-,bold,italic,-,ul,ol,-,link,image,code,hr,blockquote,table,htmlpaste,toc", "sidebar,preview,history,preview-all,help,more,-,release"],
                extraItems: [],
                uploader  : function (files) {
                    var self = this;
                    if (!(window.File || window.FileReader || window.FileList || window.Blob)) {
                        $.dialog.error('您的浏览器版本太低，请升级你的浏览器，推荐使用Chrome浏览器');
                        return;
                    }
                    if (files.length == 0) {
                        $.dialog.error('请选择文件');
                        return;
                    }
                    var file = files[0];

                    if (!file.type.match(/^image\/(png|jpeg|jpg|gif)$/)) {
                        $.dialog.error('请选择图片文件');
                        return;
                    }
                    var reader = new FileReader();

                    reader.onloadend = function () {
                        var pathinfo = Util.pathinfo(decodeURIComponent(state.articleId));
                        var basepath = pathinfo.dirname;

                        if (basepath == '.') {
                            basepath = "";
                        } else {
                            basepath = new Array(basepath.split('/').length + 1).join('../');
                        }

                        var path = "image/" + file.name;

                        var insertImage = function () {
                            var text = self.$codemirror.getSelection(), alt;
                            alt      = text.length ? text : '';

                            self.insert("![" + alt + "](" + basepath + path + ")");
                        };

                        $.dialog.loading('图片上传中……');
                        $.get(state.api + '/git/tree/master?recursive=1').done(function (result) {
                            var tree = result.tree;

                            for (var i = 0; i < tree.length; i++) {
                                if (tree[i].path == path) {
                                    $.dialog.get('loading').close();
                                    insertImage();
                                    return;
                                }
                            }

                            var data = JSON.stringify({
                                base_tree: result.sha,
                                tree     : [{
                                    path   : path,
                                    type   : 'blob',
                                    mode   : '100644',
                                    content: reader.result.split(',')[1]
                                }]
                            });

                            $.ajax({
                                url        : state.api + '/git/tree',
                                type       : 'post',
                                contentType: 'application/json; charset=utf-8',
                                data       : data
                            }).done(function (data) {
                                $.get(state.api + '/git/ref/heads/master').done(function (result) {

                                    $.post(state.api + '/git/commit', {
                                        message: '上传图片',
                                        tree   : data.sha,
                                        parents: [result.object.sha]
                                    }).done(function (result) {
                                        $.ajax({
                                            url : state.api + '/git/ref/heads/master',
                                            type: 'put',
                                            data: {
                                                sha: result.sha
                                            }
                                        }).done(function () {
                                            $.dialog.get('loading').close();

                                            insertImage();

                                            $.dialog.success('上传成功');
                                        });
                                    }).fail(function (xhr) {
                                        $.dialog.get('loading').close();
                                        if (xhr.status == 413) {
                                            $.dialog.error('文档存储空间已达上限，请先升级');
                                        } else {
                                            $.dialog.error(xhr.responseText);
                                        }
                                    });
                                })
                            }).fail(function (xhr) {
                                $.dialog.get('loading').close();
                                if (xhr.status == 413) {
                                    $.dialog.error('文档存储空间已达上限，请先升级');
                                } else {
                                    $.dialog.error(xhr.responseText);
                                }
                            })

                        });
                    };

                    reader.readAsDataURL(files[0]);
                },
                statusBar : _editorHtml[1],
                preview   : true,
                lang      : {
                    'sidebar'    : '边栏',
                    'toc'        : '章节导航',
                    'release'    : '发布文档',
                    'history'    : '历史记录',
                    'htmlpaste'  : '粘贴HTML',
                    'preview-all': '全文预览'
                },
                tools     : {
                    sidebar      : sidebar,
                    toc          : toc,
                    release      : release,
                    history      : history,
                    htmlpaste    : htmlpaste,
                    more         : more,
                    save         : save,
                    'preview-all': previewAll
                },
                extensions: extensions
            };

            events.trigger('editor.before_init', options);

            $editor = editor(_textarea, options);

            $editor.$marked.setOption('book', state);

            $editor.$codemirror.on('change', function () {
                events.trigger('editor.change');
            });

            //监听浏览器关闭事件
            $(window).on('beforeunload', function () {
                if ($editor.isChanged()) {
                    return '确定取消编辑吗？';
                }
            });
        },
        getEditor   : function () {
            return $editor;
        },
        addExtension: function (ext) {
            extensions.push(ext);
        }
    };
});
define('home/book/editor/events', function () {
    return $({});
});
define('home/book/editor/index', function (require) {

    var events  = require('./events');
    var catalog = require('./catalog');
    var article = require('./article');
    var state   = require('./state');
    var editor  = require('./editor');
    var ui      = require('./ui');
    var backup  = require('./backup');
    var Summary = require('common/library/summary');

    var plugins;
    var settings;

    $.ajaxSetup({
        dataType: 'json',
        headers : {
            Authorization: "Bearer " + state.token
        }
    });

    $.support.cors = true;

    var preload = function (callback) {
        var len = plugins.length;

        if (len && $.isArray(plugins)) {
            var plugin_name = plugins.shift();
            require.async('document/plugins/' + plugin_name + '/index', function (plugin) {
                var assets = [];
                if (plugin) {

                    if (plugin.init) {
                        plugin.init(settings);
                    }

                    var blocks = plugin.blocks || {};
                    $.each(blocks, function (name, ext) {
                        editor.addExtension(ext);
                    });

                    if (plugin.editor) {

                        if (plugin.editor.js) {
                            assets = assets.concat(plugin.editor.js);
                        }

                        if (plugin.editor.css) {
                            assets = assets.concat(plugin.editor.css);
                        }

                        assets = $.map(assets, function (item) {
                            return 'document/plugins/' + plugin_name + '/' + plugin.editor.assets + '/' + item;
                        });

                        require.async(assets, function () {
                            preload(callback);
                        });
                    } else {
                        preload(callback);
                    }
                } else {
                    preload(callback);
                }
            })
        } else {
            callback()
        }
    };

    var checkImportStatus = function (callback) {
        switch (state.status) {
            case 2:
                $.ajax({
                    url    : '/book/import/status',
                    type   : 'get',
                    data   : {book_id: state.id},
                    success: function (data) {
                        if (data.status == 1) {
                            callback();
                        } else if (data.status == 2) {
                            setTimeout(function () {
                                checkImportStatus(callback);
                            }, 1000 * 6);
                        } else {
                            window.location.reload();
                        }
                    }
                });
                break;
            case 3:
                return false;
            default:
                callback();
        }
    };


    var start = function () {
        settings = {};

        checkImportStatus(function () {
            //获取目录
            $.get(state.api + '/content/SUMMARY.md').done(function (result) {
                settings.catalogHash = result.sha;
                settings.catalogData = Summary.parse(result.content);
            }).fail(function (data) {
                settings.catalogData = [];
                settings.catalogHash = '';
            }).always(function () {

                $.get(state.api + '/content/book.json').done(function (result) {
                    var config = {};
                    try {
                        config = JSON.parse(result.content);
                    } catch (e) {

                    }
                    settings.plugins       = config.plugins || [];
                    settings.pluginsConfig = config.pluginsConfig || {};
                }).fail(function () {
                    settings.plugins       = [];
                    settings.pluginsConfig = {};
                }).always(function () {
                    plugins = settings.plugins;
                    preload(function () {
                        events.trigger('init', settings);
                        editor.init();
                        backup.init();
                        article.init();
                        catalog.init(settings);
                        ui.init();

                        events.trigger('start');
                    });
                });


            });
        });
    };

    return {
        start: start
    };
});
define('home/book/editor/state', function () {
    var state = {};
    return state.update = function (dom) {
        var book = $(dom.find(".m-manual"));
        state.$book = book,
            state.id = book.data("id"),
            state.namespace = book.data('namespace'),
            state.name = book.data('name'),
            state.status = book.data('status'),
            state.ref = 'master',
            state.token = book.data('token'),
            state.api = Config.get('GIT_HOST') + '/repos/' + state.namespace + '/' + state.name
    }, state.update($), state;
});
define('home/book/editor/tools/history', function (require) {

    var state  = require('../state');
    var events = require('../events');

    //载入模版引擎
    var Template = require('common/extend/template');

    var formatDate = function (str) {
        var date = Date.parse(str);
        if (isNaN(date)) {
            date = Date.parse(str.replace(/-/g, "/").replace(/T/g, ' '));
        }

        var _date = new Date(date);
        return Util.friendlyDate(_date.getTime() / 1000);
    };

    Template.helper('formatDate', formatDate);

    var getArticleCommitAjax, getArticleHistoryAjax;

    var getArticleCommit = function (hash, callback) {
        $.dialog.loading('获取提交信息中...');
        getArticleCommitAjax && getArticleCommitAjax.abort();
        getArticleCommitAjax = $.ajax({
            url     : Config.get('GIT_HOST') + '/repos/' + state.namespace + '/' + state.name + '/commit/' + hash,
            type    : 'get',
            success : callback,
            complete: function () {
                $.dialog.get('loading').close();
            }
        });
    };

    //获取文章历史记录
    var getArticleHistory = function (path, offset, callback) {
        $.dialog.loading('获取历史记录中...');
        var data = {};
        if (path) {
            data.path = decodeURIComponent(path);
        }
        getArticleHistoryAjax && getArticleHistoryAjax.abort();
        getArticleHistoryAjax = $.ajax({
            url     : Config.get('GIT_HOST') + '/repos/' + state.namespace + '/' + state.name + '/commit',
            data    : data,
            type    : 'get',
            success : callback,
            complete: function () {
                $.dialog.get('loading').close();
            }
        });
    };

    var parsePatch = function (patch) {
        patch = patch.replace(/\n$/, '').split("\n");

        var html     = '<table class="file-lines"><tbody>';
        var matches  = false;
        var new_line = 0;
        var old_line = 0;

        for (var i = 0; i < patch.length; i++) {

            if (matches = patch[i].match(/^@@\s-(\d+)(?:,\d+)?\s\+(\d+)(?:,\d+)?\s@@/)) {
                new_line = matches[2];
                old_line = matches[1];
                html += '<tr><td class="skip" colspan="3">' + patch[i] + '</td></tr>';
            } else if (matches = patch[i].match(/^\+/)) {
                html += '<tr class="new_line">' +
                    '<td class="line-number old"></td>' +
                    '<td class="line-number new">' + new_line + '</td>' +
                    '<td class="source">' + Util.HTMLEnCode(patch[i].replace(/^\+/, '')) + '</td>' +
                    '</tr>';
                new_line++;
            } else if (matches = patch[i].match(/^-/)) {
                html += '<tr class="old_line">' +
                    '<td class="line-number old">' + old_line + '</td>' +
                    '<td class="line-number new"></td>' +
                    '<td class="source">' + Util.HTMLEnCode(patch[i].replace(/^-/, '')) + '</td>' +
                    '</tr>';
                old_line++;
            } else {
                html += '<tr>' +
                    '<td class="line-number old">' + old_line + '</td>' +
                    '<td class="line-number new">' + new_line + '</td>' +
                    '<td class="source">' + Util.HTMLEnCode(patch[i].replace(/^\s/, '')) + '</td>' +
                    '</tr>';
                old_line++;
                new_line++;
            }
        }

        html += '</tbody></table>';

        return html;

    };

    Template.helper('parsePatch', parsePatch);

    var commitTemp = '<li data-hash="<%=sha%>" class="commit"><div class="commit-avatar">'
        + '<img src="http://' + Config.get('APP_DOMAIN') + '/avatar?e=<%=committer.email%>">'
        + '</div>'
        + '<div class="commit-message"><%=message%></div>'
        + '<div class="commit-meta"><%=formatDate(committer.date)%> by <%=committer.name%></div></li>';

    var fileTemp = '<div class="history-details">'
        + '<div class="commit-header">'
        + '<p class="message">'
        + '<span class="icon icon-git-commit"></span> <%=commit.message%>'
        + '</p>'

        + '<p class="meta">'
        + '<%=files.length%> 个文件被修改, <%=formatDate(commit.author.date)%> by <%=commit.author.name%>'
        + '</p>'
        + '</div>'
        + '<div class="commit-files">'
        + '<%for (var i=0;i<files.length;i++){ %>'
        + '<div class="file">'
        + '<div class="file-header">'
        + '<span class="pull-right">'
        + '<span class="text-success">增加 <%=files[i].additions%> 行</span>, '
        + '<span class="text-danger">删除 <%=files[i].deletions%> 行</span>'
        + '</span>'
        + '<%if(files[i].status == "R"){%>'
        + '<%=files[i].previous_filename%> > <%=files[i].filename%>'
        + '<%}else{%>'
        + '<%=files[i].filename%>'
        + '<%}%>'
        + '</div>'
        + '<div class="file-patch">'
        + '<%if(files[i].patch){%>'
        + '<%=#parsePatch(files[i].patch)%>'
        + '<%}%>'
        + '</div>' + '</div>'
        + '<%}%>'
        + '</div>'
        + '</div>';

    var openDialog = function (path) {

        var _html = ''
            + '<div class="dialog-history">'
            + '<div class="history-commits">'
            + '<div class="history-commits-title">'
            + '修改记录'
            + '</div>'
            + '<div class="history-commits-inner"><ul class="commits-list"></ul></div>'
            + '</div>'
            + '<div class="history-commit-details">'
            + '</div>'
            + '</div>';

        _html = $(_html);

        var dialog = $.dialog(_html, {
            button  : [function () {
                var _self     = this;
                var cancelBtn = $('<label class="w-btn btn-default btn-m"><button class="btn-input">关闭</button></label>');
                cancelBtn.click(function () {
                    _self.close();
                });
                return cancelBtn;
            }],
            style   : 'think-dialog-form',
            drag    : false,
            close   : false,
            onCreate: function () {
                var _list   = $('.commits-list', _html);
                var _detail = $('.history-commit-details', _html);

                var currentHash = null;
                _list.on('click', 'li', function () {
                    $(this).siblings('.active').removeClass('active');
                    $(this).addClass('active');
                    var hash = $(this).data('hash');
                    if (hash == currentHash) {
                        return false;
                    }
                    getArticleCommit(hash, function (data) {
                        currentHash = hash;
                        _detail.html(Template.parseTemp(fileTemp, data));
                    });
                });

                var offset = 0;
                getArticleHistory(path, offset, function (data) {
                    $.each(data, function (k, v) {
                        _list.append(Template.parseTemp(commitTemp, v));
                    });
                    if (offset === 0) {
                        $('li', _list).first().click();
                    }
                })
            }
        });
    };

    return {
        init: function () {
            var $lastcommit = $("<a href='javascript:;' class='lastcommit'></a>");
            state.$book.find('.manual-editor-status .pull-right').append($lastcommit);
            events.on('article.open article.save', function () {
                getArticleHistory(state.articleId, 0, function (data) {
                    if (data.length > 0) {
                        var commit = data.shift();
                        $lastcommit.html('最后由 ' + commit.committer.name + ' 在 ' + formatDate(commit.committer.date) + ' 编辑');
                    } else {
                        $lastcommit.html('');
                    }
                });
            });
            $lastcommit.on('click', function () {
                openDialog(state.articleId);
            })

        },
        exec: function () {
            openDialog();
        }
    };
});
define('home/book/editor/tools/htmlpaste', function (require) {
    var state = require('../state');

    return {

        exec    : function () {
            var editor = this;

            //载入html转md插件
            require.async('component/to-markdown/dist/to-markdown', function () {

                var $text, $iframe, $html, doc, dialog,
                    ie  = navigator.userAgent.toLowerCase().indexOf('msie') > -1 && navigator.userAgent.toLowerCase().indexOf('opera') == -1,
                    downloadAjax;
                //拖动上传容器
                $text   = $("<p />").text('请使用快捷键(Ctrl+V)把内容粘贴到下面的方框里。');
                $iframe = $('<iframe frameborder="0" style="width:600px;height:260px;padding: 5px;"></iframe>');
                $html   = $("<div/>").addClass("thinkeditor-plugin-htmlpaste")
                    .append($text).append($iframe);

                //弹出图片上传层
                dialog = $.dialog.open($html, {
                    "title"   : '从HTML粘贴',
                    "onCancel": function () {

                    },
                    "onOk"    : function () {

                        var str  = doc.body.innerHTML;
                        str      = str.replace(/~/g, '~T');
                        str      = str.replace(/`/g, '~E');
                        str      = str.replace(/\$/g, '~D');
                        str      = toMarkdown(str, {gfm: true});
                        var cnum = 0, arrcode = [];
                        str      = str.replace(/~~~([\s\S]*?)~~~/g, function (all) {//code特殊处理
                            cnum++;
                            arrcode[cnum] = all;
                            return "[\tcodeplace_" + cnum + "\t]";
                        });
                        str      = str.replace(/(`+)([^\r]*?[^`])\1(?!`)/g, function (wholeMatch, m1, m2, m3) {//code特殊处理
                            cnum++;
                            arrcode[cnum] = wholeMatch;
                            return "[\tcodeplace_" + cnum + "\t]";
                        });
                        str      = str.replace(/<\/?.+?>/g, "");
                        str      = str.replace(/\n{2,}/g, "\n\n");

                        for (var i = 1; i <= cnum; i++) {
                            str = str.replace("[\tcodeplace_" + i + "\t]", function () {
                                return arrcode[i];
                            });
                        }

                        str = str.replace(/~D/g, '$$');
                        str = str.replace(/~E/g, '`');
                        str = str.replace(/~T/g, '~');

                        editor.insert(str);
                        dialog.close();
                    }
                });

                doc = $iframe[0].contentDocument || $iframe[0].contentWindow.document;
                if (!ie) {
                    doc.designMode = 'on';
                }
                doc.open();
                doc.write('<!doctype html><html style="height:100%;"><head><title>WordPaste</title></head>');
                doc.write('<body style="background-color:#ffffff;font-size:12px;padding:0px;margin:0px;height: 100%;">');
                if (!ie) {
                    doc.write('<br />');
                }
                doc.write('</body></html>');
                doc.close();
                if (ie) {
                    doc.body.contentEditable = 'true';
                }
                $iframe[0].contentWindow.focus();
            });
        },
        markdown: true
    };
});
define('home/book/editor/tools/more', function (require) {

    var state  = require('../state');
    var events = require('../events');

    var cover = require('./more/cover');

    return {
        exec: function () {
            this.toolMore.toggle();
            this.getToolbar('more').toggleClass('active');
        },
        init: function () {
            var _dropWrap              = $('<div class="tools-more"><ul class="w-menu">' +
                '<li class="menu-item"><a class="menu-link setting" href="javascript:;"><i class="icon icon-cog"></i> 文档配置</a></li>' +
                '<li class="menu-item"><a class="menu-link cover" href="javascript:;"><i class="icon icon-file-media"></i> 设置封面</a></li>' +
                '<li class="menu-item"><a class="menu-link css" href="javascript:;"><i class="icon icon-paintcan"></i> 样式设置</a></li>' +
                '</ul></div>'), editor = this;
            state.$book.append(_dropWrap);

            this.toolMore = _dropWrap;

            $('body').on('click', function () {
                editor.getToolbar('more').removeClass('active');
                _dropWrap.hide();
            });

            _dropWrap.on('click', '.cover', cover);

            _dropWrap.on('click', '.css', function () {

                if (editor.isChanged()) {
                    $.dialog.confirm('编辑区域有尚未保存的内容,确定要离开吗？', function (action) {
                        if (action == 1) {
                            events.trigger('catalog.select', {text: '样式表', id: 'style/website.css', ext: 'css'});
                        }
                    });
                } else {
                    events.trigger('catalog.select', {text: '样式表', id: 'style/website.css', ext: 'css'});
                }


            });
            _dropWrap.on('click', '.setting', function () {

                if (editor.isChanged()) {
                    $.dialog.confirm('编辑区域有尚未保存的内容,确定要离开吗？', function (action) {
                        if (action == 1) {
                            events.trigger('catalog.select', {text: '配置文件', id: 'book.json', ext: 'json'});
                        }
                    });
                } else {
                    events.trigger('catalog.select', {text: '配置文件', id: 'book.json', ext: 'json'});
                }

            });
        }
    };
});
define('home/book/editor/tools/more/cover', function (require) {
    //载入裁剪图片控件
    require('component/jcrop/css/jquery.Jcrop.css');
    require('component/jcrop/js/jquery.Jcrop');

    //载入模版引擎
    var Template = require('common/extend/template');

    var state = require('../../state');


    //动态常见模版

    var _html = [
        '<div class="m-cutimg-work">',
        '<div class="work-area">',
        '<div class="work-upload">',
        '<form class="w-form" id="uploadForm" method="post" enctype="multipart/form-data">',
        '<div class="upload-input">',
        '<input name="cover" class="file" type="file">',
        '<i class="icon icon-cloud-storage"></i>',
        '<label class="w-btn btn-success btn-l">',
        '<button type="button" class="btn-input">选择图片</button>',
        '</label>',
        '</div>',
        '<p class="upload-tip">图片大小不能超过5M，且只允许为png、gif、jpg格式图片</p>',
        '</form>',
        '</div>',
        '<div class="work-crop">',
        '<form class="w-form" id="saveCutForm" method="post" enctype="multipart/form-data" onsubmit="return false;">',
        '<div class="crop-image">',
        '<div class="image-inner">',
        '<img width="200">',
        '</div>',
        '</div>',
        '<div class="crop-util">',
        '<span class="util-left">',
        '<a class="reupload e-link"><i class="icon-undo2"></i>重新上传</a>',
        '</span>',
        '<span class="util-right">',
        '<label class="w-btn btn-success btn-m">',
        '<button class="savecut btn-input" type="submit">保存裁剪</button>',
        '</label>',
        '</span>',
        '</div>',
        '</form>',
        '</div>',
        '</div>',
        '</div>',
    ].join('');

    var cutWidth  = 173;
    var cutHeight = 231;

    var boxWidth  = 420;
    var boxHeight = 300;

    var cutImageDialog;
    return function () {

        if (!(window.File || window.FileReader || window.FileList || window.Blob)) {
            $.dialog.error('您的浏览器版本太低，请升级你的浏览器，推荐使用Chrome浏览器');
            return;
        }

        if (!cutImageDialog) {
            //打开裁剪对话框
            cutImageDialog = $.dialog('<div class="m-dialog-loading"><b class="loading-text">裁剪组件加载中...</b></div>', {
                title: '封面裁剪',
                cache: true
            });

            var wrapEle = $(Template.parseTemp(_html));

            cutImageDialog.content(wrapEle);
            cutImageDialog.offset(cutImageDialog._options.offset[0], cutImageDialog._options.offset[1]);

            var cropImageEle  = wrapEle.find('.crop-image img');
            var uploadFileEle = wrapEle.find('[type=file]');
            var uploadWorkEle = wrapEle.find('.work-upload');
            var uploadBtnEle  = uploadWorkEle.find('.w-btn');
            var saveCutEle    = wrapEle.find('.savecut');
            var reuploadEle   = wrapEle.find('.reupload');

            var cutImageData = {};

            var cropImage = $.Jcrop(cropImageEle, {
                aspectRatio: cutWidth / cutHeight,
                bgOpacity  : 0.5,
                boxWidth   : boxWidth,
                boxHeight  : boxHeight,
                onSelect   : function (c) {
                    cutImageData = c;
                },
                onRelease  : function () {
                    cutImageData = {
                        x: 0,
                        y: 0,
                        w: cutWidth,
                        h: cutHeight
                    };
                }
            });

            uploadFileEle.change(function () {
                var files = $(this).prop('files');
                if (files.length == 0) {
                    $.dialog.error('请选择文件');
                    return;
                }
                var reader = new FileReader();

                reader.onloadend = function () {
                    wrapEle.addClass('cutimg-enable');
                    cropImage.setImage(reader.result, function () {
                        var _ar = this.getOptions().aspectRatio,
                            _is = this.getBounds(),
                            _ms = Math.min(_is[0], _is[1]),
                            _hw = Math.floor(_ms * 0.8),
                            _hh = Math.floor(_hw / _ar),
                            _x  = (_is[0] - _hw) / 2,
                            _y  = (_is[1] - _hh) / 2;
                        cropImage.setSelect([_x, _y, _hw + _x, _hh + _y]);
                    });

                    uploadBtnEle.removeClass('btn-loading');
                    uploadBtnEle.find('button').text('选择图片');
                    uploadFileEle.removeClass('disabled');
                    uploadFileEle.show();
                };

                reader.readAsDataURL(files[0]);
            });
            reuploadEle.click(function () {
                uploadFileEle.val('');
                wrapEle.removeClass('cutimg-enable');
            });

            saveCutEle.click(function () {
                var canvas = $('<canvas width="' + cutWidth * 5 + '" height="' + cutHeight * 5 + '"></canvas>')[0],
                    ctx    = canvas.getContext('2d');

                ctx.drawImage(cropImageEle[0], cutImageData.x, cutImageData.y, cutImageData.w, cutImageData.h, 0, 0, cutWidth * 5, cutHeight * 5);

                var img = canvas.toDataURL();
                img     = img.split(',')[1];
                $.dialog.loading('图片上传中……');
                $.get(state.api + '/git/tree/master?recursive=1').done(function (result) {
                    var tree = result.tree;

                    var data = JSON.stringify({
                        base_tree: result.sha,
                        tree     : [{
                            path   : 'cover.jpg',
                            type   : 'blob',
                            mode   : '100644',
                            content: img
                        }]
                    });

                    $.ajax({
                        url        : state.api + '/git/tree',
                        type       : 'post',
                        contentType: 'application/json; charset=utf-8',
                        data       : data
                    }).done(function (data) {
                        $.get(state.api + '/git/ref/heads/master').done(function (result) {

                            $.post(state.api + '/git/commit', {
                                message: '设置封面',
                                tree   : data.sha,
                                parents: [result.object.sha]
                            }).done(function (result) {
                                $.ajax({
                                    url : state.api + '/git/ref/heads/master',
                                    type: 'put',
                                    data: {
                                        sha: result.sha
                                    }
                                }).done(function () {
                                    $.dialog.get('loading').close();
                                    $.dialog.success('设置成功');
                                    uploadFileEle.val('');
                                    wrapEle.removeClass('cutimg-enable');
                                    cutImageDialog.close();
                                });
                            });
                        })
                    })

                });

                return false;
            });

        } else {
            cutImageDialog.open();
        }

    }

});
define('home/book/editor/tools/previewAll', function (require) {

    var state = require('../state');

    return {
        "exec": function () {
            window.open('/book/' + state.namespace + '/' + state.name + '/preview');
        }
    }
});
define('home/book/editor/tools/release', function (require) {

    var events = require('../events');
    var state  = require('../state');

    //载入模版引擎
    var Template = require('common/extend/template');

    var formatDate = function (str) {
        var date = Date.parse(str);
        if (isNaN(date)) {
            date = Date.parse(str.replace(/-/g, "/").replace(/T/g, ' '));
        }

        var _date = new Date(date);
        return Util.friendlyDate(_date.getTime() / 1000);
    };

    Template.helper('formatDate', formatDate);

    var getCompareAjax, getReleaseInfoAjax;

    var getReleaseInfo = function (callback) {
        $.dialog.loading('获取发布信息中...');
        getReleaseInfoAjax && getReleaseInfoAjax.abort();
        getReleaseInfoAjax = $.ajax({
            url     : '/book/release/info',
            type    : 'get',
            data    : {'book_id': state.id},
            success : callback,
            complete: function () {
                $.dialog.get('loading').close();
            }
        });
    };

    var getCompare = function (hash, callback) {
        $.dialog.loading('获取对比信息中...');
        getCompareAjax && getCompareAjax.abort();
        getCompareAjax = $.ajax({
            url     : Config.get('GIT_HOST') + '/repos/' + state.namespace + '/' + state.name + '/compare/' + hash + '...master?ignore_base=1',
            type    : 'get',
            success : callback,
            complete: function () {
                $.dialog.get('loading').close();
            }
        });
    };

    var fileTemp = '<div class="history-details">'
        + '<div class="commit-header">'
        + '<p class="meta">'
        + '<%=files.length%> 个文件被修改'
        + '</p>'
        + '</div>'
        + '<div class="commit-files" style="top: 35px;">'
        + '<%for (var i=0;i<files.length;i++){ %>'
        + '<div class="file">'
        + '<div class="file-header">'
        + '<span class="pull-right">'
        + '<span class="text-success">增加 <%=files[i].additions%> 行</span>, '
        + '<span class="text-danger">删除 <%=files[i].deletions%> 行</span>'
        + '</span>'
        + '<%if(files[i].status == "R"){%>'
        + '<%=files[i].previous_filename%> > <%=files[i].filename%>'
        + '<%}else{%>'
        + '<%=files[i].filename%>'
        + '<%}%>'
        + '</div>'
        + '<div class="file-patch">'
        + '<%if(files[i].patch){%>'
        + '<%=#parsePatch(files[i].patch)%>'
        + '<%}%>'
        + '</div>' + '</div>'
        + '<%}%>'
        + '</div>'
        + '</div>';

    var okBtn = $('<label class="w-btn btn-success btn-m btn-loading"><button disabled="disabled" class="btn-input">加载中...</button></label>');

    return {
        exec : function () {
            var _html = ''
                + '<div class="dialog-history" style="padding-left: 0">'
                + '<div class="history-commit-details">'
                + '</div>'
                + '</div>';

            _html = $(_html);

            var dialog = $.dialog(_html, {
                button  : [function () {
                    var _self = this;

                    okBtn.click(function () {
                        var input = okBtn.find('.btn-input');

                        okBtn.addClass('btn-loading');
                        input.prop('disabled', true);
                        input.text('发布中...');


                        $.ajax({
                            url    : '/book/release/index',
                            type   : 'post',
                            data   : {
                                book_id: state.id
                            },
                            success: function (result) {
                                if (result.status == 1) {
                                    $.dialog.success('已添加进发布队列，请稍后……');
                                    _self.close();
                                } else {
                                    okBtn.removeClass('btn-loading');
                                    input.prop('disabled', false);
                                    input.text('发布');
                                    $.dialog.error(result.info);
                                }
                            }
                        });

                    });
                    return okBtn;
                }, function () {
                    var _self     = this;
                    var cancelBtn = $('<label class="w-btn btn-default btn-m"><button class="btn-input">关闭</button></label>');
                    cancelBtn.click(function () {
                        _self.close();
                    });
                    return cancelBtn;
                }],
                style   : 'think-dialog',
                drag    : false,
                close   : false,
                onCreate: function () {
                    var _detail = $('.history-commit-details', _html);

                    getReleaseInfo(function (data) {
                        var input = okBtn.find('.btn-input');
                        if (data.info.status == 1) {
                            okBtn.removeClass('btn-loading');
                            input.prop('disabled', false);
                            input.text('发布');
                        } else {
                            input.text('发布中...');
                        }

                        var commit_id = data.info.commit_id;
                        getCompare(commit_id, function (data) {
                            _detail.html(Template.parseTemp(fileTemp, data));
                        });

                    });


                }
            });
        },
        init : function () {

        },
        class: 'success'
    };
});
define('home/book/editor/tools/save', function (require) {

    var events = require('../events');

    return {
        bindKey: {win: 'Ctrl-S', mac: 'Cmd-S'},
        exec   : function () {
            if (this.isChanged()) {
                events.trigger('editor.save');
            }
        },
        init   : function () {
            var editor = this;
            this.getToolbar('save').attr('disabled', 'disabled').removeClass('warning');
            this.$codemirror.on('change', function () {
                if (editor.isChanged()) {
                    editor.getToolbar('save').removeAttr('disabled', 'disabled').addClass('warning');
                } else {
                    editor.getToolbar('save').attr('disabled', 'disabled').removeClass('warning');
                }
            });
        }
    };
});
define('home/book/editor/tools/sidebar', function (require) {

    var state = require('../state');

    return {
        exec: function () {
            if (state.$book.hasClass('manual-fullscreen')) {
                state.$book.removeClass('manual-fullscreen');
                this.getToolbar('sidebar').addClass('active');
            } else {
                state.$book.addClass('manual-fullscreen');
                this.getToolbar('sidebar').removeClass('active');
            }
            this.$codemirror.refresh();
        },
        init: function () {
            this.getToolbar('sidebar').addClass('active');
        }
    };
});
define('home/book/editor/tools/toc', function () {
    return {
        exec    : function () {
            this.insert('\n[TOC]\n');
        },
        init    : function () {
            var _editor = this;
            //TOC 跳转
            this.preview.on('click', 'ul.markdown-toc-list a', function (e) {
                e.stopImmediatePropagation();
                var id = $(this).attr('href');
                _editor.preview.animate({scrollTop: $(id).offset().top - 60}, 500);
                return false;
            });
        },
        markdown: true
    };
});
define('home/book/editor/ui', function (require) {

    var events = require('./events');
    var state = require('./state');

    return {
        init: function () {
            events.on('start', function () {
                state.$book.show();
                $('.think-loading').remove();
            });

            events.on('article.open', function (event, data) {
                state.$book.find('.manual-editor-status .filename').text(decodeURIComponent(data.node.id));
            });

            var emptyEle;
            events.on('catalog.empty', function (event, status) {
                if (status) {
                    var _html = '';
                    _html += '<div class="manual-empty-message">';
                    _html += '<div class="inner">';
                    _html += '<h3>文档还没有目录，赶紧添加吧！</h3>';
                    _html += '</div>';
                    _html += '</div>';
                    emptyEle = $(_html);
                    state.$book.find('.manual-body').append(emptyEle);
                    state.$book.addClass('manual-empty');
                } else {
                    state.$book.removeClass('manual-empty');
                    if (emptyEle) {
                        emptyEle.remove();
                        emptyEle = null;
                    }
                }
            });
        }
    };
});
define('home/book/history/detail', function (require, exports, module) {

    Class({

        resetHistoryEle: $('#resetHistory'),

        initial: function () {
            this.resetHistoryEle.click(function () {
                $.dialog.confirm('确定文档回滚至此版本吗？回滚后，该版本之后的所有的修改记录将丢失。', function (action) {
                    if (action == 1) {
                        $.dialog.loading('文档回滚中...');
                        $.ajax({
                            url    : Config.get('resetUrl'),
                            data   : {
                                book_id: Config.get('currentManual'),
                                hash   : Config.get('hash')
                            },
                            context: this,
                            type   : 'post',
                            success: function (data) {
                                if (data.status == 1) {
                                    $.dialog.success('回滚成功');
                                } else {
                                    $.dialog.error(data.info);
                                }
                                $.dialog.get('loading').close();
                            }
                        });
                    }
                });
            });
        }
    });

})
;
define('home/book/history/index', function (require, exports, module) {

    require('component/infinite-ajax-scroll/dist/jquery-ias.min');

    Class({

        initial: function () {
            var ias = jQuery.ias({
                container : '.m-history-list',
                item      : '.m-history-item',
                pagination: '.m-paging',
                next      : '.m-paging .next'
            });
            ias.extension(new IASSpinnerExtension());            // shows a spinner (a.k.a. loader)
            ias.extension(new IASTriggerExtension({offset: 3, text: '点击加载更多'})); // shows a trigger after page 3
            ias.extension(new IASNoneLeftExtension({
                text: '没有更多了'      // override text when no pages left
            }));


            $('#manualGc').click(function () {
                $.dialog.loading('垃圾回收中...');
                $.ajax({
                    url     : '/book/history/gc',
                    data    : {book_id: Config.get('manualId')},
                    type    : 'post',
                    success : function (data) {
                        if (data.status) {
                            $.dialog.success('垃圾回收完成',function(){
                                location.reload();
                            });
                        } else {
                            $.dialog.error(data.info);
                        }
                    },
                    complete: function () {
                        $.dialog.get('loading').close();
                    }
                })
                return false;
            });

        }
    });
});
define('home/book/index', function (require, exports, module) {

    require('component/semantic-ui-tab/tab.min');
    require('component/infinite-ajax-scroll/dist/jquery-ias.min');
    //载入评论模块
    var Comment = require('common/module/comment');
    var Sharing = require('common/module/sharing');
    var Order = require('common/module/order');
    return Class({
        manual               : $('.reader-main'),
        //记录手册ID
        manualId             : Config.get('bookId'),
        //下载手册元素
        manualDownloadEle    : $('#manualDownload'),
        //分享文章元素
        shareArticleEle      : $('#shareArticle'),
        //文章标题元素
        articleTitleEle      : $('#articleTitle'),
        //文章内容元素
        articleDescriptionEle: $('#articleDescription'),
        //手册关注元素
        manualFollowEle      : $('#manualFollow'),
        //手册关注数
        manualFollowNumber   : $('#manualFollowNumber'),
        //记录关注总数
        followTotal          : Config.get('followTotal'),
        //绑定概要按钮
        manualSummary        : $('#entrance_summary'),
        //绑定目录按钮
        manualDirectory      : $('#entrance_directory'),
        //绑定评论按钮
        manualComment        : $('#entrance_comment'),
        //文档内容容器
        manualContainer      : $('.ent-wrap'),
        //绑定评论模块
        commentEle           : $('#articleComment'),
        //绑定打赏按钮
        rewardBtn            : $('#reward-btn'),
        //绑定购买按钮
        buyBookBtn            : $('#buyBook'),

        userFollowManual    : [],
        initial             : function () {
            var _self = this;

            // 打赏按钮
            _self.rewardBtn.click(function () {

                new Order({
                    title    : '欢迎打赏',
                    type     : 'RewardProduct',
                    infoTpl  : [
                        '<div class="reward-item">',
                        '<img class="user-img"src="' + Config.get('userAvatar') + '">',
                        '<p class="reward-msg">喜欢是赞, 爱是打赏</p>',
                        '<label class="reward-text">',
                        '<span>打赏金额</span>',
                        '<span class="num">¥</span>',
                        '<input class="reward-input" type="number" min="1" max="200" style="width:60%" name="price" value="' + (Config.get('defaultPrice') / 100).toFixed(2) + '" />',
                        '</label>',
                        '</div>'
                    ].join(''),
                    coin     : Config.get('userCoin'),
                    style    : 'reward-form',
                    price    : function () {
                        return parseInt(this.wrapEle.find('[name=price]').val() * 100);
                    },
                    data     : function () {
                        return {
                            price  : parseInt(this.wrapEle.find('[name=price]').val() * 100),
                            user_id: Config.get('bookUid'),
                            book_id: Config.get('bookId')
                        };
                    },
                    onInit   : function () {
                        var self = this;
                        // 设置价格
                        this.wrapEle.find('[name=price]').keyup(function () {
                            self.freshPrice();
                        });
                        this.wrapEle.find('[name=price]').change(function () {
                            self.freshPrice();
                        });
                    },
                    onSuccess: function () {
                        location.reload();
                    }
                });

            });
            
            // 购买按钮
            _self.buyBookBtn.click(function () {
                if (!Config.get('isLogin')) {
                    $.dialog.error('请登录后再购买', {time: 5000});
                    return;
                }
                new Order({
                    title    : '购买 ' + Config.get('bookTitle'),
                    type     : 'BookProduct',
                    infoTpl  : [
                        '<div class="book-info">',
                        '<img class="user-img"src="' + Config.get('bookPicUrl') + '">',
                        '<p class="book-title">' +  Config.get('bookTitle') + '</p>',
                        '</div>'
                    ].join(''),
                    coin     : Config.get('userCoin'),
                    style    : 'bookproduct-form',
                    price    : parseInt(Config.get('bookPrice')),
                    data     : function () {
                        return {
                            price  : parseInt(Config.get('bookPrice')),
                            book_id: Config.get('bookId')
                        };
                    },
                    onInit   : function () {
                        var self = this;
                        // 设置价格
                        this.wrapEle.find('[name=price]').keyup(function () {
                            self.freshPrice();
                        });
                        this.wrapEle.find('[name=price]').change(function () {
                            self.freshPrice();
                        });
                    },
                    onSuccess: function () {
                        location.reload();
                    }
                });

            });

            // 获取打赏记录
            this.getReward();

            $('.tab-navg .navg-item').tab({
                selector: {
                    tabs: '.tab-content'
                }
            });

            if (Config.get('isDownload')) {
                this.manualDownloadEle.find('.menu-link').click(function () {
                    _self.downloadManual($(this).data('type'));
                });
                var kindle_loading = false;
                $("#manualKindle").click(function () {
                    if (!kindle_loading) {
                        kindle_loading = true;
                        $.dialog.loading("请稍后……");
                        $.ajax({
                            url     : Config.get('kindleUrl'),
                            data    : {book_id: _self.manualId},
                            type    : 'post',
                            success : function (data) {
                                if (data.status == 1) {
                                    $.dialog.success(data.info);
                                } else {
                                    $.dialog.error(data.info, {time: 5000});
                                }
                            },
                            complete: function () {
                                $.dialog.get('loading').close();
                                kindle_loading = false;
                            }
                        })
                    }
                });

            }
            //分享文章
            new Sharing({
                cover  : Config.get('sharePicUrl'),
                url    : location.href,
                title  : Util.HTMLEnCode(_self.articleTitleEle.text()),
                summary: Util.HTMLEnCode(Util.substr(_self.articleDescriptionEle.text(), 0, 200))
            });

            //绑定手册关注操作
            this.manualFollowEle.click(function () {
                _self.inUserFollowManual(_self.manualId) >= 0 ? _self.cancelFollowManual() : _self.addFollowManual();

            });
            //加载评论
            if (Config.get('isComment')) {
                _self.comment = new Comment({
                    wrapEle     : _self.commentEle,
                    postParam   : {
                        book_id: _self.manualId,
                        doc_id : 0
                    },
                    delParam    : {
                        book_id: _self.manualId,
                        doc_id : 0
                    },
                    disabledPost: !Config.get('isLogin'),
                    votePath    : Config.get('commentVotePath'),
                    onePath     : Config.get('commentOnePath'),
                    listPath    : Config.get('commentListPath'),
                    delPath     : Config.get('commentDelPath'),
                    addPath     : Config.get('commentAddPath')
                });

                var hash = location.hash.substr(1);

                var _hashSplit = null;
                if (hash && hash.indexOf('-') >= 0) {
                    _hashSplit = hash.split('-');
                }
                if (_hashSplit && _hashSplit[0] == 'comment' && _hashSplit[1]) {
                    this.comment.loadOne({
                        id     : _hashSplit[1],
                        doc_id : 0,
                        book_id: this.manualId
                    }, function (data) {
                        this.assignList({
                            doc_id : 0,
                            book_id: _self.manualId
                        }, function () {
                            if (data.status) {
                                this.addItem(data.data, true, false);
                            }
                        });
                        Util.scrollTop(this.listEle, -120);
                    });

                } else {
                    //加载评论
                    this.comment.assignList({
                        doc_id : 0,
                        book_id: _self.manualId
                    });
                }
            }
            (function () {
                loadCallback(function () {
                    //检测用户关注手册状态
                    _self.findUserFollowManual();
                });
                function loadCallback(callback) {
                    _self.getUserFollowManual(function () {
                        $.isFunction(callback) && callback();
                    });
                }
            }).call(this);
        },
        //下载手册
        downloadManual      : function (type) {
            var ele = this.manualDownloadEle.find('.drop-show');
            ele.click();
            var self = this;
            $.ajax({
                url    : Config.get('getDownloadUrl'),
                data   : {book_id: this.manualId, type: type},
                type   : 'post',
                success: function (data) {
                    if (data.status == 1) {
                        window.location.href = data.url;
                        ele.removeClass('loading');
                    } else {
                        $.dialog.error(data.info);
                        ele.removeClass('loading');
                    }
                }
            })
        },
        //增加关注手册
        addFollowManual     : function () {
            var self = this;
            $.ajax({
                url     : Config.get('confirmFollowUrl'),
                data    : {book_id: self.manualId},
                type    : 'post',
                success : function (data) {
                    if (data.status) {
                        self.manualFollowNumber.text(parseInt(self.manualFollowNumber.text()) + 1);
                        self.userFollowManual.push(self.manualId);
                        self.manualFollowEle.find('.number').text(++self.followTotal);
                        self.findUserFollowManual();
                        $.dialog.success(data.info);
                    } else {
                        $.dialog.error(data.info);
                    }
                },
                complete: function () {
                    self.manualFollowEle.removeClass('loading');
                }
            })
        },
        //取消关注手册
        cancelFollowManual  : function () {
            var self = this;
            $.ajax({
                url     : Config.get('cancelFollowUrl'),
                data    : {book_id: self.manualId},
                type    : 'post',
                success : function (data) {
                    if (data.status) {
                        self.manualFollowNumber.text(parseInt(self.manualFollowNumber.text()) - 1);
                        var _index = self.inUserFollowManual();
                        self.manualFollowEle.find('.number').text(--self.followTotal);
                        self.userFollowManual.splice(_index, 1);
                        self.findUserFollowManual();
                        $.dialog.success(data.info);
                    } else {
                        $.dialog.error(data.info);
                    }
                },
                complete: function () {
                    self.manualFollowEle.removeClass('loading');
                }
            })
        },
        //获取用户关注手册列表
        getUserFollowManual : function (callback) {
            var self = this;
            $.ajax({
                url    : Config.get('getFollowUrl'),
                type   : 'post',
                success: function (data) {
                    if (data.status) {
                        self.userFollowManual = data.data;
                    }
                    $.isFunction(callback) && callback.call(self);
                }
            });
        },
        findUserFollowManual: function () {
            if (Config.get('memberIsAuthor')) {
                this.manualFollowEle.addClass('data-disabled').find('.text').text('关注数');
            } else {
                var _index = this.inUserFollowManual();
                if (_index >= 0) {
                    this.manualFollowEle.removeClass('btn-success').addClass('btn-default');
                    this.manualFollowEle.find('.text').text('取消关注');
                } else {
                    this.manualFollowEle.removeClass('btn-default').addClass('btn-success');
                    this.manualFollowEle.find('.text').text('关注');
                }
            }
        },
        //获取当前手册在用户关注手册列表中的位置
        inUserFollowManual  : function () {
            for (var i = 0; i < this.userFollowManual.length; i++) {
                if (this.manualId == this.userFollowManual[i]) {
                    return i;
                }
            }
            return -1;
        },
        // 获取打赏记录
        getReward           : function () {
            var bookId = this.manualId;
            var isLoad = false;
            $('[data-tab=reward]').click(function () {
                if (isLoad) {
                    isLoad = true;
                    return;
                }
                isLoad = true;
                $('#articleReward').load('/reward?book_id=' + bookId, function () {
                    $.ias({
                        container : '.m-reward-list',
                        item      : '.m-reward-item',
                        pagination: '.m-paging',
                        next      : '.m-paging .next'
                    });
                });
            });
        }
    });
});
define('home/book/member/index', function (require, exports, module) {

    require('component/select2/dist/css/select2.min.css');
    require('component/select2/dist/js/select2.full.min');
    //载入公共操作
    return Class({
        //记录选择成员元素
        selectMemberEle: $('#selectMember'),
        //当前手册
        currentManualId: Config.get('currentManual'),
        //记录成员列表元素
        memberListEle  : $('#memberList'),
        //最多成元素
        maxMemberNum   : Config.get('maxSelectNumber'),
        initial        : function () {
            var self = this;

            //绑定添加成员操作
            this.selectMemberEle.click(function () {
                var $html, dialog;
                $html = $("<div/>").addClass("m-manual-add").html('' +
                    '<form class="w-form form-horizon dialog-form" method="post">' +
                    '<div class="form-item">' +
                    '<span class="form-label">用户</span>' +
                    '<div class="form-target">' +
                    '<label class="w-select select-m">' +
                    '<select class="select-input" name="user" multiple="multiple"></select>' +
                    '</label>' +
                    '</div>' +
                    '</div>' +
                    '<div class="form-item">' +
                    '<span class="form-label">角色</span>' +
                    '<div class="form-target">' +
                    '<label class="w-select select-m">' +
                    '<select class="select-input" name="role"></select>' +
                    '</label>' +
                    '</div>' +
                    '</div>' +
                    '</form>');

                //弹出图片上传层
                dialog = $.dialog.form($html, {
                    "title" : "添加成员",
                    onCreate: function () {
                        var _form = this.bodyElement.find('form');
                        _form.append($('<input type="hidden" name="book_id" value="' + self.currentManualId + '">'));
                        _form.attr('action', Config.get('createUserUrl'));

                        _form.find('[name="role"]').append(function () {
                            var options = "";
                            $.each(Config.get('accessRoles'), function (k, v) {
                                options += "<option value='" + v + "'>" + k + "</option>"
                            });
                            return options;
                        });

                        _form.find('[name="user"]').select2({
                            minimumInputLength: 1,
                            placeholder       : '输入用户名或者邮箱',
                            width             : 232,
                            multiple          : true,
                            ajax              : {
                                url           : '/autocomplete/user',
                                data          : function (params) {
                                    return {search: params.term}
                                },
                                processResults: function (data) {
                                    return {
                                        results: data
                                    };
                                }
                            },
                            templateResult    : function (state) {
                                if (!state.id) {
                                    return state.text;
                                }
                                return $(
                                    '<div style="line-height: 20px;white-space:nowrap;overflow: hidden;text-overflow: ellipsis; font-weight: bold;"><img style="border-radius: 3px;" src="' + state.avatar + '" width="20" height="20" /> ' + state.username + ' <span style="font-weight: normal;">' + state.name + '</span></div>'
                                );
                            }
                            ,
                            templateSelection : function (state) {
                                return state.name || state.text;
                            }
                        });
                        _form.submitForm({
                            onBefore: function (options) {
                                var user = _form.find('[name="user"]').val();
                                if (!user) {
                                    $.dialog.error('请选择用户');
                                    return false;
                                }
                                options.data.user = user;
                            },
                            onAfter : function (data, options) {
                                if (data.status) {
                                    window.location.reload();
                                } else {
                                    $.dialog.error(data.info);
                                }
                            }
                        });
                    }
                });
            });
            //绑定删除成员操作
            this.memberListEle.delegate('.delete', 'click', function () {
                var _id = $(this).closest('.m-member-item').data('id'), $this = $(this);
                $.dialog.confirm('确定要删除该用户吗？', function (action) {
                    if (action == 1) {
                        $.ajax({
                            url    : Config.get('delMemberPath'),
                            data   : {id: _id, book_id: self.currentManualId},
                            context: this,
                            type   : 'post',
                            success: function (data) {
                                if (data.status) {
                                    $this.closest('.m-member-item').remove();
                                } else {
                                    $.dialog.error(data.info);
                                }
                            }
                        });
                    }
                });
            });
            this.memberListEle.delegate('.leave', 'click', function () {
                $.dialog.confirm('确定要退出吗？', function (action) {
                    if (action == 1) {
                        $.ajax({
                            url    : Config.get('leaveUserUrl'),
                            data   : {book_id: self.currentManualId},
                            context: this,
                            type   : 'post',
                            success: function (data) {
                                if (data.status) {
                                    window.location.href = '/user/book';
                                } else {
                                    $.dialog.error(data.info);
                                }
                            }
                        });
                    }
                });
            });
            //绑定设置成员角色操作
            this.memberListEle.delegate('.role>select', 'change', function () {
                var _id = $(this).closest('.m-member-item').data('id');
                $.ajax({
                    url    : Config.get('setMemberRolePath'),
                    data   : {id: _id, role: $(this).val(), book_id: self.currentManualId},
                    context: this,
                    type   : 'post',
                    success: function (data) {
                        if (data.status) {
                            $.dialog.success(data.info);
                        } else {
                            $.dialog.error(data.info);
                        }
                    }
                });
            });
        },
    });
})

define('home/book/price', function (require, exports, module) {

    //载入提交表单插件
    require('common/extend/validator/validator');
    //载入表单提交插件
    require('component/jquery.form');

    //载入树插件
    require('component/jstree/dist/jstree.js');
    require('component/jstree/dist/themes/default/style.min.css');

    var config = require('common/module/config');

    return Class({

        initial: function () {
            var self = this;

            var book_id = config.get('bookId');

            var setPreviewUrl = config.get('setPreviewUrl');

            //绑定提交登录表单操作
            $('#manualUpdatePriceForm').submitForm({
                autoValidate: false,
                onAfter     : function (data, options) {
                    if (data.status) {
                        $.dialog.success(data.info, function () {
                            location.reload();
                        });
                    } else {
                        var _errorInfo = [];
                        if ($.isPlainObject(data.info)) {
                            for (var i in data.info) {
                                _errorInfo.push(data.info[i]);
                            }
                            _errorInfo = _errorInfo.join('<br/>');
                        } else {
                            _errorInfo = data.info;
                        }
                        $.dialog.error(_errorInfo);
                    }
                }
            });


            $('.btn-shelve-up').on('click', function () {
                $.post($(this).data('url'), {
                    book_id: book_id,
                    shelve : 1
                }, function (data) {
                    $.dialog.success(data.info, function () {
                        location.reload();
                    });
                });
            });
            $('.btn-shelve-down').on('click', function () {
                $.post($(this).data('url'), {
                    book_id: book_id,
                    shelve : 2
                }, function (data) {
                    $.dialog.success(data.info, function () {
                        location.reload();
                    });
                });
            });


            var summary = config.get('summary');
            if (summary) {

                var summayData = [];

                $.each(summary, function (k, v) {

                    summayData.push({
                        id    : v.id,
                        text  : v.title,
                        icon  : false,
                        state : {
                            selected: v.is_preview == 1
                        },
                        parent: v.pid == 0 ? '#' : v.pid
                    });

                });

                var summaryTree = $('#summary-container').jstree({
                    core    : {
                        check_callback: true,
                        data          : summayData,
                        force_text    : true
                    },
                    plugins : ['checkbox'],
                    checkbox: {
                        keep_selected_style: false,
                        three_state        : false
                    }
                }).jstree();

                $('#summary-container').bind('select_node.jstree', function (event, data) {

                    $.post(setPreviewUrl, {
                        book_id   : book_id,
                        id        : data.node.id,
                        is_preview: 1
                    }, function (result) {
                        // console.log(result);
                    });

                });

                $('#summary-container').bind('deselect_node.jstree', function (event, data) {

                    $.post(setPreviewUrl, {
                        book_id   : book_id,
                        id        : data.node.id,
                        is_preview: 0
                    }, function (result) {
                        // console.log(result);
                    });
                });
            }

        }
    });
});

define('home/book/update', function (require, exports, module) {

    //载入创建标签组件
    var TagCreate = require('common/module/tagCreate');
    //载入提交表单插件
    require('common/extend/validator/validator');
    //载入表单提交插件
    require('component/jquery.form');
    return Class({
        //手册创建表单元素
        manualUpdateFormEle: $('#manualUpdateForm'),
        //手册删除元素
        manualDeleteEle    : $('#manualDelete'),
        //手册标签容器元素
        manualTagEle       : $('#manualTag'),
        //记录当前手册ID
        manualId           : Config.get('manualId'),
        initial            : function () {
            var self = this;

            //绑定创建标签组件
            this.createTag = new TagCreate({
                appendEle : this.manualTagEle,
                maxNumber : 10,
                hiddenName: 'tags',
                data      : Config.get('createdTags'),
                onRepeat  : function (item, text) {
                    $.dialog.error(text + '标签已创建');
                },
                onMaxLimit: function (max) {
                    $.dialog.error('最多允许创建' + max + '个标签');
                }
            });
            //绑定提交登录表单操作
            this.manualUpdateFormEle.submitForm({
                autoValidate: false,
                onAfter     : function (data, options) {
                    if (data.status) {
                        $.dialog.success(data.info, function () {
                            location.reload();
                        });
                    } else {
                        var _errorInfo = [];
                        if ($.isPlainObject(data.info)) {
                            for (var i in data.info) {
                                _errorInfo.push(data.info[i]);
                            }
                            _errorInfo = _errorInfo.join('<br/>');
                        } else {
                            _errorInfo = data.info;
                        }
                        $.dialog.error(_errorInfo);
                    }
                }
            });

            //绑定删除操作
            this.manualDeleteEle.click(function () {
                var $html = $("<div/>").html('<div class="w-alert alert-danger">' +
                    '该操作 <strong>不可逆</strong> ,将会删除该文档的所有信息,请确认' +
                    '</div>' +
                    '<form class="w-form" method="post">' +
                    '<div class="form-item">' +
                    '<span class="form-label">请输入文档标识以确认</span>' +
                    '<div class="form-target">' +
                    '<label class="w-text text-m text-full">' +
                    '<input type="text" name="name" class="text-input" />' +
                    '</label>' +
                    '</div>' +
                    '</div>' +
                    '</form>');

                $.dialog.open($html, {
                    "title": "删除文档",
                    onOk   : function () {
                        var name = $html.find('input[name="name"]').val();
                        if (!name || name !== Config.get('bookName')) {
                            $.dialog.error("请输入正确的文档标识");
                        } else {
                            $.ajax({
                                url    : Config.get('delUrl'),
                                data   : {book_id: Config.get('manualId')},
                                type   : 'post',
                                success: function (data) {
                                    if (data.status) {
                                        location.href = data.url;
                                    } else {
                                        $.dialog.error(data.info);
                                    }
                                }
                            })
                        }
                    }
                });
                return false;
            });

            $('#manualOpen').click(function () {
                $.dialog.confirm('确定要将文档转为公开文档吗', function (action) {
                    if (action == 1) {
                        $.dialog.loading('请稍后...');
                        $.ajax({
                            url     : '/book/setting/open',
                            data    : {book_id: Config.get('manualId')},
                            type    : 'post',
                            success : function (data) {
                                if (data.status) {
                                    $.dialog.success('转换完成', function () {
                                        window.location.reload();
                                    });
                                } else {
                                    $.dialog.error(data.info);
                                }
                            },
                            complete: function () {
                                $.dialog.get('loading').close();
                            }
                        })
                    }
                });
                return false;
            });
            $('#manualClose').click(function () {
                $.dialog.confirm('确定要将文档转为私有文档吗', function (action) {
                    if (action == 1) {
                        $.dialog.loading('请稍后...');
                        $.ajax({
                            url     : '/book/setting/close',
                            data    : {book_id: Config.get('manualId')},
                            type    : 'post',
                            success : function (data) {
                                if (data.status) {
                                    $.dialog.success('转换完成', function () {
                                        window.location.reload();
                                    });
                                } else {
                                    $.dialog.error(data.info);
                                }
                            },
                            complete: function () {
                                $.dialog.get('loading').close();
                            }
                        })
                    }
                });
                return false;
            });

            //绑定删除操作
            $('#manualTransfer').click(function () {

                var $html = $("<div/>").html('<div class="w-alert alert-warning">' +
                    '该操作 <strong>不可逆</strong> ,该文档的所有权将会转移给所选空间' +
                    '</div>' +
                    '<form class="w-form dialog-form" method="post" action="/book/setting/transfer">' +
                    '<input type="hidden" name="book_id" value="' + Config.get('manualId') + '" />' +
                    '<div class="form-item">' +
                    '<span class="form-label">请输入要转让的用户名或者团队标识</span>' +
                    '<div class="form-target">' +
                    '<label class="w-text text-m text-full">' +
                    '<input type="text" name="namespace" class="text-input" />' +
                    '</label>' +
                    '</div>' +
                    '</div>' +
                    '</form>');

                $.dialog.form($html, {
                    "title" : "转让文档",
                    onCreate: function () {
                        var _form = this.bodyElement.find('form');
                        _form.submitForm({
                            onAfter: function (data, options) {
                                if (data.status) {
                                    location.href = data.url;
                                } else {
                                    $.dialog.error(data.info);
                                }
                            }
                        });
                    }
                });
                return false;
            });
        }
    });
});

define('home/compatible', function(require, exports, module){
    Class({
        initial: function(){
            var self = this;
            if(!this.hasPlaceholderSupport()){
                this.placeholder($('[placeholder]'));
            }
            //监听DOM上的兼容事件
            $(document).on('onCompatible', function(event, name, element){
                if(name == 'placeholder' && element && !self.hasPlaceholderSupport()){
                    self.placeholder(element);
                }
            });
        },
        placeholder: function(element){
            require.async('component/jquery.placeholder', function(){
                element.placeholder();
            });
        },
        hasPlaceholderSupport: function(){
            var input = document.createElement("input");
            return "placeholder" in input;
        }
    });
});

define('home/enterprise/centre/create', function (require, exports, module) {
    //载入提交表单插件
    require('common/extend/validator/validator');
    //载入表单提交插件
    require('component/jquery.form');
    return Class({

        //手册创建表单元素
        formEle: $('#createCentreForm'),

        initial: function () {
            var self = this;
            //绑定提交登录表单操作
            this.formEle.submitForm({
                autoValidate: false,
                onAfter     : function (data) {
                    if (data.status) {
                        $.dialog.success(data.info, function () {
                            location.reload();
                        });
                    } else {
                        $.dialog.error(data.info);
                    }
                }
            });
        }
    });
});

define('home/enterprise/centre/update', function (require, exports, module) {
    require('component/select2/dist/css/select2.css');
    require('component/select2/dist/js/select2.full.min');
    require('component/Sortable/jquery.fn.sortable.min');
    //载入上传组件
    require('component/webuploader/css/webuploader.css');
    require('component/webuploader/dist/webuploader');
    //载入模版引擎
    var Template = require('common/extend/template');
    //载入ThinkEditor编辑器
    var editor = require('common/module/editor');
    return Class({


        itemTpl: [  //评论单项模版
            '<div class="w-centre-item">',
            '<h2>',
            '<label class="w-text text-s ">',
            '<input class="text-input" type="text" name="name" value="分类名称" />',
            '</label>',
            '<a href="javascript:;" class="w-btn btn-s pull-right btn-red btn-delete"><b class="btn-input"><i class="icon-cross"></i></b></a>',
            '<a href="javascript:;" class="w-btn btn-s pull-right btn-default btn-add"><b class="btn-input"><i class="icon-mode-edit"></i> 添加文档</b></a>',
            '</h2>',
            '<ul>',
            '</ul>',
            '</div>'
        ].join(''),

        bookItemTpl: [
            '<li data-id="<%=id%>">',
            '<a target="_blank" href="javascript:;" class="item-text"><%=title%></a>',
            '<a href="javascript:;" class="item-delete"><i class="icon-cross"></i></a>',
            '</li>'
        ].join(''),
        //获取文章编辑器
        getEditor  : function () {
            if (!this._editor) {
                this._editor = editor($("#descEditor").find('textarea'), {
                    items   : "undo,redo,-,h1,h2,h3,h4,-,bold,italic,-,ul,ol,-,link,image,code,hr,blockquote,table,-,preview,fullscreen,help",
                    uploader: {
                        url: '/image/upload'
                    }
                });

            }
            return this._editor;
        },
        initial    : function () {
            var self = this;
            $('.w-centre-add-item').on('click', function () {
                $html = $(Template.parseTemp(self.itemTpl));
                $(this).parent().before($html);
                $html.children('ul').sortable();
            });
            this.getEditor();
            $('.w-centre-content').on('click', '.w-centre-item .btn-delete', function () {
                var $this = $(this);
                $.dialog.confirm('确定要移除该分类吗?', function (action) {
                    if (action == 1) {
                        $this.parents('.w-centre-item').remove();
                    }
                });
                return false;
            });

            $('.w-centre-content').on('click', '.w-centre-item .btn-add', function () {
                var $this = $(this);
                var $html, dialog;
                $html = $("<div/>").addClass("m-manual-add").html('' +
                    '<form class="w-form form-horizon dialog-form" method="post">' +
                    '<div class="form-item">' +
                    '<span class="form-label">文档</span>' +
                    '<div class="form-target">' +
                    '<label class="w-select select-m">' +
                    '<select class="select-input" name="item" multiple="multiple"></select>' +
                    '</label>' +
                    '</div>' +
                    '</div>' +
                    '</div>');

                var books = [];

                dialog = $.dialog.open($html, {
                    "title" : "添加文档",
                    onCreate: function () {
                        var $select = this.bodyElement.find('[name="item"]');
                        $select.select2({
                            placeholder      : '选择文档',
                            width            : 232,
                            multiple         : true,
                            ajax             : {
                                url           : '/setting/centre/book',
                                data          : function (params) {
                                    return {search: params.term}
                                },
                                processResults: function (data) {
                                    return {
                                        results: data
                                    };
                                }
                            },
                            templateResult   : function (repo) {
                                if (!repo.id) {
                                    return repo.text;
                                }
                                return $('<div style="overflow: hidden;"><img style="float: left;" width="40" src="' + repo.cover + '" /><span style="margin-left: 50px;font-style: normal;display: block;line-height: 1.5;">' + repo.title + '</span></div>');
                            },
                            templateSelection: function (repo) {
                                return repo.title || repo.text;
                            }
                        });

                        $select.on("select2:select", function (e) {
                            books.push(e.params.data);
                        });
                        $select.on("select2:unselect", function (e) {
                            for (var i = 0; i < books.length; i++) {
                                if (books[i]['id'] == e.params.data.id) {
                                    books.splice(i, 1);
                                    break;
                                }
                            }
                        });
                    },
                    onOk    : function () {
                        for (var i = 0; i < books.length; i++) {
                            $this.parents('.w-centre-item').find('ul').append(Template.parseTemp(self.bookItemTpl, books[i]));
                        }
                        dialog.close();
                    }
                });
            });


            $('.w-centre-content').on('click', '.w-centre-item .item-delete', function () {
                var $this = $(this);
                $.dialog.confirm('确定要移除该文档吗?', function (action) {
                    if (action == 1) {
                        $this.parents('li').remove();
                    }
                });
                return false;
            });

            $('.w-centre-content .w-centre-item ul').sortable();

            var uploader = WebUploader.create({
                runtimeOrder: false,
                auto        : true,
                width       : 86,
                height      : 34,
                server      : '/image/upload',
                fileNumLimit: 1,
                pick        : '#uploadLogo',
                accept      : {
                    title     : "Image",
                    extensions: "jpg,jepg,gif,png",
                    mimeTypes : '*'
                },
                formData    : {
                    ajax: 1
                }
            });
            uploader.on('uploadSuccess', function (file, data) {
                if (!data.status) {
                    $.dialog.error(data.info);
                } else {
                    $('.w-centre-logo').find('.upload-image img').attr('src', data.files.image0.src);
                    $('.w-centre-logo').find('[name=logo]').val(data.files.image0.src);
                    $.dialog.success(data.info);
                }
            });

            uploader.on('uploadProgress', function (file, percentage) {
                $.dialog.loading('上传中');
            });


            $('#updateCentreForm').submitForm({
                autoValidate: false,
                onBefore    : function (options) {
                    var content = [];

                    $('.w-centre-content .w-centre-item:not(:last-child)').each(function () {
                        var books = [];
                        $(this).find('ul li').each(function () {
                            books.push($(this).data('id'));
                        });
                        content.push({
                            'title': $(this).find('h2 input[name=name]').val(),
                            'books': books
                        })
                    });
                    options.data.content = content;
                    options.data.description = self.getEditor().getValue();
                },
                onAfter     : function (data) {
                    if (data.status) {
                        $.dialog.success(data.info);
                        location.reload();
                    } else {
                        if (typeof data.info == 'string') {
                            $.dialog.error(data.info);
                        }
                    }
                }
            });


        }
    });
});

define('home/enterprise/member/index', function (require, exports, module) {

    require('component/select2/dist/css/select2.min.css');
    require('component/select2/dist/js/select2.full.min');
    //载入公共操作
    return Class({
        //记录选择成员元素
        selectMemberEle: $('#selectMember'),
        //记录成员列表元素
        memberListEle  : $('#memberList'),
        initial        : function () {
            var self = this;

            //绑定添加成员操作
            this.selectMemberEle.click(function () {
                var $html, dialog;
                $html = $("<div/>").addClass("m-manual-add").html('' +
                    '<form class="w-form form-horizon dialog-form" method="post">' +
                    '<div class="form-item">' +
                    '<span class="form-label">用户</span>' +
                    '<div class="form-target">' +
                    '<label class="w-select select-m">' +
                    '<select class="select-input" name="user" multiple="multiple"></select>' +
                    '</label>' +
                    '</div>' +
                    '</div>' +
                    '<div class="form-item">' +
                    '<span class="form-label">角色</span>' +
                    '<div class="form-target">' +
                    '<label class="w-select select-m">' +
                    '<select class="select-input" name="role"></select>' +
                    '</label>' +
                    '</div>' +
                    '</div>' +
                    '</div>');

                //弹出图片上传层
                dialog = $.dialog.form($html, {
                    "title" : "添加成员",
                    onCreate: function () {
                        var _form = this.bodyElement.find('form');
                        _form.attr('action', Config.get('createUserUrl'));

                        _form.find('[name="role"]').append(function () {
                            var options = "";
                            $.each(Config.get('accessRoles'), function (k, v) {
                                options += "<option value='" + v + "'>" + k + "</option>"
                            });
                            return options;
                        });

                        _form.find('[name="user"]').select2({
                            placeholder      : '输入用户名或者邮箱',
                            width            : 232,
                            multiple         : true,
                            ajax             : {
                                url           : '/autocomplete/user',
                                data          : function (params) {
                                    return {search: params.term}
                                },
                                processResults: function (data) {
                                    return {
                                        results: data
                                    };
                                }
                            },
                            templateResult   : function (state) {
                                if (!state.id) {
                                    return state.text;
                                }
                                return $(
                                    '<div style="line-height: 20px;white-space:nowrap;overflow: hidden;text-overflow: ellipsis; font-weight: bold;"><img style="border-radius: 3px;" src="' + state.avatar + '" width="20" height="20" /> ' + state.username + ' <span style="font-weight: normal;">' + state.name + '</span></div>'
                                );
                            }
                            ,
                            templateSelection: function (state) {
                                return state.name || state.text;
                            }
                        });
                        _form.submitForm({
                            onBefore: function (options) {
                                var user = _form.find('[name="user"]').val();
                                if (!user) {
                                    $.dialog.error('请选择用户');
                                    return false;
                                }
                                options.data.user = user;
                            },
                            onAfter : function (data, options) {
                                if (data.status) {
                                    window.location.reload();
                                } else {
                                    $.dialog.error(data.info);
                                }
                            }
                        });
                    }
                });
            });
            //绑定删除成员操作
            this.memberListEle.delegate('.delete', 'click', function () {
                var _id = $(this).closest('.m-member-item').data('id'), $this = $(this);
                $.dialog.confirm('确定要删除该用户吗？', function (action) {
                    if (action == 1) {
                        $.ajax({
                            url    : Config.get('delMemberPath'),
                            data   : {id: _id, book_id: self.currentManualId},
                            context: this,
                            type   : 'post',
                            success: function (data) {
                                if (data.status) {
                                    $this.closest('.m-member-item').remove();
                                } else {
                                    $.dialog.error(data.info);
                                }
                            }
                        });
                    }
                });
            });
            //绑定设置成员角色操作
            this.memberListEle.delegate('.role>select', 'change', function () {
                var _id = $(this).closest('.m-member-item').data('id');
                $.ajax({
                    url    : Config.get('setMemberRolePath'),
                    data   : {id: _id, role: $(this).val(), book_id: self.currentManualId},
                    context: this,
                    type   : 'post',
                    success: function (data) {
                        if (data.status) {
                            $.dialog.success(data.info);
                        } else {
                            $.dialog.error(data.info);
                        }
                    }
                });
            });
        },
    });
})

define('home/globle', function (require, exports, module) {
    //ie8以下浏览器不向下执行
    if (typeof nonsupportIE !== 'undefined' && nonsupportIE === true) {
        return false;
    }
    //载入模版引擎
    var Template = require('common/extend/template');
    //载入loading
    require('component/jquery.loading');
    //载入下拉插件
    require('component/jquery.drop');
    //载入对话框
    require('common/extend/dialog/dialog');
    //载入公共函数库
    require('common/library/function');
    //载入在线联系按钮
    require('common/module/customerService');
    //设置模版数据
    Template.setData({
        'STATIC': Config.get('STATIC'),
        'ROOT'  : Config.get('ROOT')
    });
    //注册模版助手
    Template.helper('getMemberAvatar', Util.getMemberAvatar);
    //载入兼容浏览器脚本
    require('home/compatible');
    //载入提示插件
    require('component/hint.css/hint.min.css');
    Class({
        //顶栏搜索元素
        topbarSearchEle     : $('#topbarSearch'),
        //占位图片地址
        placeholderImage    : Config.get('STATIC') + '/home/image/20.png',
        initial             : function () {
            var self = this;

            //检查封面是否加载失败
            $('.e-cover img').each(function () {
                var _orgImage = $(this);
                var _newImg   = $('<img/>');
                _newImg.bind('error', function () {
                    _orgImage.attr('src', self.placeholderImage);
                    _orgImage.parent().addClass('cover-error');
                });
                _newImg.attr('src', $(this).attr('src'));
            });
            //检查手册管理界面手册封面加载状态
            $('.m-manual-info .cover img').each(function () {
                var _orgImage = $(this);
                var _newImg   = $('<img/>');
                _newImg.bind('error', function () {
                    _orgImage.attr('src', self.placeholderImage);
                    _orgImage.closest('.cover').addClass('cover-error');
                });
                _newImg.attr('src', $(this).attr('src'));
            });
            //绑定顶栏搜索操作
            this.topbarSearchEle.submit(function () {
                var _text = $(this).find(':text');
                if (!$.trim(_text.val())) {
                    Util.wranStyle(_text, 'text-wran');
                    return false;
                }
            });
            //移动设备上手册头部创建折叠按钮
            ;
            (function () {
                var _page   = $('.m-page'),
                    _header = $('<b class="e-hander">搜索</b>').appendTo(_page.find('.page-head'));
                _header.click(function () {
                    if (_page.hasClass('page-head-toggle')) {
                        _page.removeClass('page-head-toggle');
                        _header.text('搜索');
                    } else {
                        _page.addClass('page-head-toggle');
                        _header.text('取消')
                    }
                });
            })();
            //检查新消息
            if (Config.get('isLogin')) {
                this.checkNewNotification();
            }
            //移动端导航
            $('.m-navg-toggle').click(function () {
                $('.m-page .page-head .left .m-navg').slideToggle();
            });
        },
        checkNewNotification: function () {
            if (Config.get('checkNotification')) {
                $.ajax({
                    url    : '/notification/check',
                    type   : 'get',
                    success: function (status) {
                        if (status > 0) {
                            $('.page-head .navg-link .icon-email').addClass('new');
                        } else {
                            $('.page-head .navg-link .icon-email').removeClass('new');
                        }
                    }
                });
            }
        }
    });

});

define('home/index/forward',function(require,exports,module){
    require('component/fullPage/vendors/jquery.slimscroll.min');
    require('component/fullPage/jquery.fullPage');
    Class({
        initial: function(){
            var _page        = $('.m-page');
            var _pageAnchors = ['one', 'two', 'three','four','five','six','seven','eight','nine'];
            $('#fullpage').fullpage({
                anchors: _pageAnchors,
                navigation: true,
                navigationPosition: 'right',
                onLeave: function(leavingSection, leavingSectionIndex, sectionIndex, yMovement){
                    $.each(_pageAnchors, function(i,v){
                        _page.removeClass('page-fullpage-'+v);
                    });
                    _page.addClass('page-fullpage-'+_pageAnchors[leavingSectionIndex-1]);
                }
            });
            $('#fullpage').show();
        }
    });
})

define('home/index/index',function(require,exports,module){
    //载入幻灯片控件
    require('component/carousel/owl-carousel/owl.carousel.css');
    require('component/carousel/owl-carousel/owl.theme.css');
    require('component/carousel/owl-carousel/owl.carousel.min');
    Class({
        //banner幻灯片元素
        bannerSlideEle : $('#bannerSlide'),
        //手册推荐列表元素1
        manualRecome1Ele : $('#manualRecome1'),
        //手册推荐列表元素2
        manualRecome2Ele : $('#manualRecome2'),
        //手册推荐列表元素3
        manualRecome3Ele : $('#manualRecome3'),
        initial: function(){
            var self = this;
            //绑定banner幻灯片组件
            this.bannerSlideEle.owlCarousel({
                navigation : true,
                slideSpeed : 300,
                paginationSpeed : 400,
                autoPlay : true,
                singleItem : true
            });
        }
    });
});

define('home/manage/book/detail', function (require, exports, module) {

    Class({
        initial: function () {
            $('#setCommissionRatio').on('click', function () {
                var _ele = $(this);
                $.ajax({
                    url    : _ele.attr('href'),
                    data   : {
                        commission_ratio: $('[name=commission_ratio]').val(),
                        book_id         : _ele.data('id')
                    },
                    type   : 'post',
                    success: function (data) {
                        if (data.status) {
                            location.reload();
                        } else {
                            $.dialog.error(data.info);
                        }
                    }
                })
                return false;
            });

            $('#set-size').on('click', function () {
                var _ele = $(this), _id = $(this).data('id');console.log('aaa');
                $.ajax({
                    url    : _ele.attr('href'),
                    data   : {
                        book_id: _id,
                        size   : $('[name="book-size"]').val()
                    },
                    type   : 'post',
                    success: function (data) {
                        if (data.status) {
                            console.log(data);return;
                            location.reload();
                        } else {
                            $.dialog.error(data.info);
                        }
                    }
                });
                return false;
            });

            $('#rebuild').on('click', function () {
                var _ele = $(this), _id = $(this).data('id');
                $.dialog.confirm('确定要重建', function (action) {
                    if (action == 1) {
                        $.ajax({
                            url    : _ele.attr('href'),
                            data   : {
                                book_id: _id
                            },
                            type   : 'post',
                            success: function (data) {
                                if (data.status) {
                                    location.reload();
                                } else {
                                    $.dialog.error(data.info);
                                }
                            }
                        })
                    }
                });
                return false;
            });

            $('#book-delete').on('click', function () {
                var _ele = $(this), _id = $(this).data('id');
                $.dialog.confirm('确定删除吗', function (action) {
                    if (action == 1) {
                        $.ajax({
                            url    : _ele.data('href'),
                            data   : {book_id: _id},
                            type   : 'post',
                            success: function (data) {
                                if (data.status) {
                                    location.reload();
                                } else {
                                    $.dialog.error(data.info);
                                }
                            }
                        })
                    }
                });
                return false;
            });
            $('#set-cover').on('click', function () {
                var _ele = $(this), _id = $(this).data('id');
                $.ajax({
                    url    : _ele.data('href'),
                    data   : {book_id: _id},
                    type   : 'post',
                    success: function (data) {
                        if (data.status) {
                            location.reload();
                        } else {
                            $.dialog.error(data.info);
                        }
                    }
                });
                return false;
            });
            $('#submit-baidu').on('click', function () {
                var _ele = $(this), _id = $(this).data('id');
                $.dialog.confirm('确定提交到百度吗', function (action) {
                    if (action == 1) {
                        // $.dialog.success('正在提交, 请稍等....');
                        $.ajax({
                            url    : _ele.data('href'),
                            data   : {book_id: _id},
                            type   : 'post',
                            success: function (data) {
                                if (data.status) {
                                    $.dialog.success(data.info);
                                } else {
                                    $.dialog.error(data.info);
                                }
                            }
                        });
                    }
                });
                return false;
            });
            $('#book-forbid').on('click', function () {
                var _ele = $(this), _id = $(this).data('id');
                $.dialog.confirm('确定禁用吗', function (action) {
                    if (action == 1) {
                        $.ajax({
                            url    : _ele.data('href'),
                            data   : {book_id: _id},
                            type   : 'post',
                            success: function (data) {
                                if (data.status) {
                                    location.reload();
                                } else {
                                    $.dialog.error(data.info);
                                }
                            }
                        })
                    }
                });
                return false;
            });
            $('#book-recover').on('click', function () {
                var _ele = $(this), _id = $(this).data('id');
                $.ajax({
                    url    : _ele.data('href'),
                    data   : {book_id: _id},
                    type   : 'post',
                    success: function (data) {
                        if (data.status) {
                            location.reload();
                        } else {
                            $.dialog.error(data.info);
                        }
                    }
                });
                return false;
            });
        }
    });
});

define('home/manage/book/index', function (require, exports, module) {

    require('component/select2/dist/css/select2.css');
    require('component/select2/dist/js/select2.full.min');
    Class({
        //排序
        namespaceEle : $('#namespace'),
        manualListEle: $('.list-right'),
        initial      : function () {
            this.namespaceEle.select2({
                placeholder      : '所属用户',
                allowClear       : true,
                ajax             : {
                    url           : '/autocomplete/user',
                    data          : function (params) {
                        return {search: params.term}
                    },
                    processResults: function (data) {
                        return {
                            results: data
                        };
                    }
                },
                templateResult   : function (repo) {
                    return repo.name;
                }
                ,
                templateSelection: function (repo) {
                    return repo.name || repo.text;
                }
            });


            this.manualListEle.delegate('.recommend', 'click', function () {
                var _ele = $(this), _id = $(this).data('id');
                $.ajax({
                    url    : _ele.attr('href'),
                    data   : {book_id: _id},
                    type   : 'post',
                    success: function (data) {
                        if (data.status) {
                            location.reload();
                        } else {
                            $.dialog.error(data.info);
                        }
                    }
                });
                return false;
            });

        }
    });
});

define('home/manage/coupon/index', function (require, exports, module) {

    require('component/select2/dist/css/select2.css');
    require('component/select2/dist/js/select2.full.min');
    Class({
        //排序
        namespaceEle : $('#namespace'),
        manualListEle: $('.list-right'),
        initial      : function () {
            var self = this;
            this.namespaceEle.select2({
                placeholder      : '所属用户',
                allowClear       : true,
                ajax             : {
                    url           : '/autocomplete/user',
                    data          : function (params) {
                        return {search: params.term}
                    },
                    processResults: function (data) {
                        return {
                            results: data
                        };
                    }
                },
                templateResult   : function (repo) {
                    return repo.name;
                }
                ,
                templateSelection: function (repo) {
                    return repo.name || repo.text;
                }
            });

            this.manualListEle.delegate('.delete', 'click', function () {
                var _ele = $(this), _id = $(this).data('id');
                $.dialog.confirm('确定删除吗', function (action) {
                    if (action == 1) {
                        $.ajax({
                            url    : _ele.data('href'),
                            data   : {id: _id},
                            type   : 'post',
                            success: function (data) {
                                if (data.status) {
                                    location.reload();
                                } else {
                                    $.dialog.error(data.info);
                                }
                            }
                        })
                    }
                });
                return false;
            });
        }
    })
    ;
})
;

define('home/manage/coupon/make', function (require, exports, module) {

    require('component/select2/dist/css/select2.css');
    require('component/select2/dist/js/select2.full.min');
    Class({
        //排序
        namespaceEle: $('#namespace'),
        submitEle: $('.btn-input[type=submit]'),
        formEle: $('.list-left form'),
        clearMakeEle: $('.btn-clear-make'),
        initial: function () {
            var self = this;
            this.namespaceEle.select2({
                placeholder      : '所属用户',
                allowClear       : true,
                ajax             : {
                    url           : '/autocomplete/user',
                    data          : function (params) {
                        return {search: params.term}
                    },
                    processResults: function (data) {
                        return {
                            results: data
                        };
                    }
                },
                templateResult   : function (repo) {
                    return repo.name;
                }
                ,
                templateSelection: function (repo) {
                    return repo.name || repo.text;
                }
            });
            
            if (this.namespaceEle.data("selected")) {
                this.namespaceEle.val(function(){
                    return $(this).data("selected");
                }).trigger("change");
            }

            this.submitEle.on('click', function () {
                if (self.submitEle.text() === '生成中...') {
                    return;
                }
                self.submitEle.text('生成中...');
                var data = self.formEle.serialize();
                $.post(self.formEle.attr('action'), data, function (result) {
                    if (result.status) {
                        location.reload();
                    } else {
                        self.submitEle.text('生成');
                        alert(result.info);
                    }
                });
                return false;
            });

            this.clearMakeEle.on('click', function () {
                if (self.clearMakeEle.text() === '清理中...') {
                    return;
                }
                $.dialog.confirm('确定要清理吗? 清理后将不能下载', function (action) {
                    if (action === 1) {
                        self.clearMakeEle.text('清理中...');
                        $.post(self.clearMakeEle.data('url'), null, function (result) {
                            if (result.status) {
                                location.reload();
                            } else {
                                self.clearMakeEle.text('清除历史');
                                alert(result.info);
                            }
                        });
                    }
                });
                return false;
            });
        }
    });
});

define('home/manage/email', function (require, exports, module) {
    //载入ThinkEditor编辑器
    var editor = require('common/module/editor');
    Class({
        //内容元素
        emailContentEle: $('#emailContent'),
        //表单元素
        emailFormEle   : $('#emailForm'),

        initial  : function () {
            //初始获取编辑器
            this.getEditor();
            //绑定提交表单操作
            this.emailFormEle.submitForm({
                onBefore: function (options) {
                    options.data.content = self.getEditor().getValue();
                },
                onAfter : function (data) {
                    if (data.status) {
                        $.dialog.success(data.info, function () {
                            location.reload();
                        });
                    } else {
                        if (typeof data.info == 'string') {
                            $.dialog.error(data.info);
                        }
                    }
                }
            });
        },
        //获取文章编辑器
        getEditor: function () {
            var self = this;
            if (!this._editor) {
                this._editor = editor(self.emailContentEle.find('textarea'), {
                    items   : "undo,redo,-,h1,h2,h3,h4,-,bold,italic,-,ul,ol,-,link,image,code,hr,blockquote,table,-,preview,fullscreen,help",
                    uploader: {
                        url: Config.get('uploadImageUrl')
                    }
                });
            }
            return this._editor;
        }
    })
    ;
})
;

define('home/manage/order/index', function (require, exports, module) {

    require('component/select2/dist/css/select2.css');
    require('component/select2/dist/js/select2.full.min');
    Class({
        //排序
        namespaceEle : $('#namespace'),
        manualListEle: $('.list-right'),
        initial      : function () {
            var self = this;
            this.namespaceEle.select2({
                placeholder      : '所属用户',
                allowClear       : true,
                ajax             : {
                    url           : '/autocomplete/user',
                    data          : function (params) {
                        return {search: params.term}
                    },
                    processResults: function (data) {
                        return {
                            results: data
                        };
                    }
                },
                templateResult   : function (repo) {
                    return repo.name;
                }
                ,
                templateSelection: function (repo) {
                    return repo.name || repo.text;
                }
            });

            this.manualListEle.delegate('.pay', 'click', function () {
                var _ele = $(this), _id = $(this).data('id');
                $.dialog.confirm('确定要设为已支付吗?', function (action) {
                    if (action === 1) {
                        $.ajax({
                            url    : _ele.data('href'),
                            data   : {id: _id},
                            type   : 'post',
                            success: function (result) {
                                if (typeof result == 'object') {
                                    $.dialog.error(result.info);
                                } else {
                                    if (result == 'success') {
                                        location.reload();
                                    }
                                }
                            }
                        });
                    }
                });
                return false;
            });
        }
    })
    ;
})
;

define('home/manage/setting', function (require, exports, module) {

    Class({
        //排序
        settingFormEle: $("#settingForm"),
        initial       : function () {
            var self = this;
            //绑定提交登录表单操作
            this.settingFormEle.submitForm({
                autoValidate: false,
                onAfter     : function (data, options) {
                    if (data.status) {
                        $.dialog.success('修改成功');
                    } else {
                        if (typeof data.info == 'string') {
                            $.dialog.error(data.info);
                        }
                    }
                }
            });
        }
    });
});

define('home/manage/special/detail', function (require, exports, module) {
    require('component/select2/dist/css/select2.css');
    require('component/select2/dist/js/select2.full.min');
    require('component/Sortable/jquery.fn.sortable.min');
    Class({
        //记录选择成员元素
        selectBookEle   : $('#selectBook'),
        currentSpecialId: Config.get('specialId'),
        itemListEle     : $('.list-right ul'),

        initial: function () {
            var self = this;

            this.selectBookEle.click(function () {
                var $html, dialog;
                $html = $("<div/>").addClass("m-manual-add").html('' +
                    '<form class="w-form form-horizon dialog-form" method="post">' +
                    '<div class="form-item">' +
                    '<span class="form-label">文档</span>' +
                    '<div class="form-target">' +
                    '<label class="w-select select-m">' +
                    '<select class="select-input" name="item" multiple="multiple"></select>' +
                    '</label>' +
                    '</div>' +
                    '</div>' +
                    '</div>');

                dialog = $.dialog.form($html, {
                    "title" : "添加文档",
                    onCreate: function () {
                        var _form = this.bodyElement.find('form');
                        _form.append($('<input type="hidden" name="special_id" value="' + self.currentSpecialId + '">'));
                        _form.append($('<input type="hidden" name="type" value="1">'));
                        _form.attr('action', Config.get('addItemUrl'));

                        _form.find('[name="item"]').select2({
                            placeholder      : '选择文档',
                            width            : 232,
                            multiple         : true,
                            ajax             : {
                                url           : '/autocomplete/book',
                                data          : function (params) {
                                    return {search: params.term}
                                },
                                processResults: function (data) {
                                    return {
                                        results: data
                                    };
                                }
                            },
                            templateResult   : function (repo) {
                                if (!repo.id) {
                                    return repo.text;
                                }
                                return $('<div style="overflow: hidden;"><img style="float: left;" width="40" src="' + repo.cover + '" /><span style="margin-left: 50px;font-style: normal;display: block;line-height: 1.5;">' + repo.title + '</span></div>');
                            }
                            ,
                            templateSelection: function (repo) {
                                return repo.title || repo.text;
                            }
                        });
                        _form.submitForm({
                            onBefore: function (options) {
                                var item = _form.find('[name="item"]').val();
                                if (!item) {
                                    $.dialog.error('请选择文档');
                                    return false;
                                }
                                options.data.item = item;
                            },
                            onAfter : function (data, options) {
                                if (data.status) {
                                    window.location.reload();
                                } else {
                                    $.dialog.error(data.info);
                                }
                            }
                        });
                    }
                });
            });

            this.itemListEle.delegate('.item-delete', 'click', function () {
                var _ele = $(this), _id = $(this).data('id'), _type = $(this).data('type');
                $.dialog.confirm('确定删除吗', function (action) {
                    if (action == 1) {
                        $.ajax({
                            url    : _ele.attr('href'),
                            data   : {special_id: self.currentSpecialId, id: _id, type: _type},
                            type   : 'post',
                            success: function (data) {
                                if (data.status) {
                                    location.reload();
                                } else {
                                    $.dialog.error(data.info);
                                }
                            }
                        })
                    }
                });
                return false;
            });

            //拖拽排序
            this.itemListEle.sortable({
                group   : $(this).data('type'),
                onUpdate: function (evt) {
                    var items = this.toArray();
                    $.ajax({
                        url    : Config.get('sortItemUrl'),
                        data   : {item: items},
                        type   : 'post',
                        success: function (data) {
                            if (data.status) {
                                $.dialog.success(data.info);
                            } else {
                                $.dialog.error(data.info);
                            }
                        }
                    })
                }
            });

        }
    });
})
;

define('home/manage/special/index', function (require, exports, module) {

    Class({
        //排序
        manualListEle: $('.list-right'),
        initial      : function () {

            this.manualListEle.delegate('.delete', 'click', function () {
                var _ele = $(this), _id = $(this).data('id');
                $.dialog.confirm('确定删除吗', function (action) {
                    if (action == 1) {
                        $.ajax({
                            url    : _ele.data('href'),
                            data   : {special_id: _id},
                            type   : 'post',
                            success: function (data) {
                                if (data.status) {
                                    location.reload();
                                } else {
                                    $.dialog.error(data.info);
                                }
                            }
                        })
                    }
                });
                return false;
            });
        }
    })
    ;
})
;

define('home/manage/special/update', function (require, exports, module) {

    Class({
        //上传图片表单
        uploadCoverFormEle: $('#uploadCoverForm'),
        //上传图片元素
        uploadCoverEle    : $('#uploadCover'),
        //手册摘要封面元素
        manualInfoCoverEle: $('.m-manual-info .cover img'),
        //记录图片上传次数
        uploadNumber      : 0,
        //排序
        specialFormEle    : $("#specialUpdateForm"),
        initial           : function () {
            var self = this;
            //绑定提交登录表单操作
            this.specialFormEle.submitForm({
                autoValidate: false,
                onAfter     : function (data, options) {
                    if (data.status) {
                        $.dialog.success(data.info);
                        if (data.url) {
                            window.location.href = data.url;
                        }
                    } else {
                        if (typeof data.info == 'string') {
                            $.dialog.error(data.info);
                        }
                    }
                }
            });

            //绑定上传图片操作
            this.uploadCoverEle.click(function () {
                if (!self.cutImageDialog) {
                    //打开裁剪对话框
                    self.cutImageDialog = $.dialog('<div class="m-dialog-loading"><b class="loading-text">裁剪组件加载中...</b></div>', {
                        title: '封面裁剪',
                        cache: true
                    });
                    //异步加载裁剪组件
                    require.async('common/module/cutImage', function (cutImage) {
                        //实例化裁剪组件
                        self.cutCover = new cutImage({
                            cls       : 'm-cover-cutting',
                            cutWidth  : 173,
                            cutHeight : 231,
                            boxWidth  : 420,
                            boxHeight : 300,
                            uploadUrl : Config.get('uploadCoverUrl'),
                            saveCutUrl: Config.get('saveCoverUrl'),
                            onSuccess : function (data) {
                                var _image = self.uploadCoverEle.find('img');
                                var _input = self.uploadCoverEle.find('input');
                                var _src = data.data.url.indexOf('?') >= 0 ? data.data.url + '&v=' + self.uploadNumber : data.data.url + '?v=' + self.uploadNumber;
                                self.cutImageDialog.close();
                                self.uploadNumber++;
                                if (!_image.length) {
                                    _image = $('<img/>');
                                    self.uploadCoverEle.find('.upload-image').html(_image);
                                }
                                self.manualInfoCoverEle.attr('src', _src)
                                _image.attr('src', _src);
                                _input.val(data.data.url);
                            }
                        });
                        self.cutImageDialog.content(self.cutCover.getHtml());
                        self.cutImageDialog.offset(self.cutImageDialog._options.offset[0], self.cutImageDialog._options.offset[1]);
                    });
                } else {
                    self.cutImageDialog.open();
                }
            });
        }
    })
    ;
})
;

define('home/manage/tag/index', function (require, exports, module) {

    Class({
        //排序
        manualListEle: $('.list-right'),
        initial      : function () {
            var self = this;

            this.manualListEle.delegate('.check', 'click', function () {
                var _ele = $(this), _id = $(this).data('id');
                $.ajax({
                    url    : _ele.attr('href'),
                    data   : {id: _id, type: $(this).data('type')},
                    type   : 'post',
                    success: function (result) {
                        if (result.status == 1) {
                            location.reload();
                        } else {
                            $.dialog.error(result.info);
                        }
                    }
                });
                return false;
            });

            this.manualListEle.delegate('.recommend', 'click', function () {
                var _ele = $(this), _id = $(this).data('id'), recommend = $(this).data('recommend');
                $.ajax({
                    url    : _ele.attr('href'),
                    data   : {id: _id, recommend: recommend},
                    type   : 'post',
                    success: function (result) {
                        if (result.status == 1) {
                            location.reload();
                        } else {
                            $.dialog.error(result.info);
                        }
                    }
                });
                return false;
            });
        }
    })
    ;
})
;

define('home/manage/team/edit', function (require, exports, module) {

    Class({
        //排序
        teamFormEle: $("#teamForm"),
        initial    : function () {
            var self = this;
            //绑定提交登录表单操作
            this.teamFormEle.submitForm({
                autoValidate: false,
                onAfter     : function (data, options) {
                    if (data.status) {
                        $.dialog.success('修改成功');
                    } else {
                        if (typeof data.info == 'string') {
                            $.dialog.error(data.info);
                        }
                    }
                }
            });
        }
    })
    ;
})
;

define('home/manage/template', function (require, exports, module) {

    require('component/select2/dist/css/select2.css');
    require('component/select2/dist/js/select2.full.min');
    Class({
        //排序
        namespaceEle : $('#namespace'),
        manualListEle: $('.template_content'),
        //上传图片表单
        uploadCoverFormEle : $('#uploadCoverForm'),
        //上传图片元素
        uploadCoverEle     : $('#uploadCover'),
        //手册摘要封面元素
        manualInfoCoverEle : $('#templatePreview img'),
        initial      : function () {
            var self = this;
            this.namespaceEle.select2({
                placeholder      : '所属用户',
                allowClear       : true,
                ajax             : {
                    url           : '/admin/user/search',
                    data          : function (params) {
                        return {nickname: params.term}
                    },
                    processResults: function (data) {
                        return {
                            results: data.info
                        };
                    }
                },
                templateResult   : function (repo) {
                    return repo.nickname;
                }
                ,
                templateSelection: function (repo) {
                    return repo.nickname || repo.text;
                }
            });
            //绑定上传图片操作
            this.uploadCoverEle.click(function () {
                if (!self.cutImageDialog) {
                    //打开裁剪对话框
                    self.cutImageDialog = $.dialog('<div class="m-dialog-loading"><b class="loading-text">裁剪组件加载中...</b></div>', {
                        title: '封面裁剪',
                        cache: true
                    });
                    //异步加载裁剪组件
                    require.async('common/module/cutImage', function (cutImage) {
                        //实例化裁剪组件
                        self.cutCover = new cutImage({
                            cls         : 'm-cover-cutting',
                            cutWidth    : 175,
                            cutHeight   : 130,
                            boxWidth    : 525,
                            boxHeight   : 393,
                            uploadUrl   : Config.get('uploadCoverUrl'),
                            uploadParam : {template_id: Config.get('templateId'), title: Config.get('templateTitle')},
                            saveCutUrl  : Config.get('saveCoverUrl'),
                            saveCutParam: {template_id: Config.get('templateId'), title: Config.get('templateTitle')},
                            onSuccess   : function (data) {
                                var _image = self.uploadCoverEle.find('img');
                                var _src = data.data.url.indexOf('?') >= 0 ? data.data.url + '&t=' + self.uploadNumber : data.data.url + '?t=' + self.uploadNumber;
                                self.cutImageDialog.close();
                                self.uploadNumber++;
                                if (!_image.length) {
                                    _image = $('<img/>');
                                    self.uploadCoverEle.find('.upload-image').html(_image);
                                }
                                self.manualInfoCoverEle.attr('src', _src)
                                _image.attr('src', _src);
                            }
                        });
                        self.cutImageDialog.content(self.cutCover.getHtml());
                        self.cutImageDialog.offset(self.cutImageDialog._options.offset[0], self.cutImageDialog._options.offset[1]);
                    });
                } else {
                    self.cutImageDialog.open();
                }
            });
            this.manualListEle.delegate('.delete', 'click', function () {
                var _ele = $(this), _id = $(this).data('id'), _tips = $(this).data('tips');
                $.dialog.confirm(_tips, function (action) {
                    if (action == 1) {
                        $.ajax({
                            url    : _ele.data('href'),
                            data   : {id: _id},
                            type   : 'post',
                            success: function (data) {
                                if (data.status) {
                                    location.href = data.url;
                                } else {
                                    $.dialog.error(data.info);
                                }
                            }
                        })
                    }
                });
                return false;
            });
        }
    })
    ;
})
;

define('home/manage/user/detail', function (require, exports, module) {

    require('component/semantic-ui-tab/tab.min');
    Class({
        //排序
        tabEle : $('.nav-tabs .navg-item'),
        initial: function () {
            this.tabEle.tab({
                selector: {
                    tabs: '.tab-content'
                }
            });
        }
    })
    ;
})
;

define('home/manage/user/edit', function (require, exports, module) {

    Class({
        //排序
        userFormEle: $("#userForm"),
        initial    : function () {
            var self = this;
            //绑定提交登录表单操作
            this.userFormEle.submitForm({
                autoValidate: false,
                onBefore    : function (data, options) {
                    data.data.is_admin = self.userFormEle.find('[name="is_admin"]').is(':checked') ? 1 : 0;
                },
                onAfter     : function (data, options) {
                    if (data.status) {
                        $.dialog.success('修改成功');
                    } else {
                        if (typeof data.info == 'string') {
                            $.dialog.error(data.info);
                        }
                    }
                }
            });
        }
    })
    ;
});

define('home/manage/withdrawals/index', function (require, exports, module) {
    Class({
        initial: function () {
            $('.btn-withdrawals').on('click', function () {
                var self = $(this);
                $.dialog.confirm('确定完成?', function (action) {
                    if (action == 1) {
                        $.post(self.data('href'), {
                            'id': self.data('id')
                        }, function () {
                            $.dialog.success('设置成功');
                            setTimeout(function () {
                                location.reload();
                            }, 2000);
                        });
                    }
                });
            });
        }
    });
});

define('home/order/buy',function(require,exports,module){
    //载入微调控件
    require('component/jquery.spinner');
    return Class({
        initial: function(){
            var self = this;
            //购买表单元素
            this.buyFormEle = $('#buyForm');
            //选择月份元素
            this.selectMonthEle = $('#selectMonth');
            //记录月份周期元素
            this.selectMonthCycleEle = $('#selectMonthCycle');
            //记录价格元素
            this.selectPriceEle = $('#selectPrice');
            //记录服务器日期
            this.serverDate = Util.getDate(Config.get('buyStartTime') * 1000);
            //记录单价
            this.buyPrice = Config.get('buyPrice');
            //记录起始日期
            this.startDate = Util.formartDate(this.serverDate,'yyyy-MM-dd');
            //记录结束日期
            // this.currentMonth = (new Date()).getMonth();
            this.endDate = this.serverDate;
            //记录结束日期时间戳
            this.endTime = this.endDate.getTime();
            //记录结束日期月份
            this.endMonth = this.endDate.getMonth();
            //绑定提交表单操作
            this.buyFormEle.submit(function(){
                $.dialog.confirm('确定支付已完成？', function(action){
                    if(action == 1){
                        location.reload();
                    }
                });
            });
            //绑定选择月份微调组件
            this.selectMonthEle.spinner({
                minValue: 1,
                maxValue: Number(Config.get('buyMonth')),
                onChange: function(){
                    var _value = Number(this.value());
                    self.countDate(_value);
                    self.countPrice(_value);
                },
                onCreate: function(){
                    this.options.onChange.call(this);
                }
            });
        },
        //计算时间
        countDate: function(month){
            this.endDate.setTime(this.endTime);
            this.endDate.setMonth(this.endMonth+month);
            this.selectMonthCycleEle.html('从'+this.startDate+'开始到'+Util.formartDate(this.endDate,'yyyy-MM-dd')+'截止');
        },
        //计算价格
        countPrice: function(month){
            this.selectPriceEle.val((this.buyPrice * month).toFixed(2));
        },
        instantiation: false
    });
})

define('home/order/index',function(require,exports,module){
    Class({
        //订单列表元素
        orderListEle: $('#orderList'),
        initial: function(){
            //绑定付款操作
            this.orderListEle.delegate('.pay','click',function(){
                if(!$(this).hasClass('disabled')){
                    $.dialog.confirm('确定支付已完成？',function(action){
                        if(action == 1){
                            location.reload();
                        }
                    })
                }else{
                    return false;
                }
            });
            //绑定取消操作
            this.orderListEle.delegate('.cancel','click',function(){
                var ele = $(this);
                if(!$(this).hasClass('disabled')){
                    $.dialog.confirm('确定取消订单吗？',function(action){
                        if(action == 1){
                            $.dialog.loading('操作中...');
                            $.ajax({
                                url: ele.attr('href'),
                                type: 'post',
                                success: function(data){
                                    if(data.status){
                                        location.reload();
                                    }else{
                                        $.dialog.error(data.info);
                                    }
                                },
                                complete: function(){
                                    $.dialog.get('loading').close();
                                }
                            });
                        }
                    });
                }
                return false;
            });
            //绑定删除操作
            this.orderListEle.delegate('.delete','click',function(){
                var ele = $(this);
                    if(!$(this).hasClass('disabled')){
                        $.dialog.confirm('确定删除订单吗？',function(action){
                        if(action == 1){
                            $.dialog.loading('操作中...');
                            $.ajax({
                                url: ele.attr('href'),
                                type: 'post',
                                success: function(data){
                                    if(data.status){
                                        location.reload();
                                    }else{
                                        $.dialog.error(data.info);
                                    }
                                },
                                complete: function(){
                                    $.dialog.get('loading').close();
                                }
                            });
                        }
                    });
                }
                return false;
            });
        }
    });
})

define('home/setting/info', function (require, exports, module) {
    //载入提交表单插件
    require('common/extend/validator/validator');
    //载入表单提交插件
    require('component/jquery.form');

    Class({
        //上传图片元素
        uploadCoverEle   : $('#uploadAvatar'),
        //修改密码表单元素
        userInfoAvatarEle: $('.m-manual-info .avatar img'),
        userInfoFormEle  : $('#userInfoForm'),
        uploadNumber     : 0,
        initial          : function () {
            var self = this;

            //绑定上传图片操作
            this.uploadCoverEle.click(function () {
                if (!self.cutImageDialog) {
                    //打开裁剪对话框
                    self.cutImageDialog = $.dialog('<div class="m-dialog-loading"><b class="loading-text">裁剪组件加载中...</b></div>', {
                        title: '头像裁剪',
                        cache: true
                    });
                    //异步加载裁剪组件
                    require.async('common/module/cutImage', function (cutImage) {
                        //实例化裁剪组件
                        self.cutCover = new cutImage({
                            cls       : 'm-cover-cutting',
                            cutWidth  : 150,
                            cutHeight : 150,
                            boxWidth  : 420,
                            boxHeight : 300,
                            uploadUrl : Config.get('uploadAvatarUrl'),
                            saveCutUrl: Config.get('saveAvatarUrl'),
                            onSuccess : function (data) {
                                var _image = self.uploadCoverEle.find('img');
                                var _src = data.data.url.indexOf('?') >= 0 ? data.data.url + '&v=' + self.uploadNumber : data.data.url + '?v=' + self.uploadNumber;
                                self.cutImageDialog.close();
                                self.uploadNumber++;
                                if (!_image.length) {
                                    _image = $('<img/>');
                                    self.uploadCoverEle.find('.upload-image').html(_image);
                                }
                                self.userInfoAvatarEle.attr('src', _src)
                                _image.attr('src', _src);
                            }
                        });
                        self.cutImageDialog.content(self.cutCover.getHtml());
                        self.cutImageDialog.offset(self.cutImageDialog._options.offset[0], self.cutImageDialog._options.offset[1]);
                    });
                } else {
                    self.cutImageDialog.open();
                }
            });

            this.userInfoFormEle.submitForm({
                autoValidate: false,
                onAfter     : function (data) {
                    if (data.status) {
                        $.dialog.success(data.info);
                    } else {
                        $.dialog.error(data.info);
                    }
                }
            });
        }
    });
})

define('home/setting/kindle', function (require, exports, module) {
    Class({

        initial        : function () {
            var self = this;
            //绑定提交修改密码表单操作
            $('#kindleForm').submitForm({
                autoValidate: false,
                onAfter     : function (data) {
                    if (data.status) {
                        $.dialog.success(data.info, function () {
                            window.location.reload();
                        });
                    } else {
                        if (typeof data.info == 'string') {
                            $.dialog.error(data.info);
                        }
                    }
                }
            });
        }
    });
})

define('home/setting/oauth', function (require, exports, module) {
    Class({
        //手册列表元素
        oauthListEle: $('.m-oauth-list'),
        initial     : function () {
            //绑定取消关注操作
            this.oauthListEle.delegate('.oauth-cancel', 'click', function () {
                var _ele = $(this), _type = $(this).data('type');
                $.dialog.confirm('确定取消绑定吗？', function (action) {
                    if (action == 1) {
                        $.ajax({
                            url    : _ele.data('href'),
                            data   : {type: _type},
                            type   : 'post',
                            success: function (data) {
                                if (data.status) {
                                    location.reload();
                                } else {
                                    $.dialog.error(data.info);
                                }
                            }
                        })
                    }
                });
                return false;
            });
        }
    });
})

define('home/setting/security', function (require, exports, module) {
    Class({
        //修改密码表单元素
        securityFormEle: $('#securityForm'),
        initial        : function () {
            var self = this;
            //绑定提交修改密码表单操作
            this.securityFormEle.submitForm({
                autoValidate: false,
                onAfter     : function (data) {
                    if (data.status) {
                        $.dialog.success(data.info, function () {
                            window.location.reload();
                        });
                    } else {
                        if (typeof data.info == 'string') {
                            $.dialog.error(data.info);
                        }
                    }
                }
            });
        }
    });
})

define('home/space/centre/index', function (require, exports, module) {

    require('component/semantic-ui-tab/tab.min');
    Class({
        //排序
        tabEle : $('.nav-tabs .navg-item'),
        initial: function () {
            this.tabEle.tab({
                selector: {
                    tabs: '.tab-content'
                }
            });
        }
    })
    ;
})
;

define('home/special/index', function (require, exports, module) {

    var Sharing = require('common/module/sharing');
    return Class({


        initial: function () {

            //分享文章
            new Sharing({
                cover  : Config.get('sharePicUrl'),
                url    : location.href,
                title  : Config.get('shareTitle'),
                summary: Config.get('shareContent')
            });
        }
    });
});
define('home/tag/detail', function (require, exports, module) {

    var Sharing = require('common/module/sharing');
    return Class({


        initial: function () {

            //分享文章
            new Sharing({
                cover  : Config.get('sharePicUrl'),
                url    : location.href,
                title  : '给你推荐的看云 [ ' + Config.get('shareTitle') + ' ] 专题文档列表',
                summary: Config.get('shareContent')
            });
        }
    });
});
define('home/tag/index', function (require, exports, module) {

    require('component/jqcloud/jqcloud-1.0.4.min');
    require('component/jqcloud/jqcloud.css');
    return Class({
        initial: function () {
            $(".tag-cate").empty();
            $(".tag-cate").jQCloud(Config.get('words'));
            $(".tag-cate").css('visibility','visible');
        }
    });
});
define('home/team/create', function (require, exports, module) {
    //载入弹出层
    require('component/dialog/jquery.dialog');
    return Class({
        initial: function () {
            $('.team-creator').click(function () {
                $.dialog.open('/team/create', {
                    title     : '创建团队',
                    style     : 'think-dialog think-dialog-load',
                    onComplete: function () {
                        var $form = this.bodyElement.find('form');
                        $form.submitForm({
                            autoValidate: false,
                            onAfter     : function (data, options) {
                                if (data.status) {
                                    if (data.url) {
                                        location.replace(data.url);
                                    }
                                } else {
                                    if (typeof data.info == 'string') {
                                        $.dialog.error(data.info);
                                    }
                                }
                            }
                        });
                        $form.data('submitButton', this.okBtn);
                    },
                    onOk      : function () {
                        this.bodyElement.find('form').submit();
                    }
                });

            });

        }
    });
});

define('home/team/index',function(require,exports,module){
    
    
});

define('home/team/member', function (require, exports, module) {

    require('component/select2/dist/css/select2.min.css');
    require('component/select2/dist/js/select2.full.min');
    //载入公共操作
    return Class({
        //记录选择成员元素
        selectMemberEle: $('#selectMember'),
        //当前手册
        currentTeamId  : Config.get('currentTeam'),
        //记录成员列表元素
        memberListEle  : $('#memberList'),
        initial        : function () {
            var self = this;

            //绑定添加成员操作
            this.selectMemberEle.click(function () {
                var $html, dialog;
                $html = $("<div/>").addClass("m-manual-add").html('' +
                    '<form class="w-form form-horizon dialog-form" method="post">' +
                    '<div class="form-item">' +
                    '<span class="form-label">用户</span>' +
                    '<div class="form-target">' +
                    '<label class="w-select select-m">' +
                    '<select class="select-input" name="user" multiple="multiple"></select>' +
                    '</label>' +
                    '</div>' +
                    '</div>' +
                    '<div class="form-item">' +
                    '<span class="form-label">角色</span>' +
                    '<div class="form-target">' +
                    '<label class="w-select select-m">' +
                    '<select class="select-input" name="role"></select>' +
                    '</label>' +
                    '</div>' +
                    '</div>' +
                    '</div>');

                //弹出图片上传层
                dialog = $.dialog.form($html, {
                    "title" : "添加成员",
                    onCreate: function () {
                        var _form = this.bodyElement.find('form');
                        _form.append($('<input type="hidden" name="team_id" value="' + self.currentTeamId + '">'));
                        _form.attr('action', Config.get('createUserUrl'));

                        _form.find('[name="role"]').append(function () {
                            var options = "";
                            $.each(Config.get('accessRoles'), function (k, v) {
                                options += "<option value='" + v + "'>" + k + "</option>"
                            });
                            return options;
                        });

                        _form.find('[name="user"]').select2({
                            placeholder      : '输入用户名或者邮箱',
                            width            : 232,
                            multiple         : true,
                            ajax             : {
                                url           : '/team/member/user',
                                data          : function (params) {
                                    return {search: params.term, team_id: self.currentTeamId}
                                },
                                processResults: function (data) {
                                    return {
                                        results: data
                                    };
                                }
                            },
                            templateResult   : function (state) {
                                if (!state.id) {
                                    return state.text;
                                }
                                return $(
                                    '<div style="line-height: 20px;white-space:nowrap;overflow: hidden;text-overflow: ellipsis; font-weight: bold;"><img style="border-radius: 3px;" src="' + state.avatar + '" width="20" height="20" /> ' + state.username + ' <span style="font-weight: normal;">' + state.name + '</span></div>'
                                );
                            }
                            ,
                            templateSelection: function (state) {
                                return state.name || state.text;
                            }
                        });
                        _form.submitForm({
                            onBefore: function (options) {
                                var user = _form.find('[name="user"]').val();
                                if (!user) {
                                    $.dialog.error('请选择用户');
                                    return false;
                                }
                                options.data.user = user;
                            },
                            onAfter : function (data, options) {
                                if (data.status) {
                                    window.location.reload();
                                } else {
                                    $.dialog.error(data.info);
                                }
                            }
                        });
                    }
                });
            });
            //绑定删除成员操作
            this.memberListEle.delegate('.delete', 'click', function () {
                var _id = $(this).closest('.m-member-item').data('id'), $this = $(this);
                $.dialog.confirm('确定要删除该用户吗？', function (action) {
                    if (action == 1) {
                        $.ajax({
                            url    : Config.get('delMemberPath'),
                            data   : {id: _id, team_id: self.currentTeamId},
                            context: this,
                            type   : 'post',
                            success: function (data) {
                                if (data.status) {
                                    $this.closest('.m-member-item').remove();
                                } else {
                                    $.dialog.error(data.info);
                                }
                            }
                        });
                    }
                });
            });
            this.memberListEle.delegate('.leave', 'click', function () {
                $.dialog.confirm('确定要退出吗？', function (action) {
                    if (action == 1) {
                        $.ajax({
                            url    : Config.get('leaveUserUrl'),
                            data   : {team_id: self.currentTeamId},
                            context: this,
                            type   : 'post',
                            success: function (data) {
                                if (data.status) {
                                    window.location.href = '/user/team';
                                } else {
                                    $.dialog.error(data.info);
                                }
                            }
                        });
                    }
                });
            });
            //绑定设置成员角色操作
            this.memberListEle.delegate('.role>select', 'change', function () {
                var _id = $(this).closest('.m-member-item').data('id');
                $.ajax({
                    url    : Config.get('setMemberRolePath'),
                    data   : {id: _id, role: $(this).val(), team_id: self.currentTeamId},
                    context: this,
                    type   : 'post',
                    success: function (data) {
                        if (data.status) {
                            $.dialog.success(data.info);
                        } else {
                            $.dialog.error(data.info);
                        }
                    }
                });
            });
        },
    });
})

define('home/team/setting', function (require, exports, module) {
    //载入提交表单插件
    require('common/extend/validator/validator');
    //载入表单提交插件
    require('component/jquery.form');
    return Class({
        //上传图片元素
        uploadCoverEle: $('#uploadAvatar'),
        //修改密码表单元素
        teamAvatarEle : $('.m-manual-info .avatar img'),
        teamFormEle   : $('#teamForm'),
        uploadNumber  : 0,
        //记录当前手册ID
        teamId        : Config.get('teamId'),
        initial       : function () {
            var self = this;
            //绑定上传图片操作
            this.uploadCoverEle.click(function () {
                if (!self.cutImageDialog) {
                    //打开裁剪对话框
                    self.cutImageDialog = $.dialog('<div class="m-dialog-loading"><b class="loading-text">裁剪组件加载中...</b></div>', {
                        title: '封面裁剪',
                        cache: true
                    });
                    //异步加载裁剪组件
                    require.async('common/module/cutImage', function (cutImage) {
                        //实例化裁剪组件
                        self.cutCover = new cutImage({
                            cls         : 'm-cover-cutting',
                            cutWidth    : 173,
                            cutHeight   : 173,
                            boxWidth    : 420,
                            boxHeight   : 300,
                            uploadUrl   : Config.get('uploadAvatarUrl'),
                            uploadParam : {team_id: Config.get('teamId')},
                            saveCutUrl  : Config.get('saveAvatarUrl'),
                            saveCutParam: {team_id: Config.get('teamId')},
                            onSuccess   : function (data) {
                                var _image = self.uploadCoverEle.find('img');
                                var _src = data.data.url.indexOf('?') >= 0 ? data.data.url + '&v=' + self.uploadNumber : data.data.url + '?t=' + self.uploadNumber;
                                self.cutImageDialog.close();
                                self.uploadNumber++;
                                if (!_image.length) {
                                    _image = $('<img/>');
                                    self.uploadCoverEle.find('.upload-image').html(_image);
                                }
                                self.teamAvatarEle.attr('src', _src);
                                _image.attr('src', _src);
                            }
                        });
                        self.cutImageDialog.content(self.cutCover.getHtml());
                        self.cutImageDialog.offset(self.cutImageDialog._options.offset[0], self.cutImageDialog._options.offset[1]);
                    });
                } else {
                    self.cutImageDialog.open();
                }
            });
            //绑定提交登录表单操作
            this.teamFormEle.submitForm({
                autoValidate: false,
                onAfter     : function (data) {
                    if (data.status) {
                        $.dialog.success(data.info);
                    } else {
                        $.dialog.error(data.info);
                    }
                }
            });

            //绑定删除操作
            $('#teamDelete').click(function () {
                $.dialog.confirm('确定删除吗', function (action) {
                    if (action == 1) {
                        $.ajax({
                            url    : '/team/setting/delete',
                            data   : {team_id: Config.get('teamId')},
                            type   : 'post',
                            success: function (data) {
                                if (data.status) {
                                    location.href = data.url;
                                } else {
                                    $.dialog.error(data.info);
                                }
                            }
                        })
                    }
                });
                return false;
            });
        }
    });
});

define('home/topic/detail', function (require, exports, module) {
    //载入评论模块
    var Comment = require('common/module/comment');
    var Sharing = require('common/module/sharing');
    Class({
        //评论元素
        commentEle   : $('#comment'),
        //按钮列表元素
        manualListEle: $('#manualList'),
        initial      : function () {
            this.comment = new Comment({
                wrapEle  : this.commentEle,
                postParam: {
                    book_id: Config.get('bookId')
                },
                delParam : {
                    book_id: Config.get('bookId'),
                    doc_id : Config.get('articleId')
                },
                votePath : Config.get('commentVotePath'),
                onePath  : Config.get('commentOnePath'),
                listPath : Config.get('commentListPath'),
                delPath  : Config.get('commentDelPath'),
                addPath  : Config.get('commentAddPath'),
                onCreate : function () {
                    this.articleIdHiddenEle = $('<input type="hidden" name="doc_id" value="' + Config.get('articleId') + '" />');
                    this.postEnterEle.after(this.articleIdHiddenEle);
                }
            });

            var hash = location.hash.substr(1);

            var _hashSplit = null;
            if (hash && hash.indexOf('-') >= 0) {
                _hashSplit = hash.split('-');
            }
            if (_hashSplit && _hashSplit[0] == 'comment' && _hashSplit[1]) {
                this.comment.loadOne({
                    id     : _hashSplit[1],
                    doc_id : 0,
                    book_id: 0
                }, function (data) {
                    this.assignList({
                        doc_id : Config.get('articleId'),
                        book_id: 0
                    }, function () {
                        if (data.status) {
                            this.addItem(data.data, true, false);
                        }
                    });
                    Util.scrollTop(this.listEle, -120);
                });
            } else {
                //加载评论
                this.comment.assignList({
                    doc_id : Config.get('articleId'),
                    book_id: 0
                });
            }


            //绑定修改状态操作
            this.manualListEle.delegate("a[class$='topic_op_status']", 'click', function () {
                var _ele = $(this), _id = $(this).data('id'), _opstatus = $(this).data('opstatus'), _tips = $(this).data('tips');
                $.dialog.confirm(_tips, function (action) {
                    if (action == 1) {
                        $.ajax({
                            url    : _ele.data('href'),
                            data   : {id: _id, op_status: _opstatus},
                            type   : 'post',
                            success: function (data) {
                                if (data.status) {
                                    location.reload();
                                } else {
                                    $.dialog.error(data.info);
                                }
                            }
                        })
                    }
                });
                return false;
            });
            //绑定置顶、删除操作
            this.manualListEle.delegate("a[class$='e-operate']", 'click', function () {
                var _ele = $(this), _id = $(this).data('id'), _tips = $(this).data('tips');
                $.dialog.confirm(_tips, function (action) {
                    if (action == 1) {
                        $.ajax({
                            url    : _ele.data('href'),
                            data   : {id: _id},
                            type   : 'post',
                            success: function (data) {
                                if (data.status) {
                                    location.href = data.url;
                                } else {
                                    $.dialog.error(data.info);
                                }
                            }
                        })
                    }
                });
                return false;
            });
            //分享文章
            new Sharing({
                cover  : Config.get('sharePicUrl'),
                url    : location.href,
                title  : Config.get('shareTitle'),
                summary: ""
            });
        }
    });
})

define('home/topic/send', function (require, exports, module) {
    //载入ThinkEditor编辑器
    var editor = require('common/module/editor');
    Class({
        //反馈内容元素
        suggestContentEle: $('#suggestContent'),
        //反馈表单元素
        suggestFormEle   : $('#suggestForm'),
        initial          : function () {
            var self = this;
            //初始获取编辑器
            this.getEditor();
            //绑定提交反馈表单操作
            this.suggestFormEle.submitForm({
                onBefore: function (options) {
                    options.data.content = self.getEditor().getValue();
                },
                onAfter : function (data) {
                    if (data.status) {
                        $.dialog.success(data.info, function () {
                            if (data.url) {
                                location.href = data.url;
                            } else {
                                location.reload();
                            }
                        });
                    } else {
                        if (typeof data.info == 'string') {
                            $.dialog.error(data.info);
                        }
                    }
                }
            });

        },
        //获取文章编辑器
        getEditor        : function () {
            var self = this;
            if (!this._editor) {
                self.suggestContentEle.addClass('editor');
                this._editor = editor(self.suggestContentEle.find('textarea'), {
                    items   : ["undo,redo,-,h1,h2,h3,h4,-,bold,italic,-,ul,ol,-,link,image,code,hr,blockquote,table,htmlpaste", "preview,fullscreen,help"],
                    uploader: {
                        url: Config.get('uploadImageUrl')
                    },
                    tools   : {
                        htmlpaste: {
                            exec    : function () {
                                var editor = this;

                                //载入html转md插件
                                require.async('component/to-markdown/dist/to-markdown', function () {

                                    var $text, $iframe, $html, doc, dialog,
                                        ie  = navigator.userAgent.toLowerCase().indexOf('msie') > -1 && navigator.userAgent.toLowerCase().indexOf('opera') == -1,
                                        downloadAjax;
                                    //拖动上传容器
                                    $text   = $("<p />").text('请使用快捷键(Ctrl+V)把内容粘贴到下面的方框里。');
                                    $iframe = $('<iframe frameborder="0" style="width:600px;height:260px;padding: 5px;"></iframe>');
                                    $html   = $("<div/>").addClass("thinkeditor-plugin-htmlpaste")
                                        .append($text).append($iframe);

                                    //弹出图片上传层
                                    dialog = $.dialog.open($html, {
                                        "title"   : '从HTML粘贴',
                                        "onCancel": function () {
                                        },
                                        "onOk"    : function () {
                                            var str  = doc.body.innerHTML;
                                            str      = str.replace(/~/g, '~T');
                                            str      = str.replace(/`/g, '~E');
                                            str      = str.replace(/\$/g, '~D');
                                            str      = toMarkdown(str, {gfm: true});
                                            var cnum = 0, arrcode = [];
                                            str      = str.replace(/~~~([\s\S]*?)~~~/g, function (all) {//code特殊处理
                                                cnum++;
                                                arrcode[cnum] = all;
                                                return "[\tcodeplace_" + cnum + "\t]";
                                            });
                                            str      = str.replace(/(`+)([^\r]*?[^`])\1(?!`)/g, function (wholeMatch, m1, m2, m3) {//code特殊处理
                                                cnum++;
                                                arrcode[cnum] = wholeMatch;
                                                return "[\tcodeplace_" + cnum + "\t]";
                                            });
                                            str      = str.replace(/<\/?.+?>/g, "");
                                            str      = str.replace(/\n{2,}/g, "\n\n");

                                            for (var i = 1; i <= cnum; i++) {
                                                str = str.replace("[\tcodeplace_" + i + "\t]", function () {
                                                    return arrcode[i];
                                                });
                                            }

                                            str = str.replace(/~D/g, '$$');
                                            str = str.replace(/~E/g, '`');
                                            str = str.replace(/~T/g, '~');

                                            editor.insert(str);
                                            dialog.close();
                                        }
                                    });

                                    doc = $iframe[0].contentDocument || $iframe[0].contentWindow.document;
                                    if (!ie) {
                                        doc.designMode = 'on';
                                    }
                                    doc.open();
                                    doc.write('<!doctype html><html style="height:100%;"><head><title>WordPaste</title></head>');
                                    doc.write('<body style="background-color:#ffffff;font-size:12px;padding:0px;margin:0px;height: 100%;">');
                                    if (!ie) {
                                        doc.write('<br />');
                                    }
                                    doc.write('</body></html>');
                                    doc.close();
                                    if (ie) {
                                        doc.body.contentEditable = 'true';
                                    }
                                    $iframe[0].contentWindow.focus();
                                });
                            },
                            markdown: true
                        }
                    }
                });

            }
            return this._editor;
        }

    });
});

define('home/user/coin', function (require, exports, module) {

    require('component/infinite-ajax-scroll/dist/jquery-ias.min');

    Class({
        initial: function () {
            var self = this;
            $('#btn-withdrawals').on('click', function () {
                var postUrl = Config.get('postUrl');
                var userCoin = Config.get('userCoin');
                var minCoin = Config.get('minCoin');
                var banks = Config.get('banks');
                var bankType = Config.get('bankType');
                var bankAccount = Config.get('bankAccount');
                var trueName = Config.get('trueName');

                var $form = self.createWithdrawalsForm();
                $.dialog.form($form, {
                    title: '提现申请',
                    onCreate: function () {
                        var _form = $form.find('form');
                        _form.attr('action', postUrl);

                        // 设置可提现金额
                        var userPriceEle = $form.find('.user-price');
                        var inputPriceEle = $form.find('[name=price]');
                        if (userCoin > minCoin) {
                            userPriceEle.html('￥' + userCoin / 100);
                            inputPriceEle.val(userCoin / 100);
                        } else {
                            userPriceEle.html('￥' + (userCoin / 100) + ' （<span style=" color: red">' + '不足￥' + (minCoin/100) + '不能提现</span>）');
                            inputPriceEle.val(0);
                        }

                        for (var i in banks) {
                            $form.find('[name=bank_type]').append('<option value="' + banks[i].value + '">' + banks[i].text + '</option>');
                        }
                        $form.find('[name=bank_type]').val(bankType);
                        $form.find('[name=bank_account]').val(bankAccount);
                        $form.find('[name=true_name]').val(trueName);

                        _form.submitForm({
                            onBefore: function (options) {
                                if (inputPriceEle.val() * 100 > userCoin) {
                                    $.dialog.error('你输入的金额大于你的云币总数');
                                    return false;
                                }
                            },
                            onAfter: function (data, options) {
                                if (data.status) {
                                    $.dialog.success('申请成功, 我们会尽快打款到你指定的帐号');
                                    setTimeout(function () {
                                        window.location.reload();
                                    }, 3000);
                                } else {
                                    $.dialog.error(data.info);
                                }
                            }
                        });
                    }
                });
            });

            var ias = jQuery.ias({
                container: '.m-history-list',
                item: '.m-history-item',
                pagination: '.m-paging',
                next: '.m-paging .next'
            });
            ias.extension(new IASSpinnerExtension());            // shows a spinner (a.k.a. loader)
            ias.extension(new IASTriggerExtension({offset: 3, text: '点击加载更多'})); // shows a trigger after page 3
            ias.extension(new IASNoneLeftExtension({
                text: '没有更多了'      // override text when no pages left
            }));
        },
        createWithdrawalsForm: function () {
            return $("<div/>").addClass("withdrawals").html('' +
                    '<form class="w-form form-horizon dialog-form" method="post">' +
                    '<div class="form-item">' +
                    '<span class="form-label">可提现金额</span>' +
                    '<div class="form-target" style=" line-height: 22px; padding:6px 0px;">' +
                    '<span class="user-price">$100</span>' +
                    '</div>' +
                    '</div>' +
                    '<div class="form-item">' +
                    '<span class="form-label">提现金额</span>' +
                    '<div class="form-target">' +
                    '<label class="w-text text-m">' +
                    '<input class="text-input" type="number" style="width: 100px;" name="price" />' +
                    '</label>' +
                    '</div>' +
                    '</div>' +
                    '<div class="form-item">' +
                    '<span class="form-label">收款账户类型</span>' +
                    '<div class="form-target">' +
                    '<label class="w-select select-m">' +
                    '<select class="select-input" name="bank_type"></select>' +
                    '</label>' +
                    '</div>' +
                    '</div>' +
                    '<div class="form-item">' +
                    '<span class="form-label">收款账户名</span>' +
                    '<div class="form-target">' +
                    '<label class="w-text text-m">' +
                    '<input class="text-input" type="text" style="width: 180px;" name="bank_account" />' +
                    '</label>' +
                    '</div>' +
                    '</div>' +
                    '<div class="form-item">' +
                    '<span class="form-label">收款人</span>' +
                    '<div class="form-target">' +
                    '<label class="w-text text-m">' +
                    '<input class="text-input" type="text" style="width: 100px;" name="true_name" />' +
                    '</label>' +
                    '</div>' +
                    '</div>' +
                    '<div class="form-item" style="margin-bottom: 0px">' +
                    '<a href="http://help.kancloud.cn/113596" target="_blank">提现须知</a>' +
                    '</div>' +
                    '</form>');
        }
    });
});
define('home/user/enterprise', function (require, exports, module) {
    var Order = require('common/module/order');

    return Class({
        initial: function () {
            // 专业版购买按钮
            $('.enterprise-upgrade').click(function () {
                new Order({
                    title    : '欢迎使用企业版',
                    type     : 'EnterpriseProduct',
                    infoTpl  : [
                        '<div class="form-item">',
                        '<span class="form-label">购买时长：</span>',
                        '<div class="form-target">',
                        '<label class="w-radio radio-vertical">',
                        '<input class="radio-input" type="radio" data-price="6000" name="year" value="1" checked="checked" />',
                        '<span class="radio-text">1年 ￥6000元</span>',
                        '</label>',
                        '</div>',
                        '</div>',
                    ].join(''),
                    coupon   : true,
                    coin     : Config.get('userCoin'),
                    price    : function () {
                        return parseInt(this.wrapEle.find('[name=year]:checked').data('price') * 100);
                    },
                    data     : function () {
                        return {
                            year: parseInt(this.wrapEle.find('[name=year]:checked').val()),
                            name: Config.get('namespace')
                        };
                    },
                    onInit   : function () {
                        var self = this;
                        // 设置价格
                        this.wrapEle.find('[name=year]').click(function () {
                            self.freshPrice();
                        });
                        this.wrapEle.find('[name=year]').change(function () {
                            self.freshPrice();
                        });
                    },
                    onSuccess: function () {
                        location.reload();
                    }
                });
            });
        }
    });
});

define('home/user/notification', function (require, exports, module) {
    Class({
        notificationListEle: $('#notificationList'),
        readAllEle         : $('#readAll'),
        removeAllEle       : $('#removeAll'),

        initial: function () {
            this.notificationListEle.on('click', 'dl', function () {
                var id    = $(this).data('id');
                var $this = $(this);
                $.post(Config.get('readUrl'), {id: id}).done(function () {
                    $this.removeClass('unread');
                });
            });

            this.notificationListEle.on('click', '.del', function () {
                var id = $(this).parents('dl').data('id');
                $.dialog.confirm('确定要删除吗', function (action) {
                    if (action == 1) {
                        $.post(Config.get('removeUrl'), {id: id}).done(function () {
                            location.reload();
                        });
                    }
                });
            });

            this.readAllEle.click(function () {
                $.post(Config.get('readUrl')).done(function () {
                    location.reload();
                });
            });
            this.removeAllEle.click(function () {
                $.dialog.confirm('确定要清空吗', function (action) {
                    if (action == 1) {
                        $.post(Config.get('removeUrl')).done(function () {
                            location.reload();
                        });
                    }
                });
            });

        }
    })
})

define('home/user/profession', function (require, exports, module) {
    var Order = require('common/module/order');

    return Class({
        initial: function () {
            // 专业版购买按钮
            $('.profession-upgrade').click(function () {
                new Order({
                    title    : '欢迎使用专业版',
                    type     : 'ProfessionProduct',
                    infoTpl  : [
                        '<div class="form-item">',
                        '<span class="form-label">购买时长：</span>',
                        '<div class="form-target">',
                        '<label class="w-radio radio-vertical">',
                        '<input class="radio-input" type="radio" data-price="36" name="month" value="1" checked="checked" />',
                        '<span class="radio-text">1个月 ￥36元</span>',
                        '</label>',
                        '<label class="w-radio radio-vertical">',
                        '<input class="radio-input" type="radio" data-price="108" name="month" value="3" />',
                        '<span class="radio-text">3个月 ￥108元</span>',
                        '</label>',
                        '<label class="w-radio radio-vertical">',
                        '<input class="radio-input" type="radio" data-price="216" name="month" value="6" />',
                        '<span class="radio-text">6个月 ￥216元</span>',
                        '</label>',
                        '<label class="w-radio radio-vertical">',
                        '<input class="radio-input" type="radio" data-price="180" name="month" value="12" />',
                        '<span class="radio-text">1年 ￥180元 <del>￥432元</del>(限时特惠)</span>',
                        '</label>',
                        '</div>',
                        '</div>',
                    ].join(''),
                    coupon   : true,
                    coin     : Config.get('userCoin'),
                    price    : function () {
                        return parseInt(this.wrapEle.find('[name=month]:checked').data('price') * 100);
                    },
                    data     : function () {
                        return {
                            month: parseInt(this.wrapEle.find('[name=month]:checked').val()),
                            name : Config.get('namespace')
                        };
                    },
                    onInit   : function () {
                        var self = this;
                        // 设置价格
                        this.wrapEle.find('[name=month]').click(function () {
                            self.freshPrice();
                        });
                        this.wrapEle.find('[name=month]').change(function () {
                            self.freshPrice();
                        });
                    },
                    onSuccess: function () {
                        location.reload();
                    }
                });
            });
        }
    });
});

define('common/extend/bootstrap/bootstrap', function(require,exports,module){
    //bootstrap扩展
    (function(){
        //扩展Button按钮控件
        var Button = $.fn.button.Constructor;
        $.extend(Button.prototype,{
            disabled: function(status){
                this.isDisabled = typeof status == 'undefined' ? true : status;
                this.$element.attr('disabled', this.isDisabled);
                return this;
            },
            initialed: function(){
                var _self = this;
                this.$element.click(function(event){
                    if(_self.isDisabled){
                        event.stopImmediatePropagation();
                    }
                });
            }
        });
        $.fn.button = function(option){
            var args = arguments;
            return this.each(function () {
                var $this   = $(this);
                var data    = $this.data('bs.button');
                var options = typeof option == 'object' && option;
                if(!data){
                    $this.data('bs.button', (data = new Button(this, options)));
                    $.isFunction(data.initialed) && data.initialed.call(data);
                };
                if (option == 'toggle'){
                    data.toggle();
                }else if(option == 'disabled'){
                    data.disabled.apply(data,Array.prototype.slice.call(args,1));
                } else if (option) {
                    data.setState(option);
                }
            });
        };
    })();
})

define('common/extend/dialog/dialog', function (require, exports, module) {
    //载入弹出层
    require('component/dialog/jquery.dialog');
    //载入验证插件
    require('common/extend/validator/validator');
    //dialog对话框扩展
    (function () {
        //表单对话框
        $.extend($.dialog, {
            form: function (url, options) {
                var _options = options || {};
                var _praseData = _options.praseData;
                var _onBefore = _options.onBefore;
                var _onAfter = _options.onAfter;
                var _onCreate = _options.onCreate;
                _options = $.extend({
                    drag: false
                }, _options);
                var _cancelBtn = function () {
                    var _self = this;
                    _self.cancelBtn = $('<label class="w-btn btn-default btn-m"><button class="btn-input">取消</button></label>');
                    _self.cancelBtn.click(function () {
                        _self.close();
                    });
                    return _self.cancelBtn;
                };
                var _defineBtn = function () {
                    var _self = this;
                    _self.defineBtn = $('<label class="w-btn btn-success btn-m"><button class="btn-input">确定</button></label>');
                    _self.defineBtn.click(function () {
                        _self.formEle.submit();
                    });
                    return _self.defineBtn;
                };
                if (typeof url != 'string') {
                    _options.button = [_defineBtn, _cancelBtn];
                    _options.onCreate = function () {
                        var _content = this.content();
                        _content.data('dialog', this);
                        //记录表单元素
                        this.formEle = _content.find('.dialog-form');
                        //缓存表单提交按钮
                        this.formEle.data('submitButton', this.defineBtn);
                        $.isFunction(_onCreate) && _onCreate.call(this);
                    };
                    return $.dialog(url, _options);
                } else {
                    _options.praseData = function (data) {
                        var data = $.isFunction(_praseData) ? _praseData.call(this, data) : data;
                        if (data === false) {
                            return false;
                        }
                        data = $(data);
                        //设置按钮
                        this.setButton([_defineBtn, _cancelBtn]);
                        //缓存对话框实例
                        data.data('dialog', this);
                        //记录表单元素
                        this.formEle = data.find('form');
                        //缓存表单提交按钮
                        this.formEle.data('submitButton', this.defineBtn);
                        return data;
                    };
                    return $.dialog.load(url, _options);
                }
            },
            open: function (url, options) {
                options = options || {};
                var cancelBtn = function () {
                    var _self = this;
                    _self.cancelBtn = $('<label class="w-btn btn-default btn-m"><button class="btn-input">取消</button></label>');
                    _self.cancelBtn.click(function () {
                        _self.close();
                        $.isFunction(options.onCancel) ? options.onCancel.call(this) : "";
                    });
                    return _self.cancelBtn;
                };
                var okBtn = function () {
                    var _self = this;
                    _self.okBtn = $('<label class="w-btn btn-success btn-m"><button class="btn-input">确定</button></label>');
                    _self.okBtn.click(function () {
                        $.isFunction(options.onOk) ? options.onOk.call(_self) : "";
                    });
                    return _self.okBtn;
                };
                if (typeof url != 'string') {
                    options.button = [okBtn, cancelBtn];
                    options.content = url;
                    return $.dialog(options);
                } else {
                    var praseData = options.praseData;
                    options.praseData = function (data) {
                        data = $.isFunction(praseData) ? praseData.call(this, data) : data;
                        if (data === false) {
                            return false;
                        }
                        data = $(data);
                        //设置按钮
                        this.setButton([okBtn, cancelBtn]);

                        return data;
                    };
                    return $.dialog.load(url, options);
                }
            }
        });
    })();
});

define('common/extend/showdown/xss', function (require, exports, module) {

    var xss = require('component/xss/dist/xss');

    return [
        {
            type: 'output',
            filter: function (html) {
                if (xss) {
                    var options = {
                        whiteList: $.extend(xss.whiteList, {
                            form: ['method', 'action'],
                            input: ['type', 'value', 'disabled', 'name','required','placeholder'],
                            label: [],
                            slide: ['class', 'style'],
                            select: ['class', 'name'],
                            option: ['value'],
                            hgroup: [],
                            embed: ['src', 'type', 'allowscriptaccess', 'allowfullscreen', 'wmode', 'width', 'height'],
                            td: ['width', 'colspan', 'align', 'valign', 'rowspan']
                        }),
                        onIgnoreTagAttr: function (tag, name, value, isWhiteAttr) {
                            if (name === 'id' || name.substr(0, 5) === 'data-' || name.substr(0, 5) === 'aria-' || name === 'class' || name === 'style') {
                                return name + '="' + xss.escapeAttrValue(value) + '"';
                            }
                        }
                    };

                    return xss(html, options);
                } else {
                    return html;
                }
            }
        }
    ];
});
define('common/extend/template',function(require, exports, module){
    //载入数据缓存类
    var Cache = require('common/library/cache');
    //载入模版引擎插件
    var Template = require('component/template/template');
    //设置模版引擎数据
    Template.setData = function(data){
        Cache.set('TEMPLATE_DATA', $.extend({},Cache.get('TEMPLATE_DATA'), data));
    }
    //获取模版
    Template.getTemp = function(temp,callback){
        var _type = $.type(temp), _temp = '';
        if(_type == 'object'){
            _temp = $(temp).html();
            $.isFunction(callback) && callback(_temp);
        }else if(Util.isUrl(temp)){
            var _data = temp.split('#');
            _temp = Cache.get(_data[0]);
            if(!_temp){
                Util.ajax({
                    url : _data[0],
                    dataType : 'html',
                    success : function(data){
                        _temp = data || '';
                        if(data && _data[1]){
                            _temp = $(data).filter('#'+_data[1]).html();
                        }
                        Cache.set(_data[0], data);
                        $.isFunction(callback) && callback(_temp);
                    }
                });
            }else{
                if(_data[1]){
                    _temp = $(_temp).filter('#'+_data[1]).html();
                    $.isFunction(callback) && callback(_temp);
                }
            }
        }else{
            _temp = String(temp);
            $.isFunction(callback) && callback(_temp);
        }
    };
    //删除模版引擎数据
    Template.delData = function(name){
        var _cacheData = Cache.get('TEMPLATE_DATA');
        if(name in _cacheData){
            delete _cacheData[name];
        }
    };

    //解析数据模版
    Template.parseTemp = function(temp, data, name){
        return Template.compile(temp)($.extend({},data,Cache.get('TEMPLATE_DATA')), name);
    };

    return Template;

})

define('common/extend/validator/validator', function (require, exports, module) {
    //载入验证插件
    require('component/jquery-plugs/jquery.validator');
    //载入jquery.form插件
    require('component/jquery.form');
    //将表单元素序列化为对象字面量
    function serializeObject(form) {
        var _object = {};
        if (form.nodeName == 'FORM') {
            var _value = $(form).serializeArray();
            for (var i = 0; i < _value.length; i++) {
                _object[_value[i]['name']] = _value[i]['value'];
            }
        }
        return _object;
    }

    $.fn.clearValidate = function () {
        $(this).find('[name]').each(function () {
            element    = $(this);
            var _group = element.closest('.form-item');
            var _msg   = _group.find('.field-msg');
            _group.removeClass('has-error has-success');
            _msg.html(_msg.data('defalut-msg'));
        });
    };
    $.fn.submitForm    = function (options) {
        var _form       = $(this);
        var _options    = $.extend({
            validate    : null, //验证规则
            autoValidate: false, //自动验证
            type        : 'post',
            handler     : _form.find(':submit'),
            controlPoint: null, //添加检测值发生改变回调函数
            onBefore    : null, //表单提交前触发函数
            onAfter     : null, //表单提交后触发函数
            loadingTpl  : '<span class="form-loading">提交中...</span>'
        }, options);
        var _origValue  = _form.serializeArray();
        var _origLength = _origValue.length;
        var _onComplete = _options.complete;
        //实例化验证实例
        var _validator  = $.validator({
            map     : _options.validate,
            onAfter : function (status, data) {
                var _element = $('[name=' + this.name + ']');
                if (status === true) {
                    // fetchSuccess.call(this, _element);
                } else {
                    fetchError.call(this, _element);
                }
            },
            onCreate: function () {
                var _validator     = this;
                var _activeElement = false;
                _form.find('[name]').click(function (event) {
                    _activeElement = $(this);
                    fetchDefatul(_activeElement);
                    if (_options.autoValidate && this.nodeName == 'INPUT' && this.type == 'checkbox') {
                        check.call(_validator, _activeElement, _form);
                    }
                    event.stopPropagation();
                }).keyup(function () {
                    fetchDefatul($(this));
                }).closest('label').click(function (event) {
                    event.stopPropagation();
                });
                $(document).bind('click', function () {
                    if (_activeElement && _options.autoValidate) {
                        check.call(_validator, _activeElement, _form);
                    }
                    _activeElement = false;
                });
            }
        });
        _options.url    = _options.url || $(this).attr('action');
        _options.type   = _options.type || $(this).attr('method') || 'POST';

        _options.beforeSend = function () {
            var _data        = _form.serializeArray();
            var _status      = _validator.check(_data);
            _options.handler = _form.data('submitButton') ? _form.data('submitButton') : _options.handler;
            //记录按钮默认值
            _options.handler.each(function () {
                var _btn = $(this).find('input,button');
                if (_btn.length) {
                    $(this).data('text', _btn.val() || _btn.text());
                } else {
                    $(this).data('text', $(this).html() || $(this).val());
                }
            });
            if (_status) {
                _disabledForm();
            }
            return _status;
        }
        _options.complete   = function () {
            _activeForm();
            $.isFunction(_onComplete) && _onComplete.call(this);
        };
        _options.success    = function (data) {
            if (!data.status) {
                if ($.isPlainObject(data)) {
                    var _first = null, _number = 0;
                    for (var i in data.info) {
                        _number || (_first = _form.find('[name=' + i + ']'));
                        fetchError(_form.find('[name=' + i + ']'), data.info[i]);
                        _number++;
                    }
                    // _first && _first.focus().select();
                }
            }
            $.isFunction(_options.onAfter) && _options.onAfter(data, _options);
        };
        _form.append(_options.loadingTpl);
        _form.submit(function (event) {
            if (_options.uploadFile !== true) {
                _options.data = $.extend({}, _options.data, serializeObject(_form[0]));
            }
            var _status = true;
            if ($.isFunction(_options.onBefore)) {
                _status = _options.onBefore.call(_form, _options);
            }
            if (_status === false) {
                return false;
            } else if (typeof _status == 'object') {
                _status.done(function () {
                    if (_options.uploadFile === true) {
                        _form.ajaxSubmit(_options);
                    } else {
                        $.ajax(_options);
                    }
                });
            } else {
                if (_options.uploadFile === true) {
                    _form.ajaxSubmit(_options);
                } else {
                    $.ajax(_options);
                }
            }
            return false;
        });
        $.isFunction(_options.controlPoint) && _options.controlPoint.call(_form, valueChange);
        //验证
        function check(element, form) {
            var _group = element.closest('.form-item');
            var _name  = element.attr('name');
            var _items = this.getItem(_name);
            var _join  = ['[name=' + _name + ']'];
            $.each(_items, function () {
                if (!this.must) {
                    fetchDefatul(element);
                }
                if ($.isArray(this.join)) {
                    for (var i = 0; i < this.join.length; i++) {
                        _join.push('[name=' + this.join[i] + ']');
                    }
                }
            });
            _join = _join.join(',');
            this.check(form.serializeArray(), _items);
        }

        //验证成功
        function fetchSuccess(element, message) {
            var _group = element.closest('.form-item');
            var _msg   = _group.find('.field-msg');
            if (!_msg.length) {
                _msg = $('<span class="field-msg"></span>');
                _group.find('[name]').after(_msg);
            }
            _group.addClass('has-success').removeClass('has-error');
            _msg.html(message || _msg.data('defalut-msg'));
        }

        //验证失败
        function fetchError(element, message) {
            var _group = element.closest('.form-item');
            var _msg   = _group.find('.field-msg');
            if (!_msg.length) {
                _msg = $('<span class="field-msg"></span>');
                _group.find('[name]').after(_msg);
            }
            _group.addClass('has-error').removeClass('has-success');
            if (typeof _msg.data('defalut-msg') == 'undefined') {
                _msg.attr('data-defalut-msg', _msg.html());
            }
            _msg.html(message || this.msg);
        }

        //恢复默认
        function fetchDefatul(element) {
            if (element) {
                var _group = element.closest('.form-item');
                var _msg   = _group.find('.field-msg');
                _group.removeClass('has-error has-success');
                _msg.html(_msg.data('defalut-msg'));
            }
        }

        //激活表单状态
        function _activeForm() {
            _form.removeClass('form-posting');
            _options.handler.each(function () {
                var _text   = $(this).data('text');
                var _parent = $(this).closest('.w-btn');
                if (!_parent.length) {
                    _parent = $(this);
                }
                var _btn = _parent.find('input,button');
                if (!_btn.length) {
                    _btn = _parent;
                    _btn.html(_text);
                } else {
                    _btn.val(_text);
                }
                _btn.prop('disabled', false);
                _parent.removeClass('btn-loading');
            });
        }

        //禁用表单状态
        function _disabledForm() {
            _form.addClass('form-posting');
            _options.handler.each(function () {
                var _parent = $(this).closest('.w-btn');
                if (!_parent.length) {
                    _parent = $(this);
                }
                var _btn = _parent.find('input,button');
                if (!_btn.length) {
                    _btn = _parent;
                    _btn.text('提交中');
                } else {
                    _btn.val('提交中');
                }
                _btn.prop('disabled', true);
                _parent.addClass('btn-loading');
            });
        }
    };
})

define('common/library/base64', function (require, exports, module) {

    var base64EncodeChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    var base64DecodeChars = new Array(
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63,
        52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1,
        -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
        15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1,
        -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
        41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1);

    function base64encode(str) {
        var out, i, len;
        var c1, c2, c3;

        len = str.length;
        i   = 0;
        out = "";
        while (i < len) {
            c1 = str.charCodeAt(i++) & 0xff;
            if (i == len) {
                out += base64EncodeChars.charAt(c1 >> 2);
                out += base64EncodeChars.charAt((c1 & 0x3) << 4);
                out += "==";
                break;
            }
            c2 = str.charCodeAt(i++);
            if (i == len) {
                out += base64EncodeChars.charAt(c1 >> 2);
                out += base64EncodeChars.charAt(((c1 & 0x3) << 4) | ((c2 & 0xF0) >> 4));
                out += base64EncodeChars.charAt((c2 & 0xF) << 2);
                out += "=";
                break;
            }
            c3 = str.charCodeAt(i++);
            out += base64EncodeChars.charAt(c1 >> 2);
            out += base64EncodeChars.charAt(((c1 & 0x3) << 4) | ((c2 & 0xF0) >> 4));
            out += base64EncodeChars.charAt(((c2 & 0xF) << 2) | ((c3 & 0xC0) >> 6));
            out += base64EncodeChars.charAt(c3 & 0x3F);
        }
        return out;
    }

    function base64decode(str) {
        var c1, c2, c3, c4;
        var i, len, out;

        len = str.length;
        i   = 0;
        out = "";
        while (i < len) {
            /* c1 */
            do {
                c1 = base64DecodeChars[str.charCodeAt(i++) & 0xff];
            } while (i < len && c1 == -1);
            if (c1 == -1)
                break;

            /* c2 */
            do {
                c2 = base64DecodeChars[str.charCodeAt(i++) & 0xff];
            } while (i < len && c2 == -1);
            if (c2 == -1)
                break;

            out += String.fromCharCode((c1 << 2) | ((c2 & 0x30) >> 4));

            /* c3 */
            do {
                c3 = str.charCodeAt(i++) & 0xff;
                if (c3 == 61)
                    return out;
                c3 = base64DecodeChars[c3];
            } while (i < len && c3 == -1);
            if (c3 == -1)
                break;

            out += String.fromCharCode(((c2 & 0XF) << 4) | ((c3 & 0x3C) >> 2));

            /* c4 */
            do {
                c4 = str.charCodeAt(i++) & 0xff;
                if (c4 == 61)
                    return out;
                c4 = base64DecodeChars[c4];
            } while (i < len && c4 == -1);
            if (c4 == -1)
                break;
            out += String.fromCharCode(((c3 & 0x03) << 6) | c4);
        }
        return out;
    }

    function utf16to8(str) {
        var out, i, len, c;

        out = "";
        len = str.length;
        for (i = 0; i < len; i++) {
            c = str.charCodeAt(i);
            if ((c >= 0x0001) && (c <= 0x007F)) {
                out += str.charAt(i);
            } else if (c > 0x07FF) {
                out += String.fromCharCode(0xE0 | ((c >> 12) & 0x0F));
                out += String.fromCharCode(0x80 | ((c >> 6) & 0x3F));
                out += String.fromCharCode(0x80 | ((c >> 0) & 0x3F));
            } else {
                out += String.fromCharCode(0xC0 | ((c >> 6) & 0x1F));
                out += String.fromCharCode(0x80 | ((c >> 0) & 0x3F));
            }
        }
        return out;
    }

    function utf8to16(str) {
        var out, i, len, c;
        var char2, char3;

        out = "";
        len = str.length;
        i   = 0;
        while (i < len) {
            c = str.charCodeAt(i++);
            switch (c >> 4) {
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                    // 0xxxxxxx
                    out += str.charAt(i - 1);
                    break;
                case 12:
                case 13:
                    // 110x xxxx   10xx xxxx
                    char2 = str.charCodeAt(i++);
                    out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));
                    break;
                case 14:
                    // 1110 xxxx  10xx xxxx  10xx xxxx
                    char2 = str.charCodeAt(i++);
                    char3 = str.charCodeAt(i++);
                    out += String.fromCharCode(((c & 0x0F) << 12) |
                        ((char2 & 0x3F) << 6) |
                        ((char3 & 0x3F) << 0));
                    break;
            }
        }

        return out;
    }

    function CharToHex(str) {
        var out, i, len, c, h;
        out = "";
        len = str.length;
        i   = 0;
        while (i < len) {
            c = str.charCodeAt(i++);
            h = c.toString(16);
            if (h.length < 2)
                h = "0" + h;

            out += "\\x" + h + " ";
            if (i > 0 && i % 8 == 0)
                out += "\r\n";
        }

        return out;
    }

    exports.encode = function (value) {
        return base64encode(utf16to8(value));
    };

    exports.decode = function (value) {
        return utf8to16(base64decode(value));
    };

});
define('common/library/cache', function(require, exports, module) {
    //缓存列表
    var cacheList = window.top.DATACACHELIST = window.top.DATACACHELIST || {};
    /**
     * 设置缓存
     * @method set
     * @param name {String} 缓存的名称
     * @param data {All} 缓存的数据
     * @return
     */
    exports.set = function(name, data) {
        var _proxy = cacheList;
        if(name !== null){
            if($.isPlainObject(name)){
                $.extend(true, _proxy, name);
            }else{
                name = name.toString();
                var _name = name.split('.');
                var _leng = _name.length;
                for(var i = 0; i < _leng; i++){
                    if(typeof _proxy[_name[i]] == 'undefined'){
                        if(i == _leng - 1){
                            _proxy[_name[i]] = data;
                        }else{
                            _proxy[_name[i]] = {};
                        }
                    }else{
                        _proxy[_name[i]] = $.extend(true,_proxy[_name[i]], data);
                    }
                    _proxy = _proxy[_name[i]];
                }
            }
        }
    };
    /**
     * 删除缓存
     * @method set
     * @param name {String} 缓存的名称
     * @param data {All} 缓存的数据
     * @return
     */
    exports.del = function(name) {
        if(name !== null){
            var _name = name.toString().split('.');
            var _leng = _name.length;
            var _proxy = cacheList;
            for(var i = 0; i < _leng; i++){
                if(typeof _proxy[_name[i]] != 'undefined'){
                    if(i == _leng - 1){
                        delete _proxy[_name[i]];
                        break;
                    }
                }
                _proxy = _proxy[_name[i]];
            }
        }
    };
    /**
     * 删除缓存
     * @method set
     * @param name {String} 缓存的名称
     * @param data {All} 缓存的数据
     * @return
     */
    //获取缓存
    exports.get = function(name) {
        if(name !== null){
            var _name = name.toString().split('.');
            var _leng = _name.length;
            var _proxy = cacheList;
            for(var i = 0; i < _leng; i++){
                if(typeof _proxy[_name[i]] != 'undefined'){
                    if(i == _leng - 1){
                        return _proxy[_name[i]];
                    }
                    _proxy = _proxy[_name[i]];
                }
            }
        }
    };
})

define('common/library/function', function (require, exports, module) {
    //构造类
    window.Class = exports.Class = function (object, callback) {
        var _attrs             = {};
        var _F                 = function () {
            $.extend(true, this, _attrs);
            this.initial && this.initial.apply(this, arguments);
            this.parent && this.parent.initial && this.parent.initial.apply(this, arguments);
        };
        _F.prototype.setConfig = function (name, data) {
            return Config.set.apply(Config, arguments);
        };
        _F.prototype.getConfig = function (name) {
            return Config.get.apply(Config, arguments);
        };
        _F.prototype.getStatic = function (name) {
            return _F[name];
        };
        for (var i = 0; i < arguments.length; i++) {
            if ($.isPlainObject(arguments[i])) {
                for (var j in arguments[i]) {
                    if ($.isFunction(arguments[i][j])) {
                        _F.prototype[j] = arguments[i][j];
                    } else {
                        _attrs[j] = arguments[i][j];
                    }
                }
            }
        }
        $.isFunction(callback) && callback.call(_F);
        return object.instantiation === false && object.single !== true ? _F : new _F();
    };
    window.Util = {
        //友好日期
        friendlyDate     : function (time) {
            var time   = Number(time);
            var text   = '';
            var msec   = time * 1000;
            var differ = Math.floor((new Date().getTime() - msec) / 1000);
            if (differ < 30) {
                text = '刚刚';
            } else if (differ < 60) {
                text = differ + '秒前'; // 一分钟内
            } else if (differ < 60 * 60) {
                text = Math.floor(differ / 60) + '分钟前'; //一小时内
            } else if (differ < 60 * 60 * 24) {
                text = Math.floor(differ / (60 * 60)) + '小时前'; // 一天内
            } else if (differ < 60 * 60 * 24 * 3) {
                text = Math.floor(time / (60 * 60 * 24)) == 1 ? '昨天 ' : '前天 '; //昨天和前天
            } else if (differ < 60 * 60 * 24 * 30) {
                text = Util.formartDate(msec, 'M月d日');
            } else if (differ < 60 * 60 * 24 * 365) {
                text = Util.formartDate(msec, 'M月d日');
            } else {
                text = Util.formartDate(msec, 'yyyy年M月d日');
            }
            return text;
        },
        //格式化日期
        formartDate      : function (date, format) {
            var _type = $.type(date), _date = new Date();
            if (_type == 'date') {
                _date = date;
            } else if (_type == 'number') {
                _date.setTime(Number(date));
            } else if (_type == 'string') {
                var _arr = _type.split(/\D/);
                _date    = new Date(
                    _arr[0] ? _arr[0] : 1,
                    _arr[1] ? _arr[1] - 1 : 0,
                    _arr[2] ? _arr[2] : 1,
                    _arr[3] ? _arr[3] : 0,
                    _arr[4] ? _arr[4] : 0,
                    _arr[5] ? _arr[5] : 0
                );
            }
            var o = {
                "M+": _date.getMonth() + 1, //month
                "d+": _date.getDate(), //day
                "h+": _date.getHours(), //hour
                "m+": _date.getMinutes(), //minute
                "s+": _date.getSeconds(), //second
                "q+": Math.floor((_date.getMonth() + 3) / 3), //quarter
                "S" : _date.getMilliseconds() //millisecond
            };
            if (/(y+)/.test(format)) {
                format = format.replace(RegExp.$1, (_date.getFullYear() + "").substr(4 - RegExp.$1.length));
            }
            for (var k in o) {
                if (new RegExp("(" + k + ")").test(format)) {
                    format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length));
                }
            }
            return format;
        },
        //获取日期对象
        getDate          : function (date) {
            var _type = $.type(date);
            if (_type == 'date') {
                return date;
            } else if (_type == 'number') {
                return new Date(date);
            } else if (_type == 'string') {
                var _arr = _type.split(/\D/);
                return new Date(
                    _arr[0] ? _arr[0] : 1,
                    _arr[1] ? _arr[1] - 1 : 0,
                    _arr[2] ? _arr[2] : 1,
                    _arr[3] ? _arr[3] : 0,
                    _arr[4] ? _arr[4] : 0,
                    _arr[5] ? _arr[5] : 0
                );
            } else {
                return new Date();
            }
        },
        //滚动到指定元素
        scrollTop        : function (element, wrapElement, offset, callback) {
            if ($.isFunction(wrapElement)) {
                callback    = wrapElement;
                offset      = 0;
                wrapElement = null;
            }
            if ($.isNumeric(wrapElement)) {
                callback    = offset;
                offset      = wrapElement;
                wrapElement = null;
            }
            if ($.isFunction(offset)) {
                callback = offset;
                offset   = 0;
            }
            $.isNumeric(offset) || (offset = 0);
            wrapElement || (wrapElement = $('html,body'));
            offset = Math.floor(element.offset().top + offset);
            return wrapElement.animate({scrollTop: offset}, 400, callback);
        },
        //截取字符串
        substr           : function (content, start, length) {
            var _start = start ? start : 0, _content = content;
            if (!_content || typeof _content != 'string') {
                return '';
            }
            if ($.isNumeric(start)) {
                _start = parseInt(_start, 10);
            }
            if (length) {
                _content = _content.substr(start, length);
            } else {
                _content = _content.substr(start);
            }
            if (_content !== content) {
                _content += '...';
            }
            return _content;
        },
        //实体转码
        /**
         * @return {string}
         */
        HTMLEnCode       : function (str) {
            var s = "";
            if (str.length == 0)    return "";
            s = str.replace(/</g, "&lt;");
            s = s.replace(/>/g, "&gt;");
            return s;
        },
        //实体解码
        /**
         * @return {string}
         */
        HTMLDeCode       : function (str) {
            var s = "";
            if (str.length == 0)    return "";
            s = str.replace(/&lt;/g, "<");
            s = s.replace(/&gt;/g, ">");
            return s;
        },
        /*
         * 设置输入域(input/textarea)光标的位置
         * @param {HTMLInputElement/HTMLTextAreaElement} elem
         * @param {Number} index
         */
        setCursorPosition: function (elem, index) {
            if (!$(elem).is(':visible')) {
                return;
            }
            var val = elem.value;
            var len = val.length;

            // 超过文本长度直接返回
            if (len < index) return;
            setTimeout(function () {
                elem.focus();
                if (elem.setSelectionRange) { // 标准浏览器
                    elem.setSelectionRange(index, index);
                } else { // IE9-
                    var range = elem.createTextRange();
                    range.moveStart("character", -len);
                    range.moveEnd("character", -len);
                    range.moveStart("character", index);
                    range.moveEnd("character", 0);
                    range.select();
                }
            }, 10);
        },
        /*
         * 检测当前设备是否移动端
         * @param boolean
         */
        isPhone          : function () {
            var userAgentInfo = navigator.userAgent;
            var Agents        = new Array("Android", "iPhone", "SymbianOS", "Windows Phone", "iPod");
            for (var v = 0; v < Agents.length; v++) {
                if (userAgentInfo.indexOf(Agents[v]) > 0) {
                    return true;
                }
            }
            return false;
        },
        /*
         * 获取ThinkPHP用户头像
         * @param id{Number} 用户ID
         * @param size{Number} 图片尺寸
         * @return string
         */
        getMemberAvatar  : function (id, size) {
            if ($.isNumeric(id)) {
                var _src   = [],
                    _id    = id.toString(),
                    _i     = _id.length,
                    _size  = size || 'middle',
                    _image = null;
                for (; _i < 10; _i++) {
                    _id = '0' + _id;
                }
                _src.push(_id.substr(0, 3));
                _src.push(_id.substr(3, 3));
                _src.push(_id.substr(6, 2));
                _src.push(_id.substr(8, 2));
                _src = _src.join('/');
                return '/Uploads/Avatar/' + _src + '/' + _size + '.gif';
            }
            return '';
        },
        /*
         * 设置元素内的文本是否选中
         * @param status{Boolean} 文本是否允许选中
         * @return string
         */
        selectable       : function (element, status) {
            var status = status ? true : false;
            if (status) {
                element.attr('unselectable', 'on')
                    .css({
                        '-moz-user-select'   : '-moz-none',
                        '-moz-user-select'   : 'none',
                        '-o-user-select'     : 'none',
                        '-khtml-user-select' : 'none',
                        '-webkit-user-select': 'none',
                        '-ms-user-select'    : 'none',
                        'user-select'        : 'none'
                    }).bind('selectstart', function () {
                    return false;
                });
            } else {
                element.attr('unselectable', 'off')
                    .css({
                        '-moz-user-select'   : '-moz-auto',
                        '-moz-user-select'   : 'auto',
                        '-o-user-select'     : 'auto',
                        '-khtml-user-select' : 'auto',
                        '-webkit-user-select': 'auto',
                        '-ms-user-select'    : 'auto',
                        'user-select'        : 'auto'
                    }).bind('selectstart', function () {
                    return true;
                });
            }
        },
        /*
         * 以中文为标准获取字符长度
         * @param str{String} 需要检测长度的字符串
         * @param shortUrl{Boolean} 网址是否按谷歌短网址长度计算
         * @return string
         */
        cnstrlen         : function (str, shortUrl) {
            if (true == shortUrl) {
                return Math.ceil(str.replace(/((news|telnet|nttp|file|http|ftp|https):\/\/){1}(([-A-Za-z0-9]+(\.[-A-Za-z0-9]+)*(\.[-A-Za-z]{2,5}))|([0-9]{1,3}(\.[0-9]{1,3}){3}))(:[0-9]*)?(\/[-A-Za-z0-9_\$\.\+\!\*\(\),;:@&=\?\/~\#\%]*)*/ig, 'http://goo.gl/fkKB ').replace(/^\s+|\s+$/ig, '').replace(/[^\x00-\xff]/ig, 'xx').length / 2);
            } else {
                return Math.ceil(str.replace(/^\s+|\s+$/ig, '').replace(/[^\x00-\xff]/ig, 'xx').length / 2);
            }
        },
        /*
         * 警告提示
         * @return string
         */
        wranStyle        : function (element, cls) {
            var _number = 0;
            var _cls    = cls || 'wran-style';
            if (element.__TIMER__) {
                clearInterval(element.__TIMER__);
            }
            element.__TIMER__ = setInterval(function () {
                _number++;
                _wran();
                if (_number >= 1) {
                    clearInterval(element.__TIMER__);
                }
            }, 300);
            function _wran() {
                element.toggleClass(_cls);
            }

            _wran();
        },
        /*
         * 获取路径信息
         * @param path
         */
        pathinfo         : function (path) {
            var index1 = path.lastIndexOf(".");
            var index2 = path.length;
            var ext, name, dirname, basename;
            if (index1 > -1) {
                ext  = path.substring(index1 + 1, index2);//后缀名
                name = path.substring(0, index1);
            } else {
                name = path;
                ext  = "";
            }
            var index3 = path.lastIndexOf('/');
            if (index3 > -1) {
                basename = path.substring(index3 + 1, index2);//后缀名
                dirname  = path.substring(0, index3);
            } else {
                basename = path;
                dirname  = ".";
            }

            return {name: name, ext: ext, dirname: dirname, basename: basename};
        },
        isMac            : function () {
            var os = (navigator.platform.match(/mac|win|linux/i) || ["other"])[0].toLowerCase();
            return os == "mac";
        },
        md5              : function (string) {

            function RotateLeft(lValue, iShiftBits) {
                return (lValue << iShiftBits) | (lValue >>> (32 - iShiftBits));
            }

            function AddUnsigned(lX, lY) {
                var lX4, lY4, lX8, lY8, lResult;
                lX8     = (lX & 0x80000000);
                lY8     = (lY & 0x80000000);
                lX4     = (lX & 0x40000000);
                lY4     = (lY & 0x40000000);
                lResult = (lX & 0x3FFFFFFF) + (lY & 0x3FFFFFFF);
                if (lX4 & lY4) {
                    return (lResult ^ 0x80000000 ^ lX8 ^ lY8);
                }
                if (lX4 | lY4) {
                    if (lResult & 0x40000000) {
                        return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);
                    } else {
                        return (lResult ^ 0x40000000 ^ lX8 ^ lY8);
                    }
                } else {
                    return (lResult ^ lX8 ^ lY8);
                }
            }

            function F(x, y, z) {
                return (x & y) | ((~x) & z);
            }

            function G(x, y, z) {
                return (x & z) | (y & (~z));
            }

            function H(x, y, z) {
                return (x ^ y ^ z);
            }

            function I(x, y, z) {
                return (y ^ (x | (~z)));
            }

            function FF(a, b, c, d, x, s, ac) {
                a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac));
                return AddUnsigned(RotateLeft(a, s), b);
            };

            function GG(a, b, c, d, x, s, ac) {
                a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac));
                return AddUnsigned(RotateLeft(a, s), b);
            };

            function HH(a, b, c, d, x, s, ac) {
                a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac));
                return AddUnsigned(RotateLeft(a, s), b);
            };

            function II(a, b, c, d, x, s, ac) {
                a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac));
                return AddUnsigned(RotateLeft(a, s), b);
            };

            function ConvertToWordArray(string) {
                var lWordCount;
                var lMessageLength       = string.length;
                var lNumberOfWords_temp1 = lMessageLength + 8;
                var lNumberOfWords_temp2 = (lNumberOfWords_temp1 - (lNumberOfWords_temp1 % 64)) / 64;
                var lNumberOfWords       = (lNumberOfWords_temp2 + 1) * 16;
                var lWordArray           = Array(lNumberOfWords - 1);
                var lBytePosition        = 0;
                var lByteCount           = 0;
                while (lByteCount < lMessageLength) {
                    lWordCount             = (lByteCount - (lByteCount % 4)) / 4;
                    lBytePosition          = (lByteCount % 4) * 8;
                    lWordArray[lWordCount] = (lWordArray[lWordCount] | (string.charCodeAt(lByteCount) << lBytePosition));
                    lByteCount++;
                }
                lWordCount                     = (lByteCount - (lByteCount % 4)) / 4;
                lBytePosition                  = (lByteCount % 4) * 8;
                lWordArray[lWordCount]         = lWordArray[lWordCount] | (0x80 << lBytePosition);
                lWordArray[lNumberOfWords - 2] = lMessageLength << 3;
                lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29;
                return lWordArray;
            };

            function WordToHex(lValue) {
                var WordToHexValue = "", WordToHexValue_temp = "", lByte, lCount;
                for (lCount = 0; lCount <= 3; lCount++) {
                    lByte               = (lValue >>> (lCount * 8)) & 255;
                    WordToHexValue_temp = "0" + lByte.toString(16);
                    WordToHexValue      = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length - 2, 2);
                }
                return WordToHexValue;
            };

            function Utf8Encode(string) {
                string      = string.replace(/\r\n/g, "\n");
                var utftext = "";

                for (var n = 0; n < string.length; n++) {

                    var c = string.charCodeAt(n);

                    if (c < 128) {
                        utftext += String.fromCharCode(c);
                    }
                    else if ((c > 127) && (c < 2048)) {
                        utftext += String.fromCharCode((c >> 6) | 192);
                        utftext += String.fromCharCode((c & 63) | 128);
                    }
                    else {
                        utftext += String.fromCharCode((c >> 12) | 224);
                        utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                        utftext += String.fromCharCode((c & 63) | 128);
                    }

                }

                return utftext;
            };

            var x   = Array();
            var k, AA, BB, CC, DD, a, b, c, d;
            var S11 = 7, S12 = 12, S13 = 17, S14 = 22;
            var S21 = 5, S22 = 9, S23 = 14, S24 = 20;
            var S31 = 4, S32 = 11, S33 = 16, S34 = 23;
            var S41 = 6, S42 = 10, S43 = 15, S44 = 21;

            string = Utf8Encode(string);

            x = ConvertToWordArray(string);

            a = 0x67452301;
            b = 0xEFCDAB89;
            c = 0x98BADCFE;
            d = 0x10325476;

            for (k = 0; k < x.length; k += 16) {
                AA = a;
                BB = b;
                CC = c;
                DD = d;
                a  = FF(a, b, c, d, x[k + 0], S11, 0xD76AA478);
                d  = FF(d, a, b, c, x[k + 1], S12, 0xE8C7B756);
                c  = FF(c, d, a, b, x[k + 2], S13, 0x242070DB);
                b  = FF(b, c, d, a, x[k + 3], S14, 0xC1BDCEEE);
                a  = FF(a, b, c, d, x[k + 4], S11, 0xF57C0FAF);
                d  = FF(d, a, b, c, x[k + 5], S12, 0x4787C62A);
                c  = FF(c, d, a, b, x[k + 6], S13, 0xA8304613);
                b  = FF(b, c, d, a, x[k + 7], S14, 0xFD469501);
                a  = FF(a, b, c, d, x[k + 8], S11, 0x698098D8);
                d  = FF(d, a, b, c, x[k + 9], S12, 0x8B44F7AF);
                c  = FF(c, d, a, b, x[k + 10], S13, 0xFFFF5BB1);
                b  = FF(b, c, d, a, x[k + 11], S14, 0x895CD7BE);
                a  = FF(a, b, c, d, x[k + 12], S11, 0x6B901122);
                d  = FF(d, a, b, c, x[k + 13], S12, 0xFD987193);
                c  = FF(c, d, a, b, x[k + 14], S13, 0xA679438E);
                b  = FF(b, c, d, a, x[k + 15], S14, 0x49B40821);
                a  = GG(a, b, c, d, x[k + 1], S21, 0xF61E2562);
                d  = GG(d, a, b, c, x[k + 6], S22, 0xC040B340);
                c  = GG(c, d, a, b, x[k + 11], S23, 0x265E5A51);
                b  = GG(b, c, d, a, x[k + 0], S24, 0xE9B6C7AA);
                a  = GG(a, b, c, d, x[k + 5], S21, 0xD62F105D);
                d  = GG(d, a, b, c, x[k + 10], S22, 0x2441453);
                c  = GG(c, d, a, b, x[k + 15], S23, 0xD8A1E681);
                b  = GG(b, c, d, a, x[k + 4], S24, 0xE7D3FBC8);
                a  = GG(a, b, c, d, x[k + 9], S21, 0x21E1CDE6);
                d  = GG(d, a, b, c, x[k + 14], S22, 0xC33707D6);
                c  = GG(c, d, a, b, x[k + 3], S23, 0xF4D50D87);
                b  = GG(b, c, d, a, x[k + 8], S24, 0x455A14ED);
                a  = GG(a, b, c, d, x[k + 13], S21, 0xA9E3E905);
                d  = GG(d, a, b, c, x[k + 2], S22, 0xFCEFA3F8);
                c  = GG(c, d, a, b, x[k + 7], S23, 0x676F02D9);
                b  = GG(b, c, d, a, x[k + 12], S24, 0x8D2A4C8A);
                a  = HH(a, b, c, d, x[k + 5], S31, 0xFFFA3942);
                d  = HH(d, a, b, c, x[k + 8], S32, 0x8771F681);
                c  = HH(c, d, a, b, x[k + 11], S33, 0x6D9D6122);
                b  = HH(b, c, d, a, x[k + 14], S34, 0xFDE5380C);
                a  = HH(a, b, c, d, x[k + 1], S31, 0xA4BEEA44);
                d  = HH(d, a, b, c, x[k + 4], S32, 0x4BDECFA9);
                c  = HH(c, d, a, b, x[k + 7], S33, 0xF6BB4B60);
                b  = HH(b, c, d, a, x[k + 10], S34, 0xBEBFBC70);
                a  = HH(a, b, c, d, x[k + 13], S31, 0x289B7EC6);
                d  = HH(d, a, b, c, x[k + 0], S32, 0xEAA127FA);
                c  = HH(c, d, a, b, x[k + 3], S33, 0xD4EF3085);
                b  = HH(b, c, d, a, x[k + 6], S34, 0x4881D05);
                a  = HH(a, b, c, d, x[k + 9], S31, 0xD9D4D039);
                d  = HH(d, a, b, c, x[k + 12], S32, 0xE6DB99E5);
                c  = HH(c, d, a, b, x[k + 15], S33, 0x1FA27CF8);
                b  = HH(b, c, d, a, x[k + 2], S34, 0xC4AC5665);
                a  = II(a, b, c, d, x[k + 0], S41, 0xF4292244);
                d  = II(d, a, b, c, x[k + 7], S42, 0x432AFF97);
                c  = II(c, d, a, b, x[k + 14], S43, 0xAB9423A7);
                b  = II(b, c, d, a, x[k + 5], S44, 0xFC93A039);
                a  = II(a, b, c, d, x[k + 12], S41, 0x655B59C3);
                d  = II(d, a, b, c, x[k + 3], S42, 0x8F0CCC92);
                c  = II(c, d, a, b, x[k + 10], S43, 0xFFEFF47D);
                b  = II(b, c, d, a, x[k + 1], S44, 0x85845DD1);
                a  = II(a, b, c, d, x[k + 8], S41, 0x6FA87E4F);
                d  = II(d, a, b, c, x[k + 15], S42, 0xFE2CE6E0);
                c  = II(c, d, a, b, x[k + 6], S43, 0xA3014314);
                b  = II(b, c, d, a, x[k + 13], S44, 0x4E0811A1);
                a  = II(a, b, c, d, x[k + 4], S41, 0xF7537E82);
                d  = II(d, a, b, c, x[k + 11], S42, 0xBD3AF235);
                c  = II(c, d, a, b, x[k + 2], S43, 0x2AD7D2BB);
                b  = II(b, c, d, a, x[k + 9], S44, 0xEB86D391);
                a  = AddUnsigned(a, AA);
                b  = AddUnsigned(b, BB);
                c  = AddUnsigned(c, CC);
                d  = AddUnsigned(d, DD);
            }

            var temp = WordToHex(a) + WordToHex(b) + WordToHex(c) + WordToHex(d);

            return temp.toLowerCase();
        }
    };
});

define('common/library/summary', function (require, exports, module) {

    //载入markdown解析脚本
    var showdown = require('component/showdown/dist/showdown.min');


    //实例化markdown解析器
    var marked = new showdown.Converter();

    marked.setOption('onlyLink', true);

    /*
     * Parsing HTML strings
     */

    function canParseHtml() {
        var Parser = window.DOMParser, canParse = false;

        // Adapted from https://gist.github.com/1129031
        // Firefox/Opera/IE throw errors on unsupported types
        try {
            // WebKit returns null on unsupported types
            if (new Parser().parseFromString('', 'text/html')) {
                canParse = true;
            }
        } catch (e) {
        }
        return canParse;
    }

    function createHtmlParser() {
        var Parser = function () {
        };

        Parser.prototype.parseFromString = function (string) {
            var newDoc = document.implementation.createHTMLDocument('');

            if (string.toLowerCase().indexOf('<!doctype') > -1) {
                newDoc.documentElement.innerHTML = string;
            }
            else {
                newDoc.body.innerHTML = string;
            }
            return newDoc;
        };
        return Parser;
    }

    var HtmlParser = canParseHtml() ? window.DOMParser : createHtmlParser();

    function parseElement(list, pid, tree) {
        pid = pid || '';
        if (arguments[2] == undefined) {
            tree = true;
        }

        var summary = [];
        var node;
        for (var i = 0; i < list.length; i++) {
            node = list[i];

            if (node.nodeName.toLowerCase() == 'li') {
                var data = {};

                if (node.firstChild.nodeName.toLowerCase() == 'a') {

                    data.text = node.firstChild.textContent;

                    if (!data.text) {
                        continue;
                    }

                    var path = node.firstChild.getAttribute('href');

                    if (path.match(/[\\:*?"<>|]/)) {
                        continue;
                    }

                    data.id = encodeURIComponent(path);
                    if (!tree) {
                        data.pid   = pid;
                        data.title = data.text;
                    }

                    var pathinfo = Util.pathinfo(path);
                    data.ext     = pathinfo.ext;
                    data.name    = pathinfo.name;

                }

                if (node.lastChild.nodeName.toLowerCase() == 'ul') {
                    if (tree) {
                        data.children = parseElement(node.lastChild.childNodes, data.id, tree);
                    } else {
                        var children = parseElement(node.lastChild.childNodes, data.id, tree);
                        summary      = summary.concat(children);
                    }

                }
                if (data.id) {
                    summary = summary.concat(data);
                }
            }

        }

        return summary;
    }


    exports.parse = function (text, tree) {
        if (arguments[1] == undefined) {
            tree = true;
        }

        var html = marked.makeHtml(text);
        html = html.replace(/\s+|\n/g, " ").replace(/>\s</g,"><");

        var dom = new HtmlParser().parseFromString('<body>' + html + '</body>', 'text/html');

        var summary = [];
        var node    = dom.getElementsByTagName('ul')[0];
        if (node) {
            summary = parseElement(node.childNodes, '', tree);
        }
        return summary;

    };

    exports.generate = function (array, level) {
        level = level || 0;

        var summary = '';

        for (var i = 0; i < array.length; i++) {
            summary += (new Array(level + 1).join('    ')) + "* [" + array[i].text + "](" + decodeURIComponent(array[i].id) + ")\n";
            if (array[i].children) {
                summary += exports.generate(array[i].children, level + 1);
            }
        }

        return summary;
    };

});
define('common/module/comment', function(require, exports, module){
    //载入提交表单插件
    require('common/extend/validator/validator');
    //载入模版引擎
    var Template = require('common/extend/template');
    //载入输入提示类
    require('component/jquery.atwho/dist/css/jquery.atwho.min.css');
    require('component/Caret.js/dist/jquery.caret.min');
    require('component/jquery.atwho/dist/js/jquery.atwho.min');
    //注册模版助手
    Template.helper('friendlyDate', Util.friendlyDate);
    return Class({
        _options: {
            pageSize: 10, //每页评论数量
            wrapEle : null, //装载评论相关的集合元素
            listPath: null, //获取评论列表数据地址
            votePath: null, //投票地址
            onePath: null, //加载一条评论地址
            postParam: {}, //发表评论的额外参数列表
            delParam: {}, //删除评论提交服务器额外参数
            itemTpl : [  //评论单项模版
            '<p class="info">',
                '<a href="/@<%=username%>" class="name"><%=nickname%></a>',
                '<span class="date"><%=friendlyDate(create_time)%>评论</span>',
            '</p>',
            '<div class="content">',
                '<%=#resolveCode(content)%>',
            '</div>',
            '<p class="util">',
                '<span class="vote">',
                    '<a class="agree e-agree" data-href="<%=votePath%>" data-id="<%=id%>" title="赞成"><i class="icon icon-thumbs-up"></i></a>',
                    '<b class="count"><%=(vote)||0%></b>',
                    '<a class="oppose e-oppose" data-href="<%=votePath%>" data-id="<%=id%>" title="反对"><i class="icon icon-thumbs-down"></i></a>',
                '</span>',
                '<%if(username){%>',
                '<a class="reply e-reply" data-username="<%=username%>" >回复</a>',
                '<%}%>',
                '<span class="operate<%if(is_delete){%> toggle<%}%>">',
                    '<%if(is_delete == 1){%>',
                        '<a class="delete e-delete" data-id="<%=id%>" data-href="<%=delPath%>"><i class="icon icon-cross"></i></a>',
                    '<%}%>',
                    '<span class="number"><%=number%>#</span>',
                '</span>',
            '</p>',
            ].join(''),
            emptyTpl: '<i class="image"></i><b class="text">暂无相关评论</b>',
            disabledPost: false, //禁止发布评论
            hidePost: false, //隐藏发布框
            disabledTemp: [ //禁止评论时发布框替换模版
                '<div class="comment-post-disabeld">',
                    '<span>没有登录不能发表评论，请 <a class="login" href="/user/login" target="_blank">登录</a> 或 <a class="register" target="_blank" href="/user/register">注册</a></span>',
                '</div>'
            ].join(''),
            delPath: null, //删除评论地址
            addPath: null, //新增评论地址
            onDelItem: null, //删除评论回调函数
            onAddItem : null, //新增完成回调函数
            onLoadList: null, //列表加载完毕回调函数
            onCreate: null, //初始化完毕回调函数
            is_delete: 1,//是否显示删除评论
        },
        //记录获取评论的参数
        listParam: {},
        //记录所有单项集合
        items: [],
        //记录输入框是否获取焦点
        isEnterFocus: false,
        //记录是否已经加载过数据
        initLoadData: false,
        //初始化
        initial: function(options){
            var self = this;
            //合并配置项
            this.options = $.extend({}, this._options, options);
            //记录集合元素
            this.wrapEle = this.options.wrapEle;
            //动态创建评论模版
            this.comemntEle = this.createBase();
            //评论添加到集合元素中
            this.comemntEle.appendTo(this.wrapEle);
            //记录发布表单元素
            this.postFormEle = this.wrapEle.find('.comment-post form');
            //初始检测是否禁止评论
            this.options.disabledPost && this.wrapEle.addClass('comment-disabled') && this.wrapEle.append(this.options.disabledTemp);
            //是否隐藏发布框
            this.options.hidePost && this.postFormEle.parent().hide();
            //记录评论输入框元素
            this.postEnterEle = this.postFormEle.find('textarea');
            //设置发布评论地址
            this.postFormEle.attr('action', this.options.addPath);
            //记录发布提示元素
            this.postTipEle = this.postFormEle.find('.form-tip');
            //记录评论列表元素
            this.listEle = this.wrapEle.find('.comment-list');
            //设置暂无数据模版元素
            this.emptyEle = $('<div class="comment-empty">'+this.options.emptyTpl+'</div>').appendTo(this.listEle);
            //记录表情元素
            // this.faceEle = this.postFormEle.find('.comment-face');
            //记录代码元素
            this.codeEle = this.postFormEle.find('.comment-code');
            //记录评论总数元素
            this.totalEle = this.wrapEle.find('.comment-total');
            //绑定删除评论操作
            this.listEle.delegate('.delete', 'click', function(){
                var _ele = $(this);
                $.dialog.confirm('确定删除评论吗？',function(action){
                    if(action == 1){
                        self.delItem(_ele);
                    }
                });
                return false;
            });
            //绑定回复操作
            this.listEle.delegate('.reply', 'click', function () {
                var _value = self.postEnterEle.val();
                _value = _value ? (_value + '@' + $(this).data('username') + ' ') : ('@' + $(this).data('username') + ' ');
                self.postEnterEle.val(_value).focus();
                return false;
            });
            //绑定赞同操作
            this.listEle.delegate('.agree','click',function(){
                self.agree($(this));
                return false;
            });
            //绑定反对操作
            this.listEle.delegate('.oppose','click',function(){
                self.oppose($(this));
                return false;
            });
            //注册模版助手
            Template.helper('resolveCode', function(content){
                return self.resolveCode(content);
            });
            //设置模版数据
            Template.setData({
                votePath: this.options.votePath,
                delPath: this.options.delPath
            });
            //绑定文本框高度自动
            this.textareaHeightAuto(this.postEnterEle);
            //绑定新增评论操作
            this.postFormEle.submitForm({
                data: this.options.postParam,
                validate: [{
                    name: 'content',
                    rule: 'require',
                    msg: '评论内容不能为空！',
                    onBefore: function(data){
                        var reg = /\[code\](.*?)\[\/code\]/ig,
                        codes = [],
                        code = true,
                        length = 0,
                        max = 0,
                        data = data.replace(/\s/g,'');
                        data = data.replace(reg,function(r1,r2,i,s){
                            codes.push(r2);
                            return '';
                        });
                        length = codes.length;
                        max = length - 1;
                        for(var i = 0; i < length; i++){
                            if(codes[i] && codes[i] != '/*填写代码*/'){
                                return true;
                            }
                            if(i >= max){
                                code = false;
                            }
                        }
                        if(data == '' && !code){
                            return false;
                        }
                    },
                    onAfter: function(status, data){
                        if(!status){
                            error.call(this);
                        }
                    }
                }],
                autoValidate: false,
                onAfter: function(data, options){
                    if(data.status){
                        self.resetForm();
                        data.data.number = self.getTotal() + 1;
                        // data.data.content = options.data.content;
                        // data.data.is_delete = 1;
                        data.data.is_delete = self.options.is_delete;
                        self.addItem(data.data, true);
                        success();
                        self.postEnterEle.focus();
                    }else{
                        $.dialog.error(data.info);
                    }
                }
            });
            self.postEnterEle.focus(function(){
                self.isEnterFocus = true;
                success();
            }).blur(function(){
                self.isEnterFocus = false;
            });
            //错误样式
            function error(){
                self.postEnterEle.parent().addClass('textarea-error');
                self.postTipEle.text(this.msg).removeClass('fragment-tip').addClass('fragment-error');
            }
            //成功样式
            function success(){
                self.postEnterEle.parent().removeClass('textarea-error');
                self.postTipEle.text(self.postTipEle.data('defaultText')).addClass('fragment-tip').removeClass('fragment-error');
            }
            //绑定发布快捷键
            $(document).keyup(function(event){
                if(self.isEnterFocus){
                    if(event.ctrlKey && event.which == 13){
                        self.postFormEle.submit();
                    }
                }
            });
            self.postTipEle.data('defaultText', self.postTipEle.text());

            this.postEnterEle.atwho({
                at: "@",
                displayTpl: '<li><img class="avatar" src="${avatar}" /> ${name} <small>${username}</small></li>',
                insertTpl: "${atwho-at}${username}",
                callbacks: {
                    sorter: function(query, items, searchKey) {
                        var _results, i, item, len;
                        if (!query) {
                            return items;
                        }
                        _results = [];
                        for (i = 0, len = items.length; i < len; i++) {
                            item = items[i];
                            item.atwho_order = new String(item['name']).toLowerCase().indexOf(query.toLowerCase()) + new String(item['username']).toLowerCase().indexOf(query.toLowerCase());
                            if (item.atwho_order > -2) {
                                _results.push(item);
                            }
                        }
                        return _results.sort(function (a, b) {
                            return b.atwho_order - a.atwho_order;
                        });
                    },
                    filter: function(query, data, searchKey) {
                        var _results, i, item, len;
                        _results = [];
                        for (i = 0, len = data.length; i < len; i++) {
                            item = data[i];
                            if (new String(item['name']).toLowerCase().indexOf(query.toLowerCase())>-1 || new String(item['username']).toLowerCase().indexOf(query.toLowerCase())>-1) {
                                _results.push(item);
                            }
                        }
                        return _results;
                    },
                    remoteFilter: function(query, callback) {
                        $.getJSON("/autocomplete/user", {search: query}, function(data) {
                            callback(data)
                        });
                    }
                }
            });

            //绑定添加代码操作
            this.codeEle.click(function(){
                var _value = self.postEnterEle.val();
                _value = _value ? _value + '\n[code]\n/*填写代码*/\n[/code]' : '[code]\n/*填写代码*/\n[/code]';
                self.postEnterEle.val(_value).focus();
            });
            //设置当前评论分页数
            this.setPage(this.options.page || 1);
            //设置分页数量
            this.setPageSize(this.options.pageSize);
            //获取加载更多元素
            this.getLoadMoreEle();
            //实例化完成触发回调函数
            $.isFunction(this.options.onCreate) && this.options.onCreate.call(this);
        },
        //载入评论
        loadList: function(param, callback){
            $.extend(this.listParam, param);
            this.emptyEle.removeClass('empty-active');
            this.listEle.loading('评论加载中', 'loading-ripple-empty');
            this.getLoadMoreEle().removeClass('more-active');
            return $.ajax({
                url: this.options.listPath,
                data: this.listParam,
                type: 'post',
                context: this,
                success: function(data){
                    if(!this.initLoadData){
                        this.setTotal(data.data.count);
                    }
                    this.initLoadData = true;
                    $.isFunction(callback) && callback.call(this, data.data.list);
                },
                complete: function(){
                    this.listEle.loading('hide');
                }
            });
        },
        //载入一条评论
        loadOne: function(param, callback){
            var self = this;
            this.emptyEle.removeClass('empty-active');
            this.getLoadMoreEle().removeClass('more-active');
            this.listEle.loading('评论加载中', 'loading-ripple-empty');
            return $.ajax({
                url: this.options.onePath,
                data: param,
                type: 'post',
                context: this,
                success: function(data){
                    if(!data.status){
                        $.dialog.error(data.info);
                    }
                    $.isFunction(callback) && callback.call(this, data);
                },
                complete: function(){
                    this.listEle.loading('hide');
                }
            });
        },
        //加载新的评论
        assignList: function(param, callback){
            this.empty();
            this.initLoadData = false;
            this._replaceEle && this._replaceEle.remove();
            this.loadList(param,function(data){
                $.isFunction(callback) && callback.call(this, data);
                this._addItem(data);
                this.find();
            });
        },
        //加载更多评论
        moreList: function(param){
            this.setPage(Math.min(this.getPage()+1, this.getPageTotal()));
            this.loadList(param,function(data){
                this._addItem(data);
                this.find();
            });
        },
        //赞同操作
        agree : function(element, callback){
            var _vote = element.parent();
            if(!_vote.hasClass('disabled') && !element.hasClass('loading')){
                element.addClass('loading');
                $.ajax({
                    url : element.data('href'),
                    type: 'post',
                    data: {comm_id: element.data('id'), type: 1},
                    success: function(data){
                        var _count = _vote.find('.count');
                        if(data.status){
                            _count.text(Number(_count.text())+1);
                        }else{
                            $.dialog.error(data.info);
                        }
                        if(data.info == '投票成功' || data.info == '已经投过票了'){
                            _vote.addClass('disabled');
                            _vote.find('a').attr('title','你已投过票！');
                        }
                    },
                    complete: function(){
                        element.removeClass('loading');
                    }
                });
            }
        },
        //反对操作
        oppose : function(element, callback){
            var _vote = element.parent();
            if(!_vote.hasClass('disabled') && !element.hasClass('loading')){
                element.addClass('loading');
                $.ajax({
                    url : element.data('href'),
                    type: 'post',
                    data: {comm_id: element.data('id'), type: 0},
                    success: function(data){
                        var _count = _vote.find('.count');
                        if(data.status){
                            _count.text(Number(_count.text())-1);
                        }else{
                            $.dialog.error(data.info);
                        }
                        if(data.info == '投票成功' || data.info == '已经投过票了'){
                            _vote.addClass('disabled');
                            _vote.find('a').attr('title','你已投过票！');
                        }
                    },
                    complete: function(){
                        element.removeClass('loading');
                    }
                });
            }
        },
        //获取总页数
        getPageTotal : function(){
            return Math.ceil(this.getTotal() / this.getPageSize());
        },
        //设置每页分页数量
        setPageSize: function(size){
            if($.isNumeric(size)){
                this._pageSize = size;
                this.listParam.pageSize = this._pageSize;
            }
            return this;
        },
        //获取每页分页数量
        getPageSize: function(){
            return this._pageSize;
        },
        //设置当前分页数
        setPage: function(page){
            if($.isNumeric(page)){
                this._page = page;
                this.listParam.page = this._page;
            }
            return this;
        },
        //获取当前分页数
        getPage: function(){
            return this._page;
        },
        //设置评论总数
        setTotal : function(total){
            if($.isNumeric(total)){
                this._total = Number(total);
                this.totalEle.text(this._total);
            }
            return this;
        },
        //获取评论总数
        getTotal: function(){
            return this._total || 0;
        },
        //获取评论索引
        getItemAt: function(id){
            for(var i = 0; i < this.items.length; i++){
                if(this.items[i].data('id') == id){
                    return i;
                }
            }
            return -1;
        },
        //隐式新增一条评论
        _addItem: function(data, prepend, sumTotal){
            var _data = $.isArray(data) ? data : [data],
            _length = 0,
            _i = 0,
            _item = null,
            _temp = '<div class="comment-item" data-id="<%=id%>">'+this.options.itemTpl+'</div>',
            _callback = $.isFunction(this.options.onAddItem) ? this.options.onAddItem : $.noop,
            _items = [],
            _prepend = prepend ? true : false;
            _data = this.formartData(this.removeRepeat(_data));
            _length = _data.length;
            for(; _i < _length; _i++){
                var _res = null;
                _data[_i]['is_delete'] = this.options.is_delete;
                _item = Template.parseTemp(_temp, _data[_i]);
                _item = $(_item);
                _items.push(_item);
                this.listEle[_prepend ? 'prepend' : 'append'](_item);
                _callback.call(this, _item);
            }
            this.items = this.items.concat(_items);
            if(sumTotal === false){
                return 0;
            }else{
                return _data.length;
            }
        },
        //新增评论
        addItem: function(data, prepend, sumTotal){
            var _num = this._addItem.apply(this, arguments);
            this.setTotal(this._total+_num);
            return this;
        },
        //删除评论
        delItem: function(element,callback){
            if(!element.hasClass('loading')){
                element.addClass('loading');
                $.ajax({
                    url: element.data('href'),
                    data: $.extend({id: element.data('id')}, this.options.delParam),
                    type: 'post',
                    context: this,
                    success: function(data){
                        if(data.status){
                            var _index = this.getItemAt(element.data('id'));
                            var _prev = this.items[_index].prevAll('.comment-item');
                            if(typeof _index != 'undefined'){
                                this.items[_index].remove();
                                this.items.splice(_index, 1);
                                this.setTotal(Math.max(--this._total,0));
                                _prev.each(function(){
                                    var _text = $(this).find('.number').text().replace('#', '');
                                    $(this).find('.number').html((_text - 1)+'#');
                                });
                                this.find();
                            }
                        }else{
                            $.dialog.error(data.info);
                        }
                        $.isFunction(callback) && callback.call(this,data);
                    },
                    complete: function(){
                        element.removeClass('loading');
                    }
                });
            }
        },
        //设置删除评论参数
        setDelParam: function(param){
            this.options.delParam = $.extend(this.options.delParam||{}, param);
        },
        //清空评论列表
        empty: function(){
            var i = this.items.length - 1;
            for(; i >= 0; i--){
                this.items[i].remove();
                this.items.splice(i, 1);
            }
            this.setTotal(0);
            this.setPage(1);
            this.find();
        },
        //检测评论列表
        find: function(){
            var _total = this.getTotal(), _length = this.items.length || 0, _differ = Math.max(_total - _length, 0);
            if(_length){
                this.emptyEle.removeClass('empty-active');
            }else{
                this.options.hidePost && this.emptyEle.addClass('empty-active');
            }
            if(_differ){
                this.getLoadMoreEle(_differ).addClass('more-active');
            }else{
                this.getLoadMoreEle(_differ).removeClass('more-active');
            }
        },
        //重置发布表单
        resetForm: function(){
            this.postEnterEle.val('').blur();
            return this;
        },
        //创建基础结构
        createBase: function(){
            var _tpl = [
            '<div class="comment-result">',
                '<strong class="title">相关评论(<b class="comment-total">0</b>)</strong>',
                '<div class="comment-post">',
                '<form class="form" action="#" method="post">',
                '<label class="enter w-textarea textarea-full"><textarea class="textarea-input" name="content" placeholder="文明上网，理性发言"></textarea></label>',
                '<div class="util cf">',
                '<div class="left">',
                '<span class="comment-code"><b class="e-code icon-embed2" title="插入代码"></b></span>',
                '</div>',
                '<div class="right">',
                '<span class="form-tip w-fragment fragment-tip">Ctrl + Enter快速发布</span>',
                '<label class="form-submit w-btn btn-success btn-m"><button class="btn-input" type="submit">发布</button></label>',
                '</div>',
                '</div>',
                '</form>',
                '</div>',
                '<div class="comment-list"></div>',
            '</div>'
            ].join('');
            return $(_tpl);
        },
        //获取加载更多元素
        getLoadMoreEle : function(differ){
            var self = this;
            if(!this._loadMoreEle){
                this._loadMoreEle = $('<div class="comment-more"><span class="more-inner">加载剩余<b class="number">0</b>条评论</span></div>');
                this.listEle.after(this._loadMoreEle);
                this._loadMoreEle.children().click(function(){
                    self.moreList();
                });
            }
            if($.isNumeric(differ)){
                this._loadMoreEle.find('.number').text(differ);
            }
            return this._loadMoreEle;
        },
        //格式化数据
        formartData: function(data){
            var data = $.isArray(data) ? data : [data],
            _data = [],
            _count = this.items.length,
            _total = this.getTotal();
            for(var i = 0; i < data.length; i++){
                // data[i].number = _count + i + 1;
                typeof data[i].number == 'undefined' && (data[i].number = _total - _count - i);
                _data.push(data[i]);
            }
            return _data;
        },
        //剔除重复评论
        removeRepeat: function(data){
            var data1 = $.isArray(data) ? data : [data];
            var data2 = [];
            for(var i = 0; i < data1.length; i++){
                if(this.getItemAt(data1[i].id) < 0){
                    data2.push(data1[i]);
                }
            }
            return data2;
        },
        //解析内容代码
        resolveCode: function(content){
            var cnum= 0,arrcode = [];
            var reg = /(\[code\])([\s \S]*?)(\[\/code\])/ig;
            var res = content.replace(reg,function(r1,r2,r3,r4,n,s){
                var str = '';
                if(r2 == '[code]'){
                    str += '<pre><code>';
                }
                str += $.trim(r3);
                if(r4 == '[/code]'){
                    str += '</code></pre>';
                }
                cnum++;
                arrcode[cnum] = str;
                return "[\tcodeplace_" + cnum + "\t]";
            });

            res = res.replace(/\n/g, "<br />");

            for (var i = 1; i <= cnum; i++) {
                res = res.replace("[\tcodeplace_" + i + "\t]", function () {
                    return arrcode[i];
                });
            }

            return res;
        },
        //文本框高度自动
        textareaHeightAuto: function(element){
            element = element || this.postEnterEle;
            function autoHeight(elem){
                var _pt = parseInt(element.css('paddingTop'));
                var _pb = parseInt(element.css('paddingBottom'));
                elem.style.height = 'auto';
                elem.scrollTop = 0;
                elem.style.height = Math.max(elem.scrollHeight - _pt - _pb,0) + 'px';
            }
            autoHeight(element[0]);
            if(!arguments.callee._inited){
                element.on('keyup focus cut paste', function(){
                    autoHeight(this);
                });
                arguments.callee._inited = true;
            }
        },
        instantiation: false
    },function(){
        //解析代码
        this.resolveCode = function(content){
            var reg = /(\[code\])([\s \S]*?)(\[\/code\])/ig;
            res = content.replace(reg,function(r1,r2,r3,r4,n,s){
                var str = '';
                if(r2 == '[code]'){
                    str += '<pre><code>';
                }
                str += $.trim(r3);
                if(r4 == '[/code]'){
                    str += '</code></pre>';
                }
                return str;
            });
            return res;
        };
        //替换代码
        this.replaceCode = function(content, replaceString){
            var _replaceString = replaceString || '<span class="code-placehoder" title="查看代码"></span>';
            var reg = /(\[code\])([\s \S]*?)(\[\/code\])/ig;
            res = content.replace(reg,function(r1,r2,r3,r4,n,s){
                var str = '<div class="m-replace-code">';
                        str += '<div class="code-show">';
                            str += _replaceString;
                        str += '</div>';
                        str += '<div class="code-hide">';
                        if(r2 == '[code]'){
                            str += '<pre><code>';
                        }
                        str += $.trim(r3);
                        if(r4 == '[/code]'){
                            str += '</code></pre>';
                        }
                        str += '</div>';
                    str += '</div>';
                return str;
            });
            return res;
        };
    });
})

define('common/module/config', function(require, exports, module){
    //载入缓存类
    var Cache = require('common/library/cache');
    return window.Config = {
        //设置配置
        set : function(name, data){
            if(typeof name == 'string'){
                return Cache.set('CONFIG.'+name, data);
            }else if($.isPlainObject(name)){
                return Cache.set({CONFIG: name});
            }
        },
        //获取配置
        get : function(name){
            if(typeof name == 'string'){
                return Cache.get('CONFIG.'+name);
            }
        },
        //删除配置
        del : function(name){
            if(typeof name == 'string'){
                return Cache.del('CONFIG.'+name);
            }
        }
    };
})

define('common/module/customerService', function () {
    Class({
        //绑定客服元素
        serviceEle: $('#w-intercom-launcher-button'),
        initial: function () {
            var self = this;
            var dragging = false;
            var iX, iY;
            this.serviceEle.mousedown(function (e) {
                dragging = true;
                iX = e.clientX - this.offsetLeft;
                iY = e.clientY - this.offsetTop;
                return false;
            });
            document.onmousemove = function (e) {
                if (dragging) {
                    var e = e || window.event;
                    var oX = e.clientX - iX;
                    var oY = e.clientY - iY;
                    $("#w-intercom-launcher-button").css({"left": oX + "px", "top": oY + "px"});
                    $("#w-intercom-launcher-button").data("w-intercom-launcher-button", 1);
                    return false;
                }
            };
            $(document).mouseup(function (e) {
                dragging = false;
                e.cancelBubble = true;
                setTimeout(function () {
                    $("#w-intercom-launcher-button").data("w-intercom-launcher-button", 0);
                }, 100);
            })
            this.serviceEle.click(function () {
                if ($("#w-intercom-launcher-button").data("w-intercom-launcher-button") == 1) {
                    return false;
                }
            });

            this.serviceEle.hover(function () {
                $(this).find(".icon-circle-cross").show();
            }, function () {
                $(this).find(".icon-circle-cross").hide();
            });
            this.serviceEle.find(".icon-circle-cross").click(function () {
                $(this).parent("#w-intercom-launcher-button").hide();
            });
        }
    });
});

define('common/module/cutImage',function(require,exports,module){
    //载入裁剪图片控件
    require('component/jcrop/css/jquery.Jcrop.css');
    require('component/jcrop/js/jquery.Jcrop');
    //载入表单提交插件
    require('component/jquery.form');
    //载入模版引擎
    var Template = require('common/extend/template');
    return Class({
        //默认配置项
        _options: {
            cls: null, //样式名称
            boxWidth: 0, //限制裁剪图片显示宽度
            boxHeight: 0, //限制裁剪图片显示高度
            cutWidth: 0, //裁剪宽度
            cutHeight: 0, //裁剪高度
            uploadUrl: null, //上传图片服务器地址
            uploadParam: null, //上传图片提交服务器参数
            saveCutUrl: null, //保存裁剪图片服务器地址
            saveCutParam: null, //保存裁剪图片提交服务器参数
            onUploadStart: null, //上传图片开始回调函数
            onUploadEnd: null, //删除图片结束回调函数
            onSuccess: null, //保存封面成功回调函数
        },
        //记录裁剪坐标
        cutImageData: {},
        //记录裁剪图片地址
        cutImageKey: "",
        initial: function(options){
            var self = this;
            //合并配置项
            this.options = $.extend({}, this._options, options);
            //创建模版
            this.createTemp();
            //添加样式名
            this.wrapEle.addClass(this.options.cls);
            //设置上传图片地址
            this.setUploadUrl(this.options.uploadUrl);
            //设置上传图片参数
            this.setUploadParam(this.options.uploadParam);
            //设置保存裁剪图片地址
            this.setSaveCutUrl(this.options.saveCutUrl);
            //设置保存裁剪图片参数
            this.setSaveCutParam(this.options.saveCutParam);
            //绑定上传图片操作
            this.uploadFileEle.change(function(){
                self.uploadFormEle.submit();
            });
            //记录裁剪实例
            this.cropImage = null;
            //绑定裁剪图片组件
            self.cropImage = $.Jcrop(this.cropImageEle, {
                aspectRatio: this.options.cutWidth/this.options.cutHeight,
                bgOpacity: 0.5,
                boxWidth: this.options.boxWidth,
                boxHeight: this.options.boxHeight,
                onSelect: function(c){
                    self.cutImageData = c;
                },
                onRelease:function(){
                    self.cutImageData = {
                        x: 0,
                        y: 0,
                        w: self.options.cutWidth,
                        h: self.options.cutHeight,
                    };
                }
            });
            //绑定上传图片操作
            this.uploadFormEle.submit(function(){
                if(!self.uploadFileEle.hasClass('disabled')){
                    $(this).ajaxSubmit({
                        data: self._uploadParam,
                        beforesend: self.options.onUploadStart,
                        success: function(data){
                            if(typeof data == 'string'){
                                data = $.parseJSON(data);
                            }
                            if(data.status){
                                self.wrapEle.addClass('cutimg-enable');
                                var _src = data.data.url.indexOf('?') >= 0 ? data.data.url + '&v=' + (new Date()).getTime() : data.data.url + '?v=' + (new Date()).getTime();
                                self.cutImageKey = data.data.key;
                                self.cropImage.setImage(_src,function(){
                                    var _ar = this.getOptions().aspectRatio,
                                        _is = this.getBounds(),
                                        _ms = Math.min(_is[0], _is[1]),
                                        _hw = Math.floor(_ms*0.8),
                                        _hh = Math.floor(_hw/_ar),
                                        _x  = (_is[0]-_hw)/2,
                                        _y  = (_is[1]-_hh)/2;
                                    self.cropImage.setSelect([_x,_y,_hw+_x,_hh+_y]);
                                });
                            }else{
                                $.dialog.error(data.info);
                            }
                            $.isFunction(self.options.onUploadEnd) && self.options.onUploadEnd.call(this, data);
                        },
                        complete: function(){
                            self.uploadBtnEle.removeClass('btn-loading');
                            self.uploadBtnEle.find('button').text('选择图片');
                            self.uploadFileEle.removeClass('disabled');
                            self.uploadFileEle.show();
                        }
                    });
                    self.uploadBtnEle.addClass('btn-loading');
                    self.uploadBtnEle.find('button').text('正在上传');
                    self.uploadFileEle.addClass('disabled');
                    self.uploadFileEle.hide();
                }
                return false;
            });
            //绑定保存裁剪图片操作
            this.saveCutFormEle.submitForm({
                data: this._saveCutParam,
                onBefore: function(options){
                    if(self.cropImage){
                        options.data.key = self.cutImageKey;
                        options.data.x = self.cutImageData.x;
                        options.data.y = self.cutImageData.y;
                        options.data.w = self.cutImageData.w;
                        options.data.h = self.cutImageData.h;
                    }
                },
                onAfter: function(data){
                    if(data.status){
                        self.cropImage.release();
                        $.dialog.success(data.info);
                        $.isFunction(self.options.onSuccess) && self.options.onSuccess.call(this, data);
                    }else{
                        $.dialog.error(data.info);
                    }
                }
            });
            //绑定重新上传操作
            this.reuploadEle.click(function(){
                self.reupload();
            });
        },
        //获取结构
        getHtml: function(){
            return this.wrapEle;
        },
        //动态常见模版
        createTemp: function(){
            var _html = [
                '<div class="m-cutimg-work">',
                    '<div class="work-area">',
                        '<div class="work-upload">',
                            '<form class="w-form" id="uploadForm" method="post" enctype="multipart/form-data">',
                                '<div class="upload-input">',
                                    '<input name="cover" class="file" type="file">',
                                    '<i class="icon icon-cloud-storage"></i>',
                                    '<label class="w-btn btn-success btn-l">',
                                        '<button type="button" class="btn-input">选择图片</button>',
                                    '</label>',
                                '</div>',
                                '<p class="upload-tip">图片大小不能超过5M，且只允许为png、gif、jpg格式图片</p>',
                            '</form>',
                        '</div>',
                        '<div class="work-crop">',
                            '<form class="w-form" id="saveCutForm" method="post" enctype="multipart/form-data">',
                                '<div class="crop-image">',
                                    '<div class="image-inner">',
                                        '<img width="200">',
                                    '</div>',
                                '</div>',
                                '<div class="crop-util">',
                                    '<span class="util-left">',
                                        '<a class="reupload e-link"><i class="icon-undo2"></i>重新上传</a>',
                                    '</span>',
                                    '<span class="util-right">',
                                        '<label class="w-btn btn-success btn-m">',
                                            '<button class="btn-input" type="submit">保存裁剪</button>',
                                        '</label>',
                                    '</span>',
                                '</div>',
                            '</form>',
                        '</div>',
                    '</div>',
                '</div>',
            ].join('');
            this.wrapEle = $(Template.parseTemp(_html));
            this.uploadFileEle = this.wrapEle.find('[type=file]');
            this.uploadWorkEle = this.wrapEle.find('.work-upload');
            this.uploadBtnEle = this.uploadWorkEle.find('.w-btn');
            this.cropWorkEle = this.wrapEle.find('.work-crop');
            this.cropImageEle = this.wrapEle.find('.crop-image img');
            this.uploadFormEle = this.wrapEle.find('#uploadForm');
            this.saveCutFormEle = this.wrapEle.find('#saveCutForm');
            this.reuploadEle = this.wrapEle.find('.reupload');
        },
        //设置上传图片地址
        setUploadUrl: function(url){
            this.uploadFormEle.attr('action', url);
            return this;
        },
        //设置上传图片参数
        setUploadParam: function(param){
            this._uploadParam = param;
            return this;
        },
        //设置保存裁剪图片地址
        setSaveCutUrl: function(url){
            this.saveCutFormEle.attr('action', url);
            return this;
        },
        //设置保存裁剪图片传递服务器参数
        setSaveCutParam: function(param){
            this._saveCutParam = param;
            return this;
        },
        //重新上传
        reupload: function(){
            this.wrapEle.removeClass('cutimg-enable');
            return this;
        },
        instantiation: false
    });
})

define('common/module/editor', function (require) {

    require('component/codemirror/lib/codemirror');
    require('component/codemirror/lib/codemirror.css');
    CodeMirror.modeURL = "/Static/component/codemirror/mode/%N/%N.js";

    //载入markdown解析脚本
    var showdown = require('component/showdown/dist/showdown.min');

    var xss = require('common/extend/showdown/xss');

    var editor = function (id, options) {
        return new editor.fn.init(id, options);
    };

    var previewTimer;

    editor.defaults = {

        "items": ["h1,h2,h3,h4,h5,h6,-,link,image,-,bold,italic,code,-," +
        "ul,ol,blockquote,hr", "fullscreen,save"],
        extraItems: [],
        "width": "100%",

        "height": "100%",

        "uploader": {
            "url": "",      //图片上传URL，该URL必须返回JSON数据
            "data": null,    //额外提交参数
            "name": "images" //图片上传表单名称, 即<input type="file" name=""/>name属性默认设置的值
        },
        tools: {},

        "onSave": $.noop,//保存按钮回调接口
        "mode": {name: 'kancloud', fencedCodeBlocks: true},
        lang: {
            /* 工具栏语言 */
            "h1": "标题一",
            "h2": "标题二",
            "h3": "标题三",
            "h4": "标题四",
            "h5": "标题五",
            "h6": "标题六",
            "link": "链接",
            "image": "图片",
            "bold": "加粗",
            "italic": "斜体",
            "code": "代码",
            "ul": "无序列表",
            "ol": "有序列表",
            "blockquote": "引用",
            "hr": "分割线",
            "table": "表格",
            "preview": "预览",
            "help": "帮助",
            "undo": "撤销",
            "redo": "重做",
            "fullscreen": "全屏编辑",
            "save": "保存",

            /* 插入表格 */
            "table-title": "插入表格",

            "link-title": '插入链接',

            /* 图片插件语言 */
            "image-title": "插入图片",
            "image-text": "拖动图片到这里上传"
        },
        "preview": false,
        "extensions": []
    };


    editor.$codemirror = null;
    editor.$marked = null;
    editor.$preview = false;

    editor.prototype = editor.fn = {
        init: function (id, options) {
            options = this.options = $.extend({}, editor.defaults, options || {});

            this.lang = $.extend({}, editor.defaults.lang, options.lang || {});

            var $textarea;
            if (typeof id === 'string') {
                $textarea = $('#' + id);
            } else {
                $textarea = id;
            }

            /* 创建编辑器 */
            $textarea.wrap("<div/>").parent().wrap("<div/>");
            var $editor = this.$editor = $textarea.parent().parent();
            $editor.addClass("thinkeditor");
            $editor.children("div").addClass("thinkeditor-textarea");

            var _textareaParent = $textarea.closest('.thinkeditor-textarea');
            var _mainWorkArea = $('<div class="thinkeditor-main"></div>');
            var _previewArea = $('<div class="thinkeditor-preview"><div class="thinkeditor-preview-inner"><div class="thinkeditor-preview-content think-editor-content"></div></div></div>');
            _textareaParent.after(_mainWorkArea);
            _mainWorkArea.append(_textareaParent).append(_previewArea);
            _textareaParent.wrap('<div class="thinkeditor-textarea-wrap"></div>');

            this.preview = _previewArea.find('.thinkeditor-preview-inner');
            this.previewContainer = _previewArea.find('.thinkeditor-preview-content');

            /* 设置editor尺寸 */
            $editor.css({"width": options.width, "height": options.height});

            /* 创建工具栏 */
            this.setCodeMirror($textarea[0]).setToolbar().setMarkdown().syncScroll();

            //初始化
            this.setMode(options.mode);
            var self = this;
            this.$codemirror.on('change', function () {
                if (self.$preview) {
                    self.setPreviewContent(self.getValue());
                }
            });
            this.setPreviewContent(this.getValue());
            this.initValue = this.getValue();

            //新窗口打开链接
            this.preview.on('click', 'a', function () {
                if (!$(this).data('internal')) {
                    window.open($(this).attr('href'));
                    return false;
                }
            });

            return this;
        },
        isChanged: function () {
            return this.initValue !== this.getValue();
        },
        reset: function () {
            this.initValue = this.getValue();
            this.$codemirror.clearHistory();
            this.getToolbar('save').attr('disabled', 'disabled').removeClass('warning');
        },
        //设置预览内容
        setPreviewContent: function (content) {
            var self = this;
            if (previewTimer) {
                clearTimeout(previewTimer);
            }

            previewTimer = setTimeout(function () {
                self.previewContainer.html(self.$marked.makeHtml(content));
            }, 300);
        },
        setMarkdown: function () {

            var options = {
                omitExtraWLInCodeBlocks: true,
                noHeaderId: false,
                simplifiedAutoLink: true,
                literalMidWordUnderscores: true,
                tables: true,
                ghCodeBlocks: true,
                tasklists: true,
                extensions: [xss, 'toc'].concat(this.options.extensions)
            };

            //实例化markdown解析器
            this.$marked = new showdown.Converter(options);

            return this;
        },
        setCodeMirror: function (textarea) {

            this.$codemirror = CodeMirror.fromTextArea(textarea, {
                lineWrapping: 'wrap'
            });
            this.$codemirror.setSize('100%', '100%');
            return this;
        },
        setToolbar: function () {
            var items,
                left_groups = this.options.items[0].split(",-,"),
                right_groups = this.options.items[1].split(",-,"),
                $group,
                $tools = $("<div/>"), self = this;


            var isMac = Util.isMac();
            var tools = this.getToolbarHandlers();
            /* 创建按钮组 */
            var regItem = function (items, $group) {
                for (var j in items) {
                    if (items[j]) {
                        var hint = self.lang[items[j]];
                        if (hint && tools[items[j]] && tools[items[j]]['bindKey']) {
                            if (isMac && tools[items[j]]['bindKey']['mac']) {
                                hint += " (" + tools[items[j]]['bindKey']['mac'] + ")";
                            } else {
                                hint += " (" + (tools[items[j]]['bindKey']['win'] ? tools[items[j]]['bindKey']['win'] : tools[items[j]]['bindKey'] ) + ")";
                            }
                        }
                        var $a = $("<a/>").addClass(items[j])
                            .attr("href", "javascript:;")
                            .data("name", items[j])
                            .append('<i>');
                        if (tools[items[j]] && tools[items[j]]['class']) {
                            $a.addClass(tools[items[j]]['class']);
                        }
                        if (hint) {
                            $a.addClass('hint--bottom').attr('data-hint', hint);
                        }

                        $a.appendTo($group);
                    }
                }
            };

            for (var i in left_groups) {
                items = left_groups[i].split(",");
                $group = $("<div/>").addClass("thinkeditor-tools-group")
                    .appendTo($tools);
                regItem(items, $group);
            }

            $group = $("<div/>").addClass("thinkeditor-tools-group")
                .appendTo($tools);
            regItem(this.options.extraItems, $group);

            for (var i in right_groups) {
                items = right_groups[i].split(",");
                $group = $("<div/>").addClass("thinkeditor-tools-group pull-right")
                    .appendTo($tools);
                regItem(items, $group);
            }

            /* 工具栏放入editor */
            $tools.addClass("thinkeditor-tools").prependTo(this.$editor);
            this.toolbar = $tools;
            /* 绑定操作事件 */
            $tools.on("click", ".thinkeditor-tools-group a:not([disabled])", function (event) {
                event.stopPropagation();
                tools[$(this).data("name")].exec.call(self);
            });

            $.each(tools, function (k, v) {
                if (v.init) {
                    v.init.call(self);
                }
                if (v.bindKey) {
                    v.name = k;
                    var exec = v.exec;
                    v.exec = function () {
                        if (v.markdown && self.$mode != 'kancloud') {
                            return false;
                        }
                        exec.call(self);
                    };
                    var key = isMac && v.bindKey.mac ? v.bindKey.mac : v.bindKey.win;
                    if (key) {
                        var map = {};
                        map[key] = v.exec;
                        self.addKeyMap(map);
                    }
                }
            });
            this.$editor.on("changeMode", function () {
                for (var i in tools) {
                    if (tools[i].markdown) {
                        if (self.$mode != 'kancloud') {
                            self.getToolbar(i).attr('disabled', 'disabled');
                        } else {
                            self.getToolbar(i).removeAttr('disabled');
                        }
                    }
                }
            });

            return this;
        },
        getToolbarHandlers: function () {
            return $.extend(editor.toolbarHandlers, this.options.tools || {});
        },
        insert: function (text) {
            var selection = this.$codemirror.getSelection(),
                cursor = this.$codemirror.getCursor(),
                cursorCoords = this.$codemirror.cursorCoords(true, 'local'),
                scrollInfo = this.$codemirror.getScrollInfo(),
                start, end, _start, line = 0,
                length;
            this.$codemirror.focus();

            if (!(cursorCoords.top > scrollInfo.top && cursorCoords < scrollInfo.top + scrollInfo.clientHeight)) {
                this.$codemirror.scrollIntoView({line: cursor.line, ch: 0});
            }

            if (arguments.length > 1) { //首尾添加文本
                start = arguments[0];
                end = arguments[1];

                if (arguments[2]) { //按行添加


                    /* 插入数据 */
                    if (selection) {
                        selection = selection.split("\n");
                        length = selection.length;

                        /* 逐行添加 */
                        for (var i in selection) {
                            if (!length || $.trim(selection[i])) {
                                _start = start.replace("{$line}", ++line)
                                    .replace("{$i}", i);
                                selection[i] = _start + selection[i] + end;
                            }
                        }

                        this.$codemirror.replaceSelection(selection.join("\n"), 'around');
                    } else {

                        _start = start.replace("{$line}", 1)
                            .replace("{$i}", 0);

                        this.$codemirror.replaceSelection(_start + end);
                    }

                } else {
                    if (selection) {
                        this.$codemirror.replaceSelection(start + selection + end, 'around');
                    } else {
                        this.$codemirror.replaceSelection(start, 'end');
                        this.$codemirror.replaceSelection(end, 'start');
                    }
                }
            } else { //插入文本
                this.$codemirror.replaceSelection(text);
            }
        },
        getValue: function () {
            return this.$codemirror.getValue();
        },
        setValue: function (content) {
            this.$codemirror.setValue(content);
            this.$codemirror.focus();
        },
        addKeyMap: function (map, bottom) {
            this.$codemirror.addKeyMap(map, bottom);
        },
        getToolbar: function (name) {
            var $toolbar = this.toolbar;
            if (!name) {
                return $toolbar;
            }
            return $toolbar.find('.thinkeditor-tools-group .' + name);
        },
        syncScroll: function () {
            var self = this;
            this.$codemirror.on('scroll', function () {
                var scrollInfo = self.$codemirror.getScrollInfo();
                var scrollTop = scrollInfo.top / (scrollInfo.height - scrollInfo.clientHeight) * (self.preview[0].scrollHeight - self.preview[0].offsetHeight);
                self.preview.scrollTop(scrollTop);
            });

            return this;
        },
        setMode: function (mode) {
            var self = this;

            if (Object.prototype.toString.call(mode) === '[object String]') {
                mode = {name: mode};
            }

            if (mode.name != this.$mode) {
                require.async(['component/codemirror/addon/mode/loadmode', 'component/codemirror/addon/mode/overlay'], function () {

                    self.$mode = mode.name;
                    self.$codemirror.setOption("mode", mode);
                    CodeMirror.autoLoadMode(self.$codemirror, mode.name);
                    self.$editor.trigger("changeMode");
                });

            }
        }
    };

    editor.fn.init.prototype = editor.fn;

    editor.toolbarHandlers = {
        "undo": {
            "bindKey": {'win': 'Ctrl-Z', 'mac': 'Cmd-Z'},
            "exec": function () {
                this.$codemirror.undo();
            },
            init: function () {
                var self = this;

                this.getToolbar('undo').attr('disabled', 'disabled');
                this.$codemirror.on('change', function () {
                    setTimeout(function () {
                        var history = self.$codemirror.historySize();
                        if (history.undo > 0) {
                            self.getToolbar('undo').removeAttr('disabled');
                        } else {
                            self.getToolbar('undo').attr('disabled', 'disabled');
                        }
                    }, 0);
                });

            }
        },
        "redo": {
            "bindKey": {'win': 'Ctrl-Y', 'mac': 'Cmd-Y'},
            "exec": function () {
                this.$codemirror.redo();
            },
            init: function () {
                var self = this;

                this.getToolbar('redo').attr('disabled', 'disabled');
                this.$codemirror.on('change', function () {
                    setTimeout(function () {
                        var history = self.$codemirror.historySize();
                        if (history.redo > 0) {
                            self.getToolbar('redo').removeAttr('disabled');
                        } else {
                            self.getToolbar('redo').attr('disabled', 'disabled');
                        }
                    }, 0);
                });
            }
        },
        "h1": {
            "bindKey": {'win': "Ctrl-1", 'mac': "Cmd-1"},
            "exec": function () {
                this.insert("# ", "", false);
            },
            "markdown": true
        },
        "h2": {
            /* 标题二快捷键 */
            "bindKey": {'win': "Ctrl-2", 'mac': "Cmd-2"},

            /* 执行标题二 */
            "exec": function () {
                this.insert("## ", "", false);
            },
            "markdown": true
        },
        "h3": {
            "bindKey": {'win': "Ctrl-3", 'mac': 'Cmd-3'},
            "exec": function () {
                this.insert("### ", "", false);
            },
            "markdown": true
        },
        "h4": {
            "bindKey": {'win': "Ctrl-4", 'mac': 'Cmd-4'},
            "exec": function () {
                this.insert("#### ", "", false);
            },
            "markdown": true
        },
        "h5": {
            "bindKey": {'win': "Ctrl-5", 'mac': 'Cmd-5'},
            "exec": function () {
                this.insert("##### ", "", false);
            },
            "markdown": true
        },
        "h6": {
            "bindKey": {'win': "Ctrl-6", 'mac': 'Cmd-6'},
            "exec": function () {
                this.insert("###### ", "", false);
            },
            "markdown": true
        },
        "link": {
            "bindKey": {'win': "Ctrl-L", 'mac': 'Cmd-L'},
            "exec": function () {
                var text = this.$codemirror.getSelection();

                var $html, editor = this;
                $html = $("<div/>").addClass("thinkeditor-plugin-link").html('' +
                    '<div class="w-form form-horizon dialog-form">' +
                    '<div class="form-item">' +
                    '<span class="form-label">链接地址</span>' +
                    '<div class="form-target">' +
                    '<label class="w-text text-m">' +
                    '<input class="text-input" type="text" name="link" value=""  />' +
                    '</label>' +
                    '</div>' +
                    '</div>' +
                    '<div class="form-item">' +
                    '<span class="form-label">链接标题</span>' +
                    '<div class="form-target">' +
                    '<label class="w-text text-m">' +
                    '<input class="text-input" type="text" name="title" value="" />' +
                    '</label>' +
                    '</div>' +
                    '</div>' +
                    '</div>');


                var $link = $html.find('[name="link"]');
                var $title = $html.find('[name="title"]');

                if (text.length) {
                    $title.val(text);
                }
                $.dialog.open($html, {
                    "title": this.lang["link-title"],
                    "onOpen": function () {
                        $link.focus();
                        $link.val('http://');
                    },
                    "onOk": function () {
                        var link = $link.val();
                        if (link === 'http://') {
                            alert('请输入链接地址');
                            return;
                        }
                        var title = $title.val();
                        if (!title) {
                            title = link;
                        }

                        var str = '[' + title + '](' + link + ')';

                        editor.insert(str);
                        this.close();
                    }
                });
            },
            "markdown": true
        },
        "image": {
            "bindKey": {'win': "Ctrl-G", 'mac': 'Cmd-G'},
            "exec": function () {
                var $file = $("<input type=\"file\"/>"),
                    editor = this;

                $file.attr("name", this.options.uploader.name || "images");
                this.$editor.append($file.hide());
                $file.click();

                $file.on("change", function () {
                    new uploader($file[0].files, editor.options.uploader, editor);
                    $file.remove();
                });
            },
            init: function () {
                var self = this;
                this.$codemirror.on('paste', function (codemirror, e) {
                    //粘贴图片上传
                    var clipboard = e.clipboardData, files = [], file;
                    for (var i in clipboard.items) {
                        if (clipboard.items[i].kind == "file") {
                            file = clipboard.items[i].getAsFile();
                            files.push(new File([file], "screenshot_" + new Date().getTime() + ".png", {"type": clipboard.items[i].type}));
                        }
                    }
                    files.length && new uploader(files, self.options.uploader, self);
                });

            },
            "markdown": true
        },
        "bold": {
            "bindKey": {'win': "Ctrl-B", 'mac': 'Cmd-B'},
            "exec": function () {
                this.insert("**", "**", false);
            },
            "markdown": true
        },
        "italic": {
            "bindKey": {'win': "Ctrl-I", 'mac': 'Cmd-I'},
            "exec": function () {
                this.insert("*", "*", false);
            },
            "markdown": true
        },
        "code": {
            "bindKey": {'win': "Ctrl-D", 'mac': 'Cmd-D'},
            "exec": function () {
                var text = this.$codemirror.getSelection(), cursor = this.$codemirror.getCursor();

                if (text.length) {
                    if (text.split("\n").length > 1) {
                        this.insert("~~~\n", "\n~~~", false);
                    } else {
                        this.insert("`", "`", false);
                    }
                } else {
                    if (cursor.ch == 0) {
                        this.insert("~~~\n", "\n~~~", true);
                    } else {
                        this.insert("`", "`", true);
                    }
                }
            },
            "markdown": true
        },
        "ul": {
            "bindKey": {'win': "Ctrl-U", 'mac': 'Cmd-U'},
            "exec": function () {
                this.insert("* ", "", true);
            },
            "markdown": true
        },
        "ol": {
            "bindKey": {'win': "Ctrl-O", 'mac': "Cmd-O"},
            "exec": function () {
                this.insert("{$line}. ", "", true);
            },
            "markdown": true
        },
        "blockquote": {
            "bindKey": {'win': "Ctrl-Q", 'mac': 'Cmd-Q'},
            "exec": function () {
                this.insert("> ", "", true);
            },
            "markdown": true
        },
        "hr": {
            "bindKey": {'win': "Ctrl-H", 'mac': 'Cmd-H'},
            "exec": function () {
                this.insert("\n* * * * *\n", "", false);
            },
            "markdown": true
        },

        /* 插入表格 */
        "table": {
            "exec": function () {
                var $html, self = this;
                $html = $("<div/>").addClass("thinkeditor-plugin-table").html('' +
                    '<div class="w-form form-horizon dialog-form">' +
                    '<div class="form-item">' +
                    '<span class="form-label">行</span>' +
                    '<div class="form-target">' +
                    '<label class="w-text text-m">' +
                    '<input class="text-input" type="number" name="rows" value="2" step="1" min="2" max="10000" />' +
                    '</label>' +
                    '</div>' +
                    '</div>' +
                    '<div class="form-item">' +
                    '<span class="form-label">列</span>' +
                    '<div class="form-target">' +
                    '<label class="w-text text-m">' +
                    '<input class="text-input" type="number" name="columns" value="2" step="1" min="1" max="10000" />' +
                    '</label>' +
                    '</div>' +
                    '</div>' +
                    '</div>');

                $.dialog.open($html, {
                    title: this.lang['table-title'],
                    onOk: function () {
                        var rows = parseInt($html.find('[name="rows"]').val());
                        var columns = parseInt($html.find('[name="columns"]').val());
                        var table = "\n";
                        if (rows > 1 && columns > 1) {
                            for (var i = 1; i <= rows; i++) {
                                table += '|' + new Array(columns + 1).join('    |') + '\n';
                                if (i === 1) {
                                    table += '|' + new Array(columns + 1).join(' --- |') + '\n';
                                }
                            }
                        }
                        self.insert(table);
                        this.close();
                    }
                });
            },
            "markdown": true
        },

        /* 全屏编辑 */
        "fullscreen": {
            /* 执行全屏编辑 */
            "exec": function () {
                var $body = $("body");

                if (this.$editor.hasClass("thinkeditor-fullscreen")) {
                    $body.css("overflow", "");
                    this.$editor.removeClass("thinkeditor-fullscreen");
                    this.getToolbar('fullscreen').removeClass('active');
                } else {
                    $body.css("overflow", "hidden");
                    this.$editor.addClass("thinkeditor-fullscreen");
                    this.getToolbar('fullscreen').addClass('active');
                }
                this.$codemirror.refresh();
            }
        },
        "preview": {
            "exec": function () {
                if (this.$preview) {
                    this.$editor.removeClass('thinkeditor-preview-active');
                    this.getToolbar('preview').removeClass('active');
                    this.$preview = false;
                } else {
                    this.$editor.addClass('thinkeditor-preview-active');
                    this.getToolbar('preview').addClass('active');
                    this.$preview = true;
                    this.setPreviewContent(this.getValue());
                }
                this.$codemirror.refresh();
            },
            init: function () {
                var self = this, preview = false;
                if (this.options.preview) {
                    this.$preview = true;
                    this.$editor.addClass('thinkeditor-preview-active');
                    this.getToolbar('preview').addClass('active');
                    this.$codemirror.refresh();
                    preview = true;
                }
                this.$editor.on("changeMode", function () {
                    if (self.$mode != 'kancloud') {
                        if (self.$preview) {
                            self.$editor.removeClass('thinkeditor-preview-active');
                            self.getToolbar('preview').removeClass('active');
                            self.$preview = false;
                            self.$codemirror.refresh();
                        }
                    } else if (!self.$preview && self.options.preview) {
                        self.$editor.addClass('thinkeditor-preview-active');
                        self.getToolbar('preview').addClass('active');
                        self.$preview = true;
                        self.setPreviewContent(self.getValue());
                        self.$codemirror.refresh();
                    }
                });
            },
            "markdown": true
        },
        "help": {
            "exec": function () {
                window.open('http://help.kancloud.cn/41501');
            }
        }

    };


    var uploader = function (files, options, editor) {

        if ($.isFunction(options)) {
            options.call(editor, files);
        } else {

            //初始化表单数据
            this.data = new FormData();
            this.editor = editor;

            this.$progress = $("<span>图片上传中...</span>").addClass("thinkeditor-upload-progress");
            this.options = options;
            this.upload(files);
        }
    };

    uploader.prototype = {
        /**
         * 显示图片上传消息
         * @param  {String}  msg    消息内容
         * @param  {String}  status 状态（error,success）
         * @param callback
         */
        "message": function (msg, status, callback) {
            $.isFunction(callback) && callback(status == 'error' ? 0 : 1, msg);
        },

        "progress": function (progress) {
            var $progress = this.$progress;

            switch (progress) {
                case "start":
                    $progress.text("0%");
                    this.editor.$editor.append($progress);
                    break;
                case "end":
                    $progress.remove();
                    break;
                default:
                    $progress.text(progress + "%");
                    break;
            }
        },

        /**
         * 将上传好的图片插入到编辑器
         * @param  {Array}  imgs   上传的图片数组
         */
        "insert": function (imgs) {
            var _text = this.editor.$codemirror.getSelection(), img, alt, src, text = [];

            for (var name in imgs) {
                img = imgs[name];
                alt = _text.length ? _text : '';
                text.push("![" + alt + "](" + img.src + ")");
            }

            this.editor.insert(text.join("\n"));
        },

        "upload": function (files) {
            var self = this, xhr = new XMLHttpRequest(), msg, FILES = [];

            if (!xhr.upload) {
                msg = "您的浏览器不支持AJAX上传文件！";
                self.message(msg, "error", this.options.callback);
                return;
            }

            for (var i = 0, file; file = files[i]; i++) {
                //禁止上传非图片文件
                if (!file.type.match(/^image\/(?:png|jpeg|jpg|gif)$/)) {
                    msg = "忽略非图片文件：" + file.name;
                    self.message(msg, "error", this.options.callback);
                } else if (file.size > 1024 * 1024 * 10) {
                    msg = "忽略超过大小限制的文件：" + file.name;
                    self.message(msg, "error", this.options.callback);
                } else {
                    if (FILES.length < 3) {
                        FILES.push(files[i]);
                    } else {
                        msg = "最多同时上传3个文件，";
                        msg += "已忽略" + (files.length - i) + "个";
                        self.message(msg, "error", this.options.callback);
                        break;
                    }
                }
            }

            //验证上传文件
            if (FILES.length) {
                for (i in FILES)
                    this.data.append(this.options.name + "" + i, FILES[i]);
            } else {
                msg = "没有可以上传的文件！";
                self.message(msg, "error", this.options.callback);
                return;
            }

            // 上传中
            this.addEvent(xhr.upload, 'progress', function (event) {
                var progress = Math.round(event.loaded / event.total);
                self.progress(progress);
            }, false);

            // 文件上传成功或是失败
            xhr.onreadystatechange = function () {
                var data;
                if (xhr.readyState == 4) {
                    self.progress("end");
                    if (xhr.status == 200) {
                        data = $.parseJSON(xhr.responseText);
                        if (data.status) {
                            self.insert(data.files);
                        } else {
                            self.message(data.info, "error", self.options.callback);
                        }
                    } else {
                        self.message("文件上传失败！", "error", self.options.callback);
                    }
                }
            };
            var data = this.options.data;
            if ($.isFunction(this.options.data)) {
                data = this.options.data();
            }

            //准备上传数据
            if ($.isPlainObject(data)) {
                for (var i in data) {
                    this.data.append(i, data[i]);
                }
            }

            // 开始上传
            this.progress("start");
            xhr.open("POST", this.options.url, true);
            xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
            xhr.send(this.data);
        },
        addEvent: function (elm, evType, fn, useCapture) {
            if (elm.addEventListener) {
                elm.addEventListener(evType, fn, useCapture || false);
                return true;
            } else if (elm.attachEvent) {
                var r = elm.attachEvent('on' + evType, fn);
                return r;
            } else {
                elm['on' + evType] = fn;
            }
        }
    };

    return editor;
});
define('common/module/order', function (require) {

    //载入模版引擎
    var Template = require('common/extend/template');

    return Class({
        //默认配置项
        _options     : {
            type   : '',//商品类型
            title  : '',
            infoTpl: '',
            coin   : 0,//可用云币
            coupon : false,//可用优惠券
            price  : 0,//价格
            style  : '',
            data   : {}
        },
        price        : 0,
        coupon_price : 0,
        initial      : function (options) {
            var self     = this;
            //合并配置项
            this.options = $.extend({}, this._options, options);
            //创建模版
            this.createTemp();

            this.freshPrice();
            if (this.options.coin) {
                this.useCoinEle.change(function () {
                    self.freshPrice();
                });
            }

            if (this.options.coupon) {
                /* 优惠码改变 */
                $('input[name=coupon]', this.wrapEle).on('keyup input propertychange blur', function () {
                    var $this        = $(this);
                    self.coupon_code = $(this).val();
                    if (self.coupon_code.length !== 8) {
                        if (self.coupon_code.length > 0) {
                            $this.next().text('无效的优惠券');
                            $this.parents('.form-item').addClass('has-error');
                        } else {
                            $this.parents('.form-item').removeClass('has-error');
                        }
                        self.coupon_code  = '';
                        self.coupon_price = 0;
                        self.freshPrice();
                        return;
                    }

                    $.post('/order/coupon', {
                        code : self.coupon_code,
                        price: self.price,
                        type : self.options.type
                    }, function (result) {
                        if (result.status) {
                            self.coupon_price = result.info;
                            $this.parents('.form-item').removeClass('has-error');
                        } else {
                            self.coupon_code  = '';
                            self.coupon_price = 0;
                            $this.next().text(result.info);
                            $this.parents('.form-item').addClass('has-error');
                        }
                        self.freshPrice();
                    });
                });
            }
            if (this.options.onInit) {
                this.options.onInit.call(this);
            }

            // 支付按钮
            this.payBtnEle.click(function () {
                var that = $(this);
                if (that.attr('disabled')) {
                    return;
                }

                that.attr('disabled', 'disabled');
                that.children('.btn-input').text('正在创建订单...');
                var data;
                if ($.isFunction(self.options.data)) {
                    data = self.options.data.call(self);
                } else {
                    data = self.options.data;
                }
                data.type = self.options.type;

                var $click = $("#pay_click");
                if ($click.length == 0) {
                    $click = $('<a id="pay_click" target="_blank" href="javascript:;" style="display: none"></a>').appendTo($('body'));
                }
                $.post('/order', data, function (result) {
                    if (result.status) {
                        var qr_url   = '/pay';
                        var pay_data = {
                            coupon_code: self.coupon_code,
                            order_id   : result.info,
                            pay_type   : self.wrapEle.find('[name=pay_type]:checked').val(),
                            use_coin   : self.options.coin && self.useCoinEle.is(':checked') ? 1 : 0
                        };

                        $.ajax({
                            type   : 'post',
                            url    : qr_url,
                            data   : pay_data,
                            success: function (result) {
                                if (typeof result == 'object') {
                                    $.dialog.error(result.info);
                                    that.removeAttr('disabled');
                                    that.children('.btn-input').text('确认支付');
                                } else {
                                    if (result == 'success') {
                                        $.dialog.success('支付成功', function () {
                                            if ($.isFunction(self.options.onSuccess)) {
                                                self.options.onSuccess.call(self);
                                            }
                                        });
                                    } else {
                                        if (pay_data.pay_type == 'wx_pub_qr') {
                                            self.wrapEle.html('<div class="qrcode">' + result + '<p>使用微信扫一扫支付</p></div>');
                                        } else {
                                            that.children('.btn-input').text('请去新打开的页面完成支付');
                                            $("<div class='w-alert alert-warning'>如果没有新打开页面，请检查是否被浏览器的广告过滤插件拦截了。</div>").insertAfter(self.wrapEle);
                                            $click.attr('href', '/pay?order_id=' + pay_data.order_id + '&pay_type=' + pay_data.pay_type);
                                            $click[0].click();
                                        }
                                        var timer = setInterval(function () {
                                            $.get('/order/check', {order_id: pay_data.order_id}, function (result) {
                                                if (result.status) {
                                                    clearInterval(timer);
                                                    self.options.onSuccess.call(self);
                                                }
                                            });
                                        }, 2000);
                                    }
                                }
                            }
                        })

                    } else {
                        $.dialog.error(result.info);
                        that.removeAttr('disabled');
                        that.children('.btn-input').text('确认支付');
                    }
                });
            });

            $.dialog(this.wrapEle, {
                title: this.options.title
            });
        },
        freshPrice   : function () {
            if ($.isFunction(this.options.price)) {
                this.price = this.options.price.call(this);
            } else {
                this.price = this.options.price;
            }

            var pay_price = this.price - this.coupon_price;
            if (this.options.coin && this.useCoinEle.is(":checked")) {
                pay_price -= this.options.coin;
            }
            if (pay_price < 0) {
                pay_price = 0;
            }
            this.payPriceEle.html((pay_price / 100).toFixed(2) + '元');
        },
        //动态常见模版
        createTemp   : function () {
            var self     = this;
            var _html    = [
                '<div class="order-from <%=style%>">',
                '<form class="w-form form-horizon dialog-form" method="post">',
                '<%=#infoTpl%>',
                '<%if (coupon){%>',
                '<div class="form-item">',
                '<span class="form-label"></span>',
                '<div class="form-target"><a href="javascript:;" class="w-static use-coupon">使用优惠券</a> </div>',
                '</div>',
                '<div class="form-item" style="display: none;">',
                '<span class="form-label">优惠券：</span>',
                '<div class="form-target coupon">',
                '<label class="w-text text-m">',
                '<input class="text-input coupon-input" type="text" name="coupon" />',
                '<span class="field-msg"></span>' +
                '</label>',
                '<label class="w-select select-m create">',
                '　<select name="select-coupon" class="select-input select-coupon" id="select-coupon">',
                '<option value="">可用优惠券</option>',
                '</select>',
                '</label>',
                '</div>',
                '</div>',
                '<%}%>',
                '<%if (coin>0){%>',
                '<div class="form-item">',
                '<span class="form-label">使用云币：</span>',
                '<div class="form-target">',
                '<label class="w-radio" style=" width: 150px; margin-right: 5px;">',
                '<input class="radio-input" type="checkbox" name="use_coin" value="1" checked="checked" />',
                '<span class="radio-text">可用 ¥<%=coin%></span>',
                '</label>',
                '</div>',
                '</div>',
                '<%}%>',
                '<div class="form-item">',
                '<span class="form-label">实付款：</span>',
                '<div class="form-target">',
                '<span class="w-static pay_price">0元</span>',
                '</div>',
                '</div>',
                '<div class="form-item">',
                '<span class="form-label">支付方式：</span>',
                '<div class="">',
                '<label class="w-radio">',
                '<input class="radio-input" type="radio" name="pay_type" value="alipay" checked="checked" />',
                '<span class="radio-text">支付宝</span>',
                '</label>',
                '<label class="w-radio">',
                '<input class="radio-input" type="radio" name="pay_type" value="wx_pub_qr" />',
                '<span class="radio-text">微信支付</span>',
                '</label>',
                '</div>',
                '</div>',
                '<div class="pay-btn">',
                '<a href="javascript:;" class="btn-success btn-l w-btn"><span class="btn-input">立即支付</span></a>',
                '</div>',
                '</form>' +
                '</div>'
            ].join('');
            this.wrapEle = $(Template.parseTemp(_html, {
                coin   : (this.options.coin / 100).toFixed(2),
                infoTpl: this.options.infoTpl,
                style  : this.options.style,
                coupon : this.options.coupon
            }));
            this.wrapEle.find('.use-coupon').click(function () {
                $(this).parents('.form-item').next().show();
                $(this).parents('.form-item').remove();

                if (self.options.coupon) {
                    $.get('/autocomplete/coupon', {type: self.options.type}).success(function (data) {
                        if (data.length) {
                            $('.user-coupon-list').html('');
                            for (var i in data) {
                                $('.select-coupon').append('<option value="' + data[i] + '">' + data[i] + '</option>');
                            }
                        } else {
                            $('.select-coupon').append('<option value="">无可用优惠券</option>');
                        }
                        $('.select-coupon').change(function () {
                            $('[name=coupon]').val($(this).val());
                            $('[name=coupon]').blur();
                        });
                        $('[name=coupon]').keyup(function () {
                            if ($(this).val() == '') {
                                $('.select-coupon').show();
                            } else {
                                $('.select-coupon').hide();
                            }
                        });
                    });
                }

            });
            this.payPriceEle = this.wrapEle.find('.pay_price');
            this.useCoinEle  = this.wrapEle.find('[name=use_coin]');
            this.payBtnEle   = this.wrapEle.find('.pay-btn .w-btn');
        },
        instantiation: false
    });
});
define('common/module/sharing', function () {

    return Class({
        options      : {
            url    : location.href,
            title  : null,
            summary: null,
            cover  : null
        },
        initial      : function (options) {
            var self = this;
            this.options = $.extend({}, this.options, options);
            $(document).on("click", "a[data-sharing],button[data-sharing]", function (e) {
                e && e.preventDefault();
                var type = $(this).data("sharing");
                self.social[type](self.options);
            });
        },
        config       : function (options) {
            this.options = $.extend({}, this.options, options);
        },
        social       : {
            qq    : function (options) {
                var param = [
                    'url=' + options.url,
                    'desc=刚看到这篇文章不错，推荐给你看看～',
                    'summary=' + options.summary,
                    'site=' + "看云",
                    'title=' + options.title
                ];
                if (options.cover) {
                    param.push('pics=' + encodeURIComponent(options.cover));
                }
                param = param.join('&');
                window.open('http://connect.qq.com/widget/shareqq/index.html?' + param);
            },
            wechat: function (options) {
                $.dialog('<img src="http://www.kancloud.cn/qrcode?url=' + options.url + '" width="300" height="300" style="margin:15px;" />', {
                    title: '分享到微信',
                    cache: true
                });
            },
            weibo : function (options) {
                var param = [
                    'url=' + options.url,
                    'title=' + "【" + options.title + "】" + options.summary
                ];
                if (options.cover) {
                    param.push('pic=' + encodeURIComponent(options.cover));
                }
                param = param.join('&');
                window.open('http://service.weibo.com/share/share.php?' + param);

            }
        },
        instantiation: false
    });
});
define('common/module/tagCreate',function(require,exports,module){
    //载入模版引擎
    var Template = require('common/extend/template');
    return Class({
        _options: {
            appendEle: $(), //标签被载入到的制定元素中
            data: null, //初始标签数据{id:1,name:"xxx"}
            maxNumber: null, //最多创建标签数量
            maxEnterLength: 7, //最大输入字符长度
            hiddenName: 'tag', //隐藏域名称
            itemTpl: [
                '<span class="text"><%=name%></span>'
            ].join(''),
            onAdd: null, //每次新增标签触发回调函数
            onDel: null, //每次删除触发回调函数
            onRepeat: null, //每次检测到有重复的标签触发函数
            onChange: null, //标签数量发生改变事触发回调函数
            onCreate: null, //组件实例化完毕触犯回调函数
            onMaxLimit: null //超出最大数量限制触发回调函数
        },
        //记录当前创建的标签列表
        tagList: [],
        //记录重复时警告样式的定时器
        wranTimer: null,
        //记录上次设置警告样式的元素
        wranEle: $(),
        initial: function(options){
            var self = this;
            //合并配置项
            this.options = $.extend({}, this._options, options);
            //记录添加到指定的元素
            this.appendEle = this.options.appendEle.addClass('m-tag-create');
            //创建基础模版
            this.createEle = this.createHtml();
            //记录标签列表元素
            this.tagListEle = this.createEle.filter('.tag-list');
            //记录输入框元素
            this.enterEle = this.createEle.filter('.tag-enter');
            //记录隐藏域元素
            this.hiddenEle = this.createEle.filter('.tag-hidden');
            //设置标签模版
            this.setTpl(this.options.itemTpl);
            //设置最多可创建多少标签
            this.setMaxNumber(this.options.maxNumber);
            //设置最大输入字符 长度
            this.setMaxEnterLength(this.options.maxEnterLength);
            //记录上次的输入值
            var _prevValue = this.enterEle.val();
            //绑定从输入框创建标签
            this.enterEle.keydown(function(event){
                //输入空格时创建
                if((event.which == 32 || event.which == 13) && _prevValue){
                    self.addItem(_prevValue);
                    _prevValue = '';
                    $(this).val('');
                    return false;
                }
            }).keyup(function(event){
                var _value = $.trim($(this).val());
                //检测输入字符长度
                if(Util.cnstrlen(_value) > self._maxEnter){
                    _value = _prevValue;
                    $(this).val(_value);
                    return false;
                }
                $(this).val(_value);
                _prevValue = _value;
            }).blur(function(){
                var _value = $.trim($(this).val());
                if(_value){
                    self.addItem($(this).val());
                    $(this).val('');
                }
            });
            //输入框始终获取交单
            this.appendEle.click(function(){
                self.enterEle.focus();
            });
            //初始创建标签
            this.addItem(this.options.data);
            //将创建标签模版添加到指定元素内
            this.createEle.appendTo(this.appendEle);
            //触发DOM上的绑定兼容事件
            $(document).trigger('onCompatible', ['placeholder', this.enterEle]);
            //实例化完毕触犯回调函数
            $.isFunction(this.options.onCreate) && this.options.onCreate.call(this);
        },
        //新增标签
        addItem: function(data){
            $.isFunction(data) && (data = data.call(this));
            var _self = this;
            var _data = $.isArray(data) ? data : [data],
            _text = [];
            if(this._maxNumber === null || this.tagList.length < this._maxNumber){
                for(var i = 0; i < _data.length; i++){
                    if(_data[i]){
                        var _name = _data[i].replace(/\s/g, "");
                        if(!this.isRepeat(_name)){
                            var _item = $(Template.parseTemp(this._itemTpl, {name: _name}));
                            _item.find('.close').click((function(item){
                                return function(){
                                    _self.delItem(item);
                                };
                            })(_item));
                            this.tagList.push(_item);
                            this.tagListEle.append(_item);
                            $.isFunction(this.options.onItem) && this.options.onItem.call(this,_item);
                        }
                    }
                }
                for(var i = 0; i < this.tagList.length; i++){
                    _text.push(this.tagList[i].find('.text').text());
                }
                this.hiddenEle.val(_text.join(','));
                $.isFunction(this.options.onChange) && this.options.onChange.call(this);
            }else{
                $.isFunction(this.options.onMaxLimit) && this.options.onMaxLimit.call(this,this._maxNumber);
            }
        },
        //删除标签
        delItem: function(item){
            var _text = [];
            var _index = this.inItem(item);
            if(_index >= 0){
                item.remove();
                this.tagList.splice(_index, 1);
                for(var i = 0; i < this.tagList.length; i++){
                    _text.push(this.tagList[i].find('.text').text());
                }
                this.hiddenEle.val(_text.join(','));
                $.isFunction(this.options.onChange) && this.options.onChange.call(this);
                $.isFunction(this.options.onDel) && this.options.onDel.call(this,_index);
            }
        },
        //检测标签是否存在
        inItem: function(item){
            for(var i = 0; i < this.tagList.length; i++){
                if(this.tagList[i].is(item)){
                    return i;
                }
            }
            return -1;
        },
        //检测是否重复创建
        isRepeat: function(text){
            var _self = this, _step = 0;
            for(var i = 0; i < this.tagList.length; i++){
                if(this.tagList[i].find('.text').text() == text){
                    clearTimeout(this.wranTimer);
                    this.wranEle.removeClass('tag-wran');
                    this.wranTimer = setInterval(function(){
                        if(_step < 6){
                            _self.tagList[i].toggleClass('tag-wran');
                        }else{
                            clearInterval(_self.wranTimer);
                        }
                        ++_step;
                    },200);
                    this.wranEle = this.tagList[i];
                    $.isFunction(this.options.onRepeat) && this.options.onRepeat.call(this,this.tagList[i],text);
                    return true;
                }
            }
            return false;
        },
        //设置标签模版
        setTpl: function(tpl){
            this._itemTpl = '<span class="tag-item">'+tpl+'<b class="close icon-cross"></b></span>';
            return this;
        },
        //设置最大数量
        setMaxNumber: function(number){
            if($.type(number) == 'number'){
                this._maxNumber = parseInt(number,10);
            }else{
                this._maxNumber = null;
            }
            return this;
        },
        //设置最大输入字符长度
        setMaxEnterLength: function(number){
            if($.type(number) == 'number'){
                this._maxEnter = parseInt(number,10);
            }else{
                this._maxEnter = null;
            }
            return this;
        },
        //创建基础模版
        createHtml: function(){
            var _html = [
                '<span class="tag-list"></span>',
                '<input class="tag-enter" type="text" placeholder="点击空白处输入标签" />',
                '<input class="tag-hidden" type="hidden" name="'+this.options.hiddenName+'" />'
            ].join('');
            return $(_html);
        },
        instantiation: false
    });
})
